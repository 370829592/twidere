android.support.v4.app.ActivityCompatHoneycomb -> android.support.v4.app.a:
    void invalidateOptionsMenu(android.app.Activity) -> a
android.support.v4.app.BackStackRecord -> android.support.v4.app.b:
    android.support.v4.app.FragmentManagerImpl mManager -> a
    android.support.v4.app.BackStackRecord$Op mHead -> b
    android.support.v4.app.BackStackRecord$Op mTail -> c
    int mNumOp -> d
    int mEnterAnim -> e
    int mExitAnim -> f
    int mPopEnterAnim -> g
    int mPopExitAnim -> h
    int mTransition -> i
    int mTransitionStyle -> j
    boolean mAddToBackStack -> k
    boolean mAllowAddToBackStack -> l
    java.lang.String mName -> m
    boolean mCommitted -> n
    int mIndex -> o
    int mBreadCrumbTitleRes -> p
    java.lang.CharSequence mBreadCrumbTitleText -> q
    int mBreadCrumbShortTitleRes -> r
    java.lang.CharSequence mBreadCrumbShortTitleText -> s
    void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[]) -> a
    void addOp(android.support.v4.app.BackStackRecord$Op) -> a
    android.support.v4.app.FragmentTransaction add(android.support.v4.app.Fragment,java.lang.String) -> a
    android.support.v4.app.FragmentTransaction add(int,android.support.v4.app.Fragment) -> a
    void doAddOp(int,android.support.v4.app.Fragment,java.lang.String,int) -> a
    android.support.v4.app.FragmentTransaction replace(int,android.support.v4.app.Fragment) -> b
    android.support.v4.app.FragmentTransaction replace(int,android.support.v4.app.Fragment,java.lang.String) -> a
    android.support.v4.app.FragmentTransaction remove(android.support.v4.app.Fragment) -> a
    android.support.v4.app.FragmentTransaction setTransitionStyle(int) -> a
    android.support.v4.app.FragmentTransaction addToBackStack(java.lang.String) -> a
    void bumpBackStackNesting(int) -> b
    int commit() -> a
    int commitAllowingStateLoss() -> b
    int commitInternal(boolean) -> a
    void run() -> run
    void popFromBackStack(boolean) -> b
    java.lang.String getName() -> c
android.support.v4.app.BackStackRecord$Op -> android.support.v4.app.c:
    android.support.v4.app.BackStackRecord$Op next -> a
    android.support.v4.app.BackStackRecord$Op prev -> b
    int cmd -> c
    android.support.v4.app.Fragment fragment -> d
    int enterAnim -> e
    int exitAnim -> f
    int popEnterAnim -> g
    int popExitAnim -> h
    java.util.ArrayList removed -> i
android.support.v4.app.BackStackState -> android.support.v4.app.BackStackState:
    int[] mOps -> a
    int mTransition -> b
    int mTransitionStyle -> c
    java.lang.String mName -> d
    int mIndex -> e
    int mBreadCrumbTitleRes -> f
    java.lang.CharSequence mBreadCrumbTitleText -> g
    int mBreadCrumbShortTitleRes -> h
    java.lang.CharSequence mBreadCrumbShortTitleText -> i
    android.os.Parcelable$Creator CREATOR -> CREATOR
    android.support.v4.app.BackStackRecord instantiate(android.support.v4.app.FragmentManagerImpl) -> a
    int describeContents() -> describeContents
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
android.support.v4.app.BackStackState$1 -> android.support.v4.app.d:
    android.support.v4.app.BackStackState createFromParcel(android.os.Parcel) -> a
    android.support.v4.app.BackStackState[] newArray(int) -> a
    java.lang.Object[] newArray(int) -> newArray
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
android.support.v4.app.DialogFragment -> android.support.v4.app.e:
    int mStyle -> a
    int mTheme -> b
    boolean mCancelable -> c
    boolean mShowsDialog -> d
    int mBackStackId -> e
    android.app.Dialog mDialog -> f
    boolean mDestroyed -> g
    boolean mRemoved -> h
    void show(android.support.v4.app.FragmentManager,java.lang.String) -> a
    int show(android.support.v4.app.FragmentTransaction,java.lang.String) -> a
    void dismiss() -> a
    void dismissInternal(boolean) -> a
    int getTheme() -> b
    void onCreate(android.os.Bundle) -> a
    android.view.LayoutInflater getLayoutInflater(android.os.Bundle) -> b
    android.app.Dialog onCreateDialog(android.os.Bundle) -> c
    void onCancel(android.content.DialogInterface) -> onCancel
    void onDismiss(android.content.DialogInterface) -> onDismiss
    void onActivityCreated(android.os.Bundle) -> d
    void onStart() -> c
    void onSaveInstanceState(android.os.Bundle) -> e
    void onStop() -> d
    void onDestroyView() -> e
android.support.v4.app.Fragment -> android.support.v4.app.Fragment:
    java.util.HashMap sClassMap -> a
    int mState -> i
    android.view.View mAnimatingAway -> j
    int mStateAfterAnimating -> k
    android.os.Bundle mSavedFragmentState -> l
    android.util.SparseArray mSavedViewState -> m
    int mIndex -> n
    java.lang.String mWho -> o
    android.os.Bundle mArguments -> p
    android.support.v4.app.Fragment mTarget -> q
    int mTargetIndex -> r
    int mTargetRequestCode -> s
    boolean mAdded -> t
    boolean mRemoving -> u
    boolean mResumed -> v
    boolean mFromLayout -> w
    boolean mInLayout -> x
    boolean mRestored -> y
    int mBackStackNesting -> z
    android.support.v4.app.FragmentManagerImpl mFragmentManager -> A
    android.support.v4.app.FragmentActivity mActivity -> B
    int mFragmentId -> C
    int mContainerId -> D
    java.lang.String mTag -> E
    boolean mHidden -> F
    boolean mDetached -> G
    boolean mRetainInstance -> H
    boolean mRetaining -> I
    boolean mHasMenu -> J
    boolean mMenuVisible -> K
    boolean mCalled -> L
    int mNextAnim -> M
    android.view.ViewGroup mContainer -> N
    android.view.View mView -> O
    android.view.View mInnerView -> P
    boolean mDeferStart -> Q
    boolean mUserVisibleHint -> R
    android.support.v4.app.LoaderManagerImpl mLoaderManager -> S
    boolean mLoadersStarted -> T
    boolean mCheckedForLoaderManager -> U
    android.support.v4.app.Fragment instantiate(android.content.Context,java.lang.String) -> a
    android.support.v4.app.Fragment instantiate(android.content.Context,java.lang.String,android.os.Bundle) -> a
    void restoreViewState() -> f
    void setIndex(int) -> a
    boolean isInBackStack() -> g
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    void setArguments(android.os.Bundle) -> f
    android.os.Bundle getArguments() -> h
    void setInitialSavedState(android.support.v4.app.Fragment$SavedState) -> a
    android.support.v4.app.FragmentActivity getActivity() -> i
    android.content.res.Resources getResources() -> j
    java.lang.String getString(int) -> b
    java.lang.String getString(int,java.lang.Object[]) -> a
    android.support.v4.app.FragmentManager getFragmentManager() -> k
    boolean isAdded() -> l
    boolean isHidden() -> m
    void onHiddenChanged(boolean) -> b
    void setRetainInstance(boolean) -> c
    void setHasOptionsMenu(boolean) -> d
    void setMenuVisibility(boolean) -> e
    android.support.v4.app.LoaderManager getLoaderManager() -> n
    void startActivity(android.content.Intent) -> a
    void startActivityForResult(android.content.Intent,int) -> a
    void onActivityResult(int,int,android.content.Intent) -> a
    android.view.LayoutInflater getLayoutInflater(android.os.Bundle) -> b
    void onInflate(android.app.Activity,android.util.AttributeSet,android.os.Bundle) -> a
    void onAttach(android.app.Activity) -> a
    android.view.animation.Animation onCreateAnimation(int,boolean,int) -> a
    void onCreate(android.os.Bundle) -> a
    android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle) -> a
    void onViewCreated(android.view.View,android.os.Bundle) -> a
    android.view.View getView() -> o
    void onActivityCreated(android.os.Bundle) -> d
    void onStart() -> c
    void onResume() -> p
    void onSaveInstanceState(android.os.Bundle) -> e
    void onConfigurationChanged(android.content.res.Configuration) -> onConfigurationChanged
    void onPause() -> q
    void onStop() -> d
    void onLowMemory() -> onLowMemory
    void onDestroyView() -> e
    void onDestroy() -> r
    void initState() -> s
    void onDetach() -> t
    void onCreateOptionsMenu(android.view.Menu,android.view.MenuInflater) -> a
    void onPrepareOptionsMenu(android.view.Menu) -> a
    void onDestroyOptionsMenu() -> u
    boolean onOptionsItemSelected(android.view.MenuItem) -> a_
    void onOptionsMenuClosed(android.view.Menu) -> b
    void onCreateContextMenu(android.view.ContextMenu,android.view.View,android.view.ContextMenu$ContextMenuInfo) -> onCreateContextMenu
    boolean onContextItemSelected(android.view.MenuItem) -> b
    void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[]) -> a
    void performStart() -> v
    void performStop() -> w
    void performReallyStop() -> x
    void performDestroyView() -> y
android.support.v4.app.Fragment$InstantiationException -> android.support.v4.app.f:
android.support.v4.app.Fragment$SavedState -> android.support.v4.app.Fragment$SavedState:
    android.os.Bundle mState -> a
    android.os.Parcelable$Creator CREATOR -> CREATOR
    int describeContents() -> describeContents
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
android.support.v4.app.Fragment$SavedState$1 -> android.support.v4.app.g:
    android.support.v4.app.Fragment$SavedState createFromParcel(android.os.Parcel) -> a
    android.support.v4.app.Fragment$SavedState[] newArray(int) -> a
    java.lang.Object[] newArray(int) -> newArray
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
android.support.v4.app.FragmentActivity -> android.support.v4.app.h:
    android.os.Handler mHandler -> a
    android.support.v4.app.FragmentManagerImpl mFragments -> b
    boolean mCreated -> c
    boolean mResumed -> d
    boolean mStopped -> e
    boolean mReallyStopped -> f
    boolean mRetaining -> g
    boolean mOptionsMenuInvalidated -> h
    boolean mCheckedForLoaderManager -> i
    boolean mLoadersStarted -> j
    android.support.v4.app.HCSparseArray mAllLoaderManagers -> k
    android.support.v4.app.LoaderManagerImpl mLoaderManager -> l
    void onActivityResult(int,int,android.content.Intent) -> onActivityResult
    void onBackPressed() -> onBackPressed
    void onConfigurationChanged(android.content.res.Configuration) -> onConfigurationChanged
    void onCreate(android.os.Bundle) -> onCreate
    boolean onCreatePanelMenu(int,android.view.Menu) -> onCreatePanelMenu
    android.view.View onCreateView(java.lang.String,android.content.Context,android.util.AttributeSet) -> onCreateView
    void onDestroy() -> onDestroy
    boolean onKeyDown(int,android.view.KeyEvent) -> onKeyDown
    void onLowMemory() -> onLowMemory
    boolean onMenuItemSelected(int,android.view.MenuItem) -> onMenuItemSelected
    void onPanelClosed(int,android.view.Menu) -> onPanelClosed
    void onPause() -> onPause
    void onResume() -> onResume
    void onPostResume() -> onPostResume
    boolean onPreparePanel(int,android.view.View,android.view.Menu) -> onPreparePanel
    java.lang.Object onRetainNonConfigurationInstance() -> onRetainNonConfigurationInstance
    void onSaveInstanceState(android.os.Bundle) -> onSaveInstanceState
    void onStart() -> onStart
    void onStop() -> onStop
    java.lang.Object onRetainCustomNonConfigurationInstance() -> a_
    void supportInvalidateOptionsMenu() -> b
    void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[]) -> dump
    void doReallyStop(boolean) -> a
    void onReallyStop() -> c
    void onAttachFragment(android.support.v4.app.Fragment) -> a
    android.support.v4.app.FragmentManager getSupportFragmentManager() -> d
    void startActivityForResult(android.content.Intent,int) -> startActivityForResult
    void startActivityFromFragment(android.support.v4.app.Fragment,android.content.Intent,int) -> a
    void invalidateSupportFragmentIndex(int) -> a
    android.support.v4.app.LoaderManager getSupportLoaderManager() -> e
    android.support.v4.app.LoaderManagerImpl getLoaderManager(int,boolean,boolean) -> a
android.support.v4.app.FragmentActivity$1 -> android.support.v4.app.i:
    android.support.v4.app.FragmentActivity this$0 -> a
    void handleMessage(android.os.Message) -> handleMessage
android.support.v4.app.FragmentActivity$FragmentTag -> android.support.v4.app.j:
    int[] Fragment -> a
android.support.v4.app.FragmentActivity$NonConfigurationInstances -> android.support.v4.app.k:
    java.lang.Object activity -> a
    java.lang.Object custom -> b
    java.util.HashMap children -> c
    java.util.ArrayList fragments -> d
    android.support.v4.app.HCSparseArray loaders -> e
android.support.v4.app.FragmentManager -> android.support.v4.app.l:
    android.support.v4.app.FragmentTransaction beginTransaction() -> a
    boolean executePendingTransactions() -> b
    android.support.v4.app.Fragment findFragmentById(int) -> a
    void popBackStack() -> c
    boolean popBackStackImmediate() -> d
    void popBackStack(int,int) -> a
    void addOnBackStackChangedListener(android.support.v4.app.FragmentManager$OnBackStackChangedListener) -> a
    void putFragment(android.os.Bundle,java.lang.String,android.support.v4.app.Fragment) -> a
    android.support.v4.app.Fragment getFragment(android.os.Bundle,java.lang.String) -> a
    android.support.v4.app.Fragment$SavedState saveFragmentInstanceState(android.support.v4.app.Fragment) -> a
android.support.v4.app.FragmentManager$OnBackStackChangedListener -> android.support.v4.app.m:
    void onBackStackChanged() -> a
android.support.v4.app.FragmentManagerImpl -> android.support.v4.app.n:
    boolean DEBUG -> a
    boolean HONEYCOMB -> b
    java.util.ArrayList mPendingActions -> c
    java.lang.Runnable[] mTmpActions -> d
    boolean mExecutingActions -> e
    java.util.ArrayList mActive -> f
    java.util.ArrayList mAdded -> g
    java.util.ArrayList mAvailIndices -> h
    java.util.ArrayList mBackStack -> i
    java.util.ArrayList mCreatedMenus -> j
    java.util.ArrayList mBackStackIndices -> k
    java.util.ArrayList mAvailBackStackIndices -> l
    java.util.ArrayList mBackStackChangeListeners -> m
    int mCurState -> n
    android.support.v4.app.FragmentActivity mActivity -> o
    boolean mNeedMenuInvalidate -> p
    boolean mStateSaved -> q
    boolean mDestroyed -> r
    java.lang.String mNoTransactionsBecause -> s
    boolean mHavePendingDeferredStart -> t
    android.os.Bundle mStateBundle -> u
    android.util.SparseArray mStateArray -> v
    java.lang.Runnable mExecCommit -> w
    android.view.animation.Interpolator DECELERATE_QUINT -> x
    android.view.animation.Interpolator DECELERATE_CUBIC -> y
    android.view.animation.Interpolator ACCELERATE_QUINT -> z
    android.view.animation.Interpolator ACCELERATE_CUBIC -> A
    android.support.v4.app.FragmentTransaction beginTransaction() -> a
    boolean executePendingTransactions() -> b
    void popBackStack() -> c
    boolean popBackStackImmediate() -> d
    void popBackStack(int,int) -> a
    void addOnBackStackChangedListener(android.support.v4.app.FragmentManager$OnBackStackChangedListener) -> a
    void putFragment(android.os.Bundle,java.lang.String,android.support.v4.app.Fragment) -> a
    android.support.v4.app.Fragment getFragment(android.os.Bundle,java.lang.String) -> a
    android.support.v4.app.Fragment$SavedState saveFragmentInstanceState(android.support.v4.app.Fragment) -> a
    java.lang.String toString() -> toString
    void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[]) -> a
    android.view.animation.Animation makeOpenCloseAnimation(android.content.Context,float,float,float,float) -> a
    android.view.animation.Animation makeFadeAnimation(android.content.Context,float,float) -> a
    android.view.animation.Animation loadAnimation(android.support.v4.app.Fragment,int,boolean,int) -> a
    void performPendingDeferredStart(android.support.v4.app.Fragment) -> b
    void moveToState(android.support.v4.app.Fragment,int,int,int) -> a
    void moveToState(android.support.v4.app.Fragment) -> c
    void moveToState(int,boolean) -> a
    void moveToState(int,int,int,boolean) -> a
    void startPendingDeferredFragments() -> e
    void makeActive(android.support.v4.app.Fragment) -> d
    void makeInactive(android.support.v4.app.Fragment) -> e
    void addFragment(android.support.v4.app.Fragment,boolean) -> a
    void removeFragment(android.support.v4.app.Fragment,int,int) -> a
    void hideFragment(android.support.v4.app.Fragment,int,int) -> b
    void showFragment(android.support.v4.app.Fragment,int,int) -> c
    void detachFragment(android.support.v4.app.Fragment,int,int) -> d
    void attachFragment(android.support.v4.app.Fragment,int,int) -> e
    android.support.v4.app.Fragment findFragmentById(int) -> a
    android.support.v4.app.Fragment findFragmentByTag(java.lang.String) -> a
    void checkStateLoss() -> t
    void enqueueAction(java.lang.Runnable,boolean) -> a
    int allocBackStackIndex(android.support.v4.app.BackStackRecord) -> a
    void setBackStackIndex(int,android.support.v4.app.BackStackRecord) -> a
    void freeBackStackIndex(int) -> b
    boolean execPendingActions() -> f
    void reportBackStackChanged() -> g
    void addBackStackState(android.support.v4.app.BackStackRecord) -> b
    boolean popBackStackState(android.os.Handler,java.lang.String,int,int) -> a
    java.util.ArrayList retainNonConfig() -> h
    void saveFragmentViewState(android.support.v4.app.Fragment) -> f
    android.os.Bundle saveFragmentBasicState(android.support.v4.app.Fragment) -> g
    android.os.Parcelable saveAllState() -> i
    void restoreAllState(android.os.Parcelable,java.util.ArrayList) -> a
    void attachActivity(android.support.v4.app.FragmentActivity) -> a
    void noteStateNotSaved() -> j
    void dispatchCreate() -> k
    void dispatchActivityCreated() -> l
    void dispatchStart() -> m
    void dispatchResume() -> n
    void dispatchPause() -> o
    void dispatchStop() -> p
    void dispatchReallyStop() -> q
    void dispatchDestroy() -> r
    void dispatchConfigurationChanged(android.content.res.Configuration) -> a
    void dispatchLowMemory() -> s
    boolean dispatchCreateOptionsMenu(android.view.Menu,android.view.MenuInflater) -> a
    boolean dispatchPrepareOptionsMenu(android.view.Menu) -> a
    boolean dispatchOptionsItemSelected(android.view.MenuItem) -> a
    boolean dispatchContextItemSelected(android.view.MenuItem) -> b
    void dispatchOptionsMenuClosed(android.view.Menu) -> b
    int reverseTransit(int) -> c
    int transitToStyleIndex(int,boolean) -> b
android.support.v4.app.FragmentManagerImpl$1 -> android.support.v4.app.o:
    android.support.v4.app.FragmentManagerImpl this$0 -> a
    void run() -> run
android.support.v4.app.FragmentManagerImpl$2 -> android.support.v4.app.p:
    android.support.v4.app.FragmentManagerImpl this$0 -> a
    void run() -> run
android.support.v4.app.FragmentManagerImpl$4 -> android.support.v4.app.q:
    int val$id -> a
    int val$flags -> b
    android.support.v4.app.FragmentManagerImpl this$0 -> c
    void run() -> run
android.support.v4.app.FragmentManagerImpl$5 -> android.support.v4.app.r:
    android.support.v4.app.Fragment val$fragment -> a
    android.support.v4.app.FragmentManagerImpl this$0 -> b
    void onAnimationEnd(android.view.animation.Animation) -> onAnimationEnd
    void onAnimationRepeat(android.view.animation.Animation) -> onAnimationRepeat
    void onAnimationStart(android.view.animation.Animation) -> onAnimationStart
android.support.v4.app.FragmentManagerState -> android.support.v4.app.FragmentManagerState:
    android.support.v4.app.FragmentState[] mActive -> a
    int[] mAdded -> b
    android.support.v4.app.BackStackState[] mBackStack -> c
    android.os.Parcelable$Creator CREATOR -> CREATOR
    int describeContents() -> describeContents
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
android.support.v4.app.FragmentManagerState$1 -> android.support.v4.app.s:
    android.support.v4.app.FragmentManagerState createFromParcel(android.os.Parcel) -> a
    android.support.v4.app.FragmentManagerState[] newArray(int) -> a
    java.lang.Object[] newArray(int) -> newArray
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
android.support.v4.app.FragmentState -> android.support.v4.app.FragmentState:
    java.lang.String mClassName -> a
    int mIndex -> b
    boolean mFromLayout -> c
    int mFragmentId -> d
    int mContainerId -> e
    java.lang.String mTag -> f
    boolean mRetainInstance -> g
    boolean mDetached -> h
    android.os.Bundle mArguments -> i
    android.os.Bundle mSavedFragmentState -> j
    android.support.v4.app.Fragment mInstance -> k
    android.os.Parcelable$Creator CREATOR -> CREATOR
    android.support.v4.app.Fragment instantiate(android.support.v4.app.FragmentActivity) -> a
    int describeContents() -> describeContents
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
android.support.v4.app.FragmentState$1 -> android.support.v4.app.t:
    android.support.v4.app.FragmentState createFromParcel(android.os.Parcel) -> a
    android.support.v4.app.FragmentState[] newArray(int) -> a
    java.lang.Object[] newArray(int) -> newArray
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
android.support.v4.app.FragmentStatePagerAdapter -> android.support.v4.app.u:
    android.support.v4.app.FragmentManager mFragmentManager -> a
    android.support.v4.app.FragmentTransaction mCurTransaction -> b
    java.util.ArrayList mSavedState -> c
    java.util.ArrayList mFragments -> d
    android.support.v4.app.Fragment mCurrentPrimaryItem -> e
    android.support.v4.app.Fragment getItem(int) -> a
    void startUpdate(android.view.ViewGroup) -> a
    java.lang.Object instantiateItem(android.view.ViewGroup,int) -> a
    void destroyItem(android.view.ViewGroup,int,java.lang.Object) -> a
    void setPrimaryItem(android.view.ViewGroup,int,java.lang.Object) -> b
    void finishUpdate(android.view.ViewGroup) -> b
    boolean isViewFromObject(android.view.View,java.lang.Object) -> a
    android.os.Parcelable saveState() -> a
    void restoreState(android.os.Parcelable,java.lang.ClassLoader) -> a
android.support.v4.app.FragmentTransaction -> android.support.v4.app.v:
    android.support.v4.app.FragmentTransaction add(android.support.v4.app.Fragment,java.lang.String) -> a
    android.support.v4.app.FragmentTransaction add(int,android.support.v4.app.Fragment) -> a
    android.support.v4.app.FragmentTransaction replace(int,android.support.v4.app.Fragment) -> b
    android.support.v4.app.FragmentTransaction remove(android.support.v4.app.Fragment) -> a
    android.support.v4.app.FragmentTransaction setTransitionStyle(int) -> a
    android.support.v4.app.FragmentTransaction addToBackStack(java.lang.String) -> a
    int commit() -> a
    int commitAllowingStateLoss() -> b
android.support.v4.app.HCSparseArray -> android.support.v4.app.w:
    java.lang.Object DELETED -> a
    boolean mGarbage -> b
    int[] mKeys -> c
    java.lang.Object[] mValues -> d
    int mSize -> e
    java.lang.Object get(int) -> a
    java.lang.Object get(int,java.lang.Object) -> a
    void delete(int) -> b
    void remove(int) -> c
    void removeAt(int) -> d
    void gc() -> c
    void put(int,java.lang.Object) -> b
    int size() -> a
    int keyAt(int) -> e
    java.lang.Object valueAt(int) -> f
    void clear() -> b
    int binarySearch(int[],int,int,int) -> a
    int idealByteArraySize(int) -> g
    int idealIntArraySize(int) -> h
android.support.v4.app.ListFragment -> android.support.v4.app.x:
    android.os.Handler mHandler -> V
    java.lang.Runnable mRequestFocus -> W
    android.widget.AdapterView$OnItemClickListener mOnClickListener -> X
    android.widget.ListAdapter mAdapter -> a
    android.widget.ListView mList -> b
    android.view.View mEmptyView -> c
    android.widget.TextView mStandardEmptyView -> d
    android.view.View mProgressContainer -> e
    android.view.View mListContainer -> f
    java.lang.CharSequence mEmptyText -> g
    boolean mListShown -> h
    android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle) -> a
    void onViewCreated(android.view.View,android.os.Bundle) -> a
    void onDestroyView() -> e
    void onListItemClick(android.widget.ListView,android.view.View,int,long) -> a
    void setListAdapter(android.widget.ListAdapter) -> a
    android.widget.ListView getListView() -> a
    void setListShown(boolean) -> a
    void setListShown(boolean,boolean) -> a
    void ensureList() -> b
android.support.v4.app.ListFragment$1 -> android.support.v4.app.y:
    android.support.v4.app.ListFragment this$0 -> a
    void run() -> run
android.support.v4.app.ListFragment$2 -> android.support.v4.app.z:
    android.support.v4.app.ListFragment this$0 -> a
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
android.support.v4.app.LoaderManager -> android.support.v4.app.aa:
    android.support.v4.content.Loader initLoader(int,android.os.Bundle,android.support.v4.app.LoaderManager$LoaderCallbacks) -> a
    android.support.v4.content.Loader restartLoader(int,android.os.Bundle,android.support.v4.app.LoaderManager$LoaderCallbacks) -> b
    boolean hasRunningLoaders() -> a
android.support.v4.app.LoaderManager$LoaderCallbacks -> android.support.v4.app.ab:
    android.support.v4.content.Loader onCreateLoader(int,android.os.Bundle) -> a
    void onLoadFinished(android.support.v4.content.Loader,java.lang.Object) -> a
    void onLoaderReset(android.support.v4.content.Loader) -> a
android.support.v4.app.LoaderManagerImpl -> android.support.v4.app.ac:
    boolean DEBUG -> a
    android.support.v4.app.HCSparseArray mLoaders -> b
    android.support.v4.app.HCSparseArray mInactiveLoaders -> c
    android.support.v4.app.FragmentActivity mActivity -> d
    boolean mStarted -> e
    boolean mRetaining -> f
    boolean mCreatingLoader -> g
    void updateActivity(android.support.v4.app.FragmentActivity) -> a
    android.support.v4.app.LoaderManagerImpl$LoaderInfo createLoader(int,android.os.Bundle,android.support.v4.app.LoaderManager$LoaderCallbacks) -> c
    android.support.v4.app.LoaderManagerImpl$LoaderInfo createAndInstallLoader(int,android.os.Bundle,android.support.v4.app.LoaderManager$LoaderCallbacks) -> d
    void installLoader(android.support.v4.app.LoaderManagerImpl$LoaderInfo) -> a
    android.support.v4.content.Loader initLoader(int,android.os.Bundle,android.support.v4.app.LoaderManager$LoaderCallbacks) -> a
    android.support.v4.content.Loader restartLoader(int,android.os.Bundle,android.support.v4.app.LoaderManager$LoaderCallbacks) -> b
    void doStart() -> b
    void doStop() -> c
    void doRetain() -> d
    void finishRetain() -> e
    void doReportNextStart() -> f
    void doReportStart() -> g
    void doDestroy() -> h
    java.lang.String toString() -> toString
    void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[]) -> a
    boolean hasRunningLoaders() -> a
android.support.v4.app.LoaderManagerImpl$LoaderInfo -> android.support.v4.app.ad:
    int mId -> a
    android.os.Bundle mArgs -> b
    android.support.v4.app.LoaderManager$LoaderCallbacks mCallbacks -> c
    android.support.v4.content.Loader mLoader -> d
    boolean mHaveData -> e
    boolean mDeliveredData -> f
    java.lang.Object mData -> g
    boolean mStarted -> h
    boolean mRetaining -> i
    boolean mRetainingStarted -> j
    boolean mReportNextStart -> k
    boolean mDestroyed -> l
    boolean mListenerRegistered -> m
    android.support.v4.app.LoaderManagerImpl$LoaderInfo mPendingLoader -> n
    android.support.v4.app.LoaderManagerImpl this$0 -> o
    void start() -> a
    void retain() -> b
    void finishRetain() -> c
    void reportStart() -> d
    void stop() -> e
    void destroy() -> f
    void onLoadComplete(android.support.v4.content.Loader,java.lang.Object) -> a
    void callOnLoadFinished(android.support.v4.content.Loader,java.lang.Object) -> b
    java.lang.String toString() -> toString
    void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[]) -> a
android.support.v4.app.NoSaveStateFrameLayout -> android.support.v4.app.ae:
    android.view.ViewGroup wrap(android.view.View) -> a
    void dispatchSaveInstanceState(android.util.SparseArray) -> dispatchSaveInstanceState
    void dispatchRestoreInstanceState(android.util.SparseArray) -> dispatchRestoreInstanceState
android.support.v4.app.SuperNotCalledException -> android.support.v4.app.af:
android.support.v4.content.AsyncTaskLoader -> android.support.v4.a.a:
    android.support.v4.content.AsyncTaskLoader$LoadTask mTask -> a
    android.support.v4.content.AsyncTaskLoader$LoadTask mCancellingTask -> b
    long mUpdateThrottle -> c
    long mLastLoadCompleteTime -> d
    android.os.Handler mHandler -> e
    void onForceLoad() -> a
    boolean cancelLoad() -> b
    void onCanceled(java.lang.Object) -> a
    void executePendingTask() -> c
    void dispatchOnCancelled(android.support.v4.content.AsyncTaskLoader$LoadTask,java.lang.Object) -> a
    void dispatchOnLoadComplete(android.support.v4.content.AsyncTaskLoader$LoadTask,java.lang.Object) -> b
    java.lang.Object loadInBackground() -> d
    java.lang.Object onLoadInBackground() -> e
    void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[]) -> a
android.support.v4.content.AsyncTaskLoader$LoadTask -> android.support.v4.a.b:
    java.lang.Object result -> a
    boolean waiting -> b
    java.util.concurrent.CountDownLatch done -> e
    android.support.v4.content.AsyncTaskLoader this$0 -> c
    java.lang.Object doInBackground(java.lang.Void[]) -> a
    void onPostExecute(java.lang.Object) -> a
    void onCancelled() -> a
    void run() -> run
    java.lang.Object doInBackground(java.lang.Object[]) -> a
android.support.v4.content.CursorLoader -> android.support.v4.a.c:
    android.support.v4.content.Loader$ForceLoadContentObserver mObserver -> f
    android.net.Uri mUri -> g
    java.lang.String[] mProjection -> h
    java.lang.String mSelection -> i
    java.lang.String[] mSelectionArgs -> j
    java.lang.String mSortOrder -> k
    android.database.Cursor mCursor -> l
    android.database.Cursor loadInBackground() -> f
    void registerContentObserver(android.database.Cursor,android.database.ContentObserver) -> a
    void deliverResult(android.database.Cursor) -> a
    void onStartLoading() -> g
    void onStopLoading() -> h
    void onCanceled(android.database.Cursor) -> b
    void onReset() -> i
    void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[]) -> a
    java.lang.Object loadInBackground() -> d
    void onCanceled(java.lang.Object) -> a
    void deliverResult(java.lang.Object) -> b
android.support.v4.content.Loader -> android.support.v4.a.d:
    int mId -> m
    android.support.v4.content.Loader$OnLoadCompleteListener mListener -> n
    android.content.Context mContext -> o
    boolean mStarted -> p
    boolean mAbandoned -> q
    boolean mReset -> r
    boolean mContentChanged -> s
    void deliverResult(java.lang.Object) -> b
    android.content.Context getContext() -> j
    void registerListener(int,android.support.v4.content.Loader$OnLoadCompleteListener) -> a
    void unregisterListener(android.support.v4.content.Loader$OnLoadCompleteListener) -> a
    boolean isStarted() -> k
    boolean isAbandoned() -> l
    boolean isReset() -> m
    void startLoading() -> n
    void onStartLoading() -> g
    void forceLoad() -> o
    void onForceLoad() -> a
    void stopLoading() -> p
    void onStopLoading() -> h
    void abandon() -> q
    void onAbandon() -> r
    void reset() -> s
    void onReset() -> i
    boolean takeContentChanged() -> t
    void onContentChanged() -> u
    java.lang.String dataToString(java.lang.Object) -> c
    java.lang.String toString() -> toString
    void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[]) -> a
android.support.v4.content.Loader$ForceLoadContentObserver -> android.support.v4.a.e:
    android.support.v4.content.Loader this$0 -> a
    boolean deliverSelfNotifications() -> deliverSelfNotifications
    void onChange(boolean) -> onChange
android.support.v4.content.Loader$OnLoadCompleteListener -> android.support.v4.a.f:
    void onLoadComplete(android.support.v4.content.Loader,java.lang.Object) -> a
android.support.v4.content.ModernAsyncTask -> android.support.v4.a.g:
    java.util.concurrent.ThreadFactory sThreadFactory -> a
    java.util.concurrent.BlockingQueue sPoolWorkQueue -> b
    java.util.concurrent.Executor THREAD_POOL_EXECUTOR -> d
    android.support.v4.content.ModernAsyncTask$InternalHandler sHandler -> c
    java.util.concurrent.Executor sDefaultExecutor -> e
    android.support.v4.content.ModernAsyncTask$WorkerRunnable mWorker -> f
    java.util.concurrent.FutureTask mFuture -> g
    android.support.v4.content.ModernAsyncTask$Status mStatus -> h
    java.util.concurrent.atomic.AtomicBoolean mTaskInvoked -> i
    void postResultIfNotInvoked(java.lang.Object) -> c
    java.lang.Object postResult(java.lang.Object) -> d
    java.lang.Object doInBackground(java.lang.Object[]) -> a
    void onPreExecute() -> b
    void onPostExecute(java.lang.Object) -> a
    void onProgressUpdate(java.lang.Object[]) -> b
    void onCancelled(java.lang.Object) -> b
    void onCancelled() -> a
    boolean isCancelled() -> c
    boolean cancel(boolean) -> a
    android.support.v4.content.ModernAsyncTask executeOnExecutor(java.util.concurrent.Executor,java.lang.Object[]) -> a
    void finish(java.lang.Object) -> e
    java.util.concurrent.atomic.AtomicBoolean access$200(android.support.v4.content.ModernAsyncTask) -> a
    java.lang.Object access$300(android.support.v4.content.ModernAsyncTask,java.lang.Object) -> a
    void access$400(android.support.v4.content.ModernAsyncTask,java.lang.Object) -> b
    void access$500(android.support.v4.content.ModernAsyncTask,java.lang.Object) -> c
android.support.v4.content.ModernAsyncTask$1 -> android.support.v4.a.h:
    java.util.concurrent.atomic.AtomicInteger mCount -> a
    java.lang.Thread newThread(java.lang.Runnable) -> newThread
android.support.v4.content.ModernAsyncTask$2 -> android.support.v4.a.i:
    android.support.v4.content.ModernAsyncTask this$0 -> a
    java.lang.Object call() -> call
android.support.v4.content.ModernAsyncTask$3 -> android.support.v4.a.j:
    android.support.v4.content.ModernAsyncTask this$0 -> a
    void done() -> done
android.support.v4.content.ModernAsyncTask$4 -> android.support.v4.a.k:
    int[] $SwitchMap$android$support$v4$content$ModernAsyncTask$Status -> a
android.support.v4.content.ModernAsyncTask$AsyncTaskResult -> android.support.v4.a.l:
    android.support.v4.content.ModernAsyncTask mTask -> a
    java.lang.Object[] mData -> b
android.support.v4.content.ModernAsyncTask$InternalHandler -> android.support.v4.a.m:
    void handleMessage(android.os.Message) -> handleMessage
android.support.v4.content.ModernAsyncTask$Status -> android.support.v4.a.n:
    android.support.v4.content.ModernAsyncTask$Status PENDING -> a
    android.support.v4.content.ModernAsyncTask$Status RUNNING -> b
    android.support.v4.content.ModernAsyncTask$Status FINISHED -> c
    android.support.v4.content.ModernAsyncTask$Status[] $VALUES -> d
    android.support.v4.content.ModernAsyncTask$Status[] values() -> values
    android.support.v4.content.ModernAsyncTask$Status valueOf(java.lang.String) -> valueOf
android.support.v4.content.ModernAsyncTask$WorkerRunnable -> android.support.v4.a.o:
    java.lang.Object[] mParams -> b
android.support.v4.os.ParcelableCompat -> android.support.v4.b.a:
    android.os.Parcelable$Creator newCreator(android.support.v4.os.ParcelableCompatCreatorCallbacks) -> a
android.support.v4.os.ParcelableCompat$CompatCreator -> android.support.v4.b.b:
    android.support.v4.os.ParcelableCompatCreatorCallbacks mCallbacks -> a
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
    java.lang.Object[] newArray(int) -> newArray
android.support.v4.os.ParcelableCompatCreatorCallbacks -> android.support.v4.b.c:
    java.lang.Object createFromParcel(android.os.Parcel,java.lang.ClassLoader) -> a
    java.lang.Object[] newArray(int) -> a
android.support.v4.os.ParcelableCompatCreatorHoneycombMR2 -> android.support.v4.b.d:
    android.support.v4.os.ParcelableCompatCreatorCallbacks mCallbacks -> a
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
    java.lang.Object createFromParcel(android.os.Parcel,java.lang.ClassLoader) -> createFromParcel
    java.lang.Object[] newArray(int) -> newArray
android.support.v4.os.ParcelableCompatCreatorHoneycombMR2Stub -> android.support.v4.b.e:
    android.os.Parcelable$Creator instantiate(android.support.v4.os.ParcelableCompatCreatorCallbacks) -> a
android.support.v4.util.DebugUtils -> android.support.v4.c.a:
    void buildShortClassTag(java.lang.Object,java.lang.StringBuilder) -> a
android.support.v4.util.LogWriter -> android.support.v4.c.b:
    java.lang.String mTag -> a
    java.lang.StringBuilder mBuilder -> b
    void close() -> close
    void flush() -> flush
    void write(char[],int,int) -> write
    void flushBuilder() -> a
android.support.v4.util.TimeUtils -> android.support.v4.c.c:
    java.lang.Object sFormatSync -> a
    char[] sFormatStr -> b
    int accumField(int,int,boolean,int) -> a
    int printField(char[],int,char,int,boolean,int) -> a
    int formatDurationLocked(long,int) -> a
    void formatDuration(long,java.io.PrintWriter,int) -> a
    void formatDuration(long,java.io.PrintWriter) -> a
    void formatDuration(long,long,java.io.PrintWriter) -> a
android.support.v4.view.KeyEventCompat -> android.support.v4.view.a:
    android.support.v4.view.KeyEventCompat$KeyEventVersionImpl IMPL -> a
    boolean hasModifiers(android.view.KeyEvent,int) -> a
    boolean hasNoModifiers(android.view.KeyEvent) -> a
android.support.v4.view.KeyEventCompat$BaseKeyEventVersionImpl -> android.support.v4.view.b:
    int metaStateFilterDirectionalModifiers(int,int,int,int,int) -> a
    int normalizeMetaState(int) -> a
    boolean metaStateHasModifiers(int,int) -> a
    boolean metaStateHasNoModifiers(int) -> b
android.support.v4.view.KeyEventCompat$HoneycombKeyEventVersionImpl -> android.support.v4.view.c:
    boolean metaStateHasModifiers(int,int) -> a
    boolean metaStateHasNoModifiers(int) -> b
android.support.v4.view.KeyEventCompat$KeyEventVersionImpl -> android.support.v4.view.d:
    boolean metaStateHasModifiers(int,int) -> a
    boolean metaStateHasNoModifiers(int) -> b
android.support.v4.view.KeyEventCompatHoneycomb -> android.support.v4.view.e:
    boolean metaStateHasModifiers(int,int) -> a
    boolean metaStateHasNoModifiers(int) -> a
android.support.v4.view.MotionEventCompat -> android.support.v4.view.f:
    android.support.v4.view.MotionEventCompat$MotionEventVersionImpl IMPL -> a
    int getActionIndex(android.view.MotionEvent) -> a
    int findPointerIndex(android.view.MotionEvent,int) -> a
    int getPointerId(android.view.MotionEvent,int) -> b
    float getX(android.view.MotionEvent,int) -> c
    float getY(android.view.MotionEvent,int) -> d
android.support.v4.view.MotionEventCompat$BaseMotionEventVersionImpl -> android.support.v4.view.g:
    int findPointerIndex(android.view.MotionEvent,int) -> a
    int getPointerId(android.view.MotionEvent,int) -> b
    float getX(android.view.MotionEvent,int) -> c
    float getY(android.view.MotionEvent,int) -> d
android.support.v4.view.MotionEventCompat$EclairMotionEventVersionImpl -> android.support.v4.view.h:
    int findPointerIndex(android.view.MotionEvent,int) -> a
    int getPointerId(android.view.MotionEvent,int) -> b
    float getX(android.view.MotionEvent,int) -> c
    float getY(android.view.MotionEvent,int) -> d
android.support.v4.view.MotionEventCompat$MotionEventVersionImpl -> android.support.v4.view.i:
    int findPointerIndex(android.view.MotionEvent,int) -> a
    int getPointerId(android.view.MotionEvent,int) -> b
    float getX(android.view.MotionEvent,int) -> c
    float getY(android.view.MotionEvent,int) -> d
android.support.v4.view.MotionEventCompatEclair -> android.support.v4.view.j:
    int findPointerIndex(android.view.MotionEvent,int) -> a
    int getPointerId(android.view.MotionEvent,int) -> b
    float getX(android.view.MotionEvent,int) -> c
    float getY(android.view.MotionEvent,int) -> d
android.support.v4.view.PagerAdapter -> android.support.v4.view.k:
    android.database.DataSetObservable mObservable -> a
    int getCount() -> b
    void startUpdate(android.view.ViewGroup) -> a
    java.lang.Object instantiateItem(android.view.ViewGroup,int) -> a
    void destroyItem(android.view.ViewGroup,int,java.lang.Object) -> a
    void setPrimaryItem(android.view.ViewGroup,int,java.lang.Object) -> b
    void finishUpdate(android.view.ViewGroup) -> b
    void startUpdate(android.view.View) -> a
    java.lang.Object instantiateItem(android.view.View,int) -> a
    void destroyItem(android.view.View,int,java.lang.Object) -> a
    void setPrimaryItem(android.view.View,int,java.lang.Object) -> b
    void finishUpdate(android.view.View) -> b
    boolean isViewFromObject(android.view.View,java.lang.Object) -> a
    android.os.Parcelable saveState() -> a
    void restoreState(android.os.Parcelable,java.lang.ClassLoader) -> a
    int getItemPosition(java.lang.Object) -> a
    void notifyDataSetChanged() -> c
    void registerDataSetObserver(android.database.DataSetObserver) -> a
    void unregisterDataSetObserver(android.database.DataSetObserver) -> b
android.support.v4.view.VelocityTrackerCompat -> android.support.v4.view.l:
    android.support.v4.view.VelocityTrackerCompat$VelocityTrackerVersionImpl IMPL -> a
    float getXVelocity(android.view.VelocityTracker,int) -> a
android.support.v4.view.VelocityTrackerCompat$BaseVelocityTrackerVersionImpl -> android.support.v4.view.m:
    float getXVelocity(android.view.VelocityTracker,int) -> a
android.support.v4.view.VelocityTrackerCompat$HoneycombVelocityTrackerVersionImpl -> android.support.v4.view.n:
    float getXVelocity(android.view.VelocityTracker,int) -> a
android.support.v4.view.VelocityTrackerCompat$VelocityTrackerVersionImpl -> android.support.v4.view.o:
    float getXVelocity(android.view.VelocityTracker,int) -> a
android.support.v4.view.VelocityTrackerCompatHoneycomb -> android.support.v4.view.p:
    float getXVelocity(android.view.VelocityTracker,int) -> a
android.support.v4.view.ViewCompat -> android.support.v4.view.q:
    android.support.v4.view.ViewCompat$ViewCompatImpl IMPL -> a
    boolean canScrollHorizontally(android.view.View,int) -> a
    int getOverScrollMode(android.view.View) -> a
android.support.v4.view.ViewCompat$BaseViewCompatImpl -> android.support.v4.view.r:
    boolean canScrollHorizontally(android.view.View,int) -> a
    int getOverScrollMode(android.view.View) -> a
android.support.v4.view.ViewCompat$GBViewCompatImpl -> android.support.v4.view.s:
    int getOverScrollMode(android.view.View) -> a
android.support.v4.view.ViewCompat$ICSViewCompatImpl -> android.support.v4.view.t:
    boolean canScrollHorizontally(android.view.View,int) -> a
android.support.v4.view.ViewCompat$ViewCompatImpl -> android.support.v4.view.u:
    boolean canScrollHorizontally(android.view.View,int) -> a
    int getOverScrollMode(android.view.View) -> a
android.support.v4.view.ViewCompatGingerbread -> android.support.v4.view.v:
    int getOverScrollMode(android.view.View) -> a
android.support.v4.view.ViewCompatICS -> android.support.v4.view.w:
    boolean canScrollHorizontally(android.view.View,int) -> a
android.support.v4.view.ViewConfigurationCompat -> android.support.v4.view.x:
    android.support.v4.view.ViewConfigurationCompat$ViewConfigurationVersionImpl IMPL -> a
    int getScaledPagingTouchSlop(android.view.ViewConfiguration) -> a
android.support.v4.view.ViewConfigurationCompat$BaseViewConfigurationVersionImpl -> android.support.v4.view.y:
    int getScaledPagingTouchSlop(android.view.ViewConfiguration) -> a
android.support.v4.view.ViewConfigurationCompat$FroyoViewConfigurationVersionImpl -> android.support.v4.view.z:
    int getScaledPagingTouchSlop(android.view.ViewConfiguration) -> a
android.support.v4.view.ViewConfigurationCompat$ViewConfigurationVersionImpl -> android.support.v4.view.aa:
    int getScaledPagingTouchSlop(android.view.ViewConfiguration) -> a
android.support.v4.view.ViewConfigurationCompatFroyo -> android.support.v4.view.ab:
    int getScaledPagingTouchSlop(android.view.ViewConfiguration) -> a
android.support.v4.view.ViewPager -> android.support.v4.view.ViewPager:
    int[] LAYOUT_ATTRS -> a
    java.util.Comparator COMPARATOR -> b
    android.view.animation.Interpolator sInterpolator -> c
    java.util.ArrayList mItems -> d
    android.support.v4.view.PagerAdapter mAdapter -> e
    int mCurItem -> f
    int mRestoredCurItem -> g
    android.os.Parcelable mRestoredAdapterState -> h
    java.lang.ClassLoader mRestoredClassLoader -> i
    android.widget.Scroller mScroller -> j
    android.support.v4.view.ViewPager$PagerObserver mObserver -> k
    int mPageMargin -> l
    android.graphics.drawable.Drawable mMarginDrawable -> m
    int mTopPageBounds -> n
    int mBottomPageBounds -> o
    int mChildWidthMeasureSpec -> p
    int mChildHeightMeasureSpec -> q
    boolean mInLayout -> r
    boolean mScrollingCacheEnabled -> s
    boolean mPopulatePending -> t
    boolean mScrolling -> u
    int mOffscreenPageLimit -> v
    boolean mIsBeingDragged -> w
    boolean mIsUnableToDrag -> x
    int mTouchSlop -> y
    float mInitialMotionX -> z
    float mLastMotionX -> A
    float mLastMotionY -> B
    int mActivePointerId -> C
    android.view.VelocityTracker mVelocityTracker -> D
    int mMinimumVelocity -> E
    int mMaximumVelocity -> F
    int mFlingDistance -> G
    boolean mFakeDragging -> H
    android.support.v4.widget.EdgeEffectCompat mLeftEdge -> I
    android.support.v4.widget.EdgeEffectCompat mRightEdge -> J
    boolean mFirstLayout -> K
    boolean mCalledSuper -> L
    int mDecorChildCount -> M
    android.support.v4.view.ViewPager$OnPageChangeListener mOnPageChangeListener -> N
    android.support.v4.view.ViewPager$OnPageChangeListener mInternalPageChangeListener -> O
    android.support.v4.view.ViewPager$OnAdapterChangeListener mAdapterChangeListener -> P
    int mScrollState -> Q
    void initViewPager() -> a
    void setScrollState(int) -> setScrollState
    void setAdapter(android.support.v4.view.PagerAdapter) -> setAdapter
    void removeNonDecorViews() -> g
    android.support.v4.view.PagerAdapter getAdapter() -> getAdapter
    void setOnAdapterChangeListener(android.support.v4.view.ViewPager$OnAdapterChangeListener) -> setOnAdapterChangeListener
    void setCurrentItem(int) -> setCurrentItem
    void setCurrentItem(int,boolean) -> a
    int getCurrentItem() -> getCurrentItem
    void setCurrentItemInternal(int,boolean,boolean) -> a
    void setCurrentItemInternal(int,boolean,boolean,int) -> a
    void setOnPageChangeListener(android.support.v4.view.ViewPager$OnPageChangeListener) -> setOnPageChangeListener
    int getOffscreenPageLimit() -> getOffscreenPageLimit
    void setOffscreenPageLimit(int) -> setOffscreenPageLimit
    void setPageMargin(int) -> setPageMargin
    int getPageMargin() -> getPageMargin
    void setPageMarginDrawable(android.graphics.drawable.Drawable) -> setPageMarginDrawable
    void setPageMarginDrawable(int) -> setPageMarginDrawable
    boolean verifyDrawable(android.graphics.drawable.Drawable) -> verifyDrawable
    void drawableStateChanged() -> drawableStateChanged
    float distanceInfluenceForSnapDuration(float) -> a
    void smoothScrollTo(int,int,int) -> a
    void addNewItem(int,int) -> a
    void dataSetChanged() -> b
    void populate() -> c
    android.os.Parcelable onSaveInstanceState() -> onSaveInstanceState
    void onRestoreInstanceState(android.os.Parcelable) -> onRestoreInstanceState
    void addView(android.view.View,int,android.view.ViewGroup$LayoutParams) -> addView
    android.support.v4.view.ViewPager$ItemInfo infoForChild(android.view.View) -> a
    android.support.v4.view.ViewPager$ItemInfo infoForAnyChild(android.view.View) -> b
    void onAttachedToWindow() -> onAttachedToWindow
    void onMeasure(int,int) -> onMeasure
    void onSizeChanged(int,int,int,int) -> onSizeChanged
    void recomputeScrollPosition(int,int,int,int) -> a
    void onLayout(boolean,int,int,int,int) -> onLayout
    void computeScroll() -> computeScroll
    void pageScrolled(int) -> b
    void onPageScrolled(int,float,int) -> a
    void completeScroll() -> h
    boolean onInterceptTouchEvent(android.view.MotionEvent) -> onInterceptTouchEvent
    boolean onTouchEvent(android.view.MotionEvent) -> onTouchEvent
    int determineTargetPage(int,float,int,int) -> a
    void draw(android.graphics.Canvas) -> draw
    void onDraw(android.graphics.Canvas) -> onDraw
    void onSecondaryPointerUp(android.view.MotionEvent) -> a
    void endDrag() -> i
    void setScrollingCacheEnabled(boolean) -> setScrollingCacheEnabled
    boolean canScroll(android.view.View,boolean,int,int,int) -> a
    boolean dispatchKeyEvent(android.view.KeyEvent) -> dispatchKeyEvent
    boolean executeKeyEvent(android.view.KeyEvent) -> a
    boolean arrowScroll(int) -> a
    boolean pageLeft() -> d
    boolean pageRight() -> e
    void addFocusables(java.util.ArrayList,int,int) -> addFocusables
    void addTouchables(java.util.ArrayList) -> addTouchables
    boolean onRequestFocusInDescendants(int,android.graphics.Rect) -> onRequestFocusInDescendants
    boolean dispatchPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent) -> dispatchPopulateAccessibilityEvent
    android.view.ViewGroup$LayoutParams generateDefaultLayoutParams() -> generateDefaultLayoutParams
    android.view.ViewGroup$LayoutParams generateLayoutParams(android.view.ViewGroup$LayoutParams) -> generateLayoutParams
    boolean checkLayoutParams(android.view.ViewGroup$LayoutParams) -> checkLayoutParams
    android.view.ViewGroup$LayoutParams generateLayoutParams(android.util.AttributeSet) -> generateLayoutParams
    int[] access$100() -> f
android.support.v4.view.ViewPager$1 -> android.support.v4.view.ac:
    int compare(android.support.v4.view.ViewPager$ItemInfo,android.support.v4.view.ViewPager$ItemInfo) -> a
    int compare(java.lang.Object,java.lang.Object) -> compare
android.support.v4.view.ViewPager$2 -> android.support.v4.view.ad:
    float getInterpolation(float) -> getInterpolation
android.support.v4.view.ViewPager$Decor -> android.support.v4.view.ae:
android.support.v4.view.ViewPager$ItemInfo -> android.support.v4.view.af:
    java.lang.Object object -> a
    int position -> b
    boolean scrolling -> c
android.support.v4.view.ViewPager$LayoutParams -> android.support.v4.view.ag:
    boolean isDecor -> a
    int gravity -> b
android.support.v4.view.ViewPager$OnAdapterChangeListener -> android.support.v4.view.ah:
    void onAdapterChanged(android.support.v4.view.PagerAdapter,android.support.v4.view.PagerAdapter) -> a
android.support.v4.view.ViewPager$OnPageChangeListener -> android.support.v4.view.ai:
    void onPageScrolled(int,float,int) -> a
    void onPageSelected(int) -> a
    void onPageScrollStateChanged(int) -> b
android.support.v4.view.ViewPager$PagerObserver -> android.support.v4.view.aj:
    android.support.v4.view.ViewPager this$0 -> a
    void onChanged() -> onChanged
    void onInvalidated() -> onInvalidated
android.support.v4.view.ViewPager$SavedState -> android.support.v4.view.ViewPager$SavedState:
    int position -> a
    android.os.Parcelable adapterState -> b
    java.lang.ClassLoader loader -> c
    android.os.Parcelable$Creator CREATOR -> CREATOR
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
    java.lang.String toString() -> toString
android.support.v4.view.ViewPager$SavedState$1 -> android.support.v4.view.ak:
    android.support.v4.view.ViewPager$SavedState createFromParcel(android.os.Parcel,java.lang.ClassLoader) -> b
    android.support.v4.view.ViewPager$SavedState[] newArray(int) -> b
    java.lang.Object[] newArray(int) -> a
    java.lang.Object createFromParcel(android.os.Parcel,java.lang.ClassLoader) -> a
android.support.v4.widget.CursorAdapter -> android.support.v4.d.a:
    boolean mDataValid -> a
    boolean mAutoRequery -> b
    android.database.Cursor mCursor -> c
    android.content.Context mContext -> d
    int mRowIDColumn -> e
    android.support.v4.widget.CursorAdapter$ChangeObserver mChangeObserver -> f
    android.database.DataSetObserver mDataSetObserver -> g
    android.support.v4.widget.CursorFilter mCursorFilter -> h
    android.widget.FilterQueryProvider mFilterQueryProvider -> i
    void init(android.content.Context,android.database.Cursor,int) -> a
    android.database.Cursor getCursor() -> a
    int getCount() -> getCount
    java.lang.Object getItem(int) -> getItem
    long getItemId(int) -> getItemId
    boolean hasStableIds() -> hasStableIds
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
    android.view.View getDropDownView(int,android.view.View,android.view.ViewGroup) -> getDropDownView
    android.view.View newView(android.content.Context,android.database.Cursor,android.view.ViewGroup) -> a
    android.view.View newDropDownView(android.content.Context,android.database.Cursor,android.view.ViewGroup) -> b
    void bindView(android.view.View,android.content.Context,android.database.Cursor) -> a
    void changeCursor(android.database.Cursor) -> a
    android.database.Cursor swapCursor(android.database.Cursor) -> b
    java.lang.CharSequence convertToString(android.database.Cursor) -> c
    android.database.Cursor runQueryOnBackgroundThread(java.lang.CharSequence) -> a
    android.widget.Filter getFilter() -> getFilter
    android.widget.FilterQueryProvider getFilterQueryProvider() -> b
    void onContentChanged() -> c
android.support.v4.widget.CursorAdapter$1 -> android.support.v4.d.b:
android.support.v4.widget.CursorAdapter$ChangeObserver -> android.support.v4.d.c:
    android.support.v4.widget.CursorAdapter this$0 -> a
    boolean deliverSelfNotifications() -> deliverSelfNotifications
    void onChange(boolean) -> onChange
android.support.v4.widget.CursorAdapter$MyDataSetObserver -> android.support.v4.d.d:
    android.support.v4.widget.CursorAdapter this$0 -> a
    void onChanged() -> onChanged
    void onInvalidated() -> onInvalidated
android.support.v4.widget.CursorFilter -> android.support.v4.d.e:
    android.support.v4.widget.CursorFilter$CursorFilterClient mClient -> a
    java.lang.CharSequence convertResultToString(java.lang.Object) -> convertResultToString
    android.widget.Filter$FilterResults performFiltering(java.lang.CharSequence) -> performFiltering
    void publishResults(java.lang.CharSequence,android.widget.Filter$FilterResults) -> publishResults
android.support.v4.widget.CursorFilter$CursorFilterClient -> android.support.v4.d.f:
    java.lang.CharSequence convertToString(android.database.Cursor) -> c
    android.database.Cursor runQueryOnBackgroundThread(java.lang.CharSequence) -> a
    android.database.Cursor getCursor() -> a
    void changeCursor(android.database.Cursor) -> a
android.support.v4.widget.EdgeEffectCompat -> android.support.v4.d.g:
    java.lang.Object mEdgeEffect -> a
    android.support.v4.widget.EdgeEffectCompat$EdgeEffectImpl IMPL -> b
    void setSize(int,int) -> a
    boolean isFinished() -> a
    void finish() -> b
    boolean onPull(float) -> a
    boolean onRelease() -> c
    boolean draw(android.graphics.Canvas) -> a
android.support.v4.widget.EdgeEffectCompat$BaseEdgeEffectImpl -> android.support.v4.d.h:
    java.lang.Object newEdgeEffect(android.content.Context) -> a
    void setSize(java.lang.Object,int,int) -> a
    boolean isFinished(java.lang.Object) -> a
    void finish(java.lang.Object) -> b
    boolean onPull(java.lang.Object,float) -> a
    boolean onRelease(java.lang.Object) -> c
    boolean draw(java.lang.Object,android.graphics.Canvas) -> a
android.support.v4.widget.EdgeEffectCompat$EdgeEffectIcsImpl -> android.support.v4.d.i:
    java.lang.Object newEdgeEffect(android.content.Context) -> a
    void setSize(java.lang.Object,int,int) -> a
    boolean isFinished(java.lang.Object) -> a
    void finish(java.lang.Object) -> b
    boolean onPull(java.lang.Object,float) -> a
    boolean onRelease(java.lang.Object) -> c
    boolean draw(java.lang.Object,android.graphics.Canvas) -> a
android.support.v4.widget.EdgeEffectCompat$EdgeEffectImpl -> android.support.v4.d.j:
    java.lang.Object newEdgeEffect(android.content.Context) -> a
    void setSize(java.lang.Object,int,int) -> a
    boolean isFinished(java.lang.Object) -> a
    void finish(java.lang.Object) -> b
    boolean onPull(java.lang.Object,float) -> a
    boolean onRelease(java.lang.Object) -> c
    boolean draw(java.lang.Object,android.graphics.Canvas) -> a
android.support.v4.widget.EdgeEffectCompatIcs -> android.support.v4.d.k:
    java.lang.Object newEdgeEffect(android.content.Context) -> a
    void setSize(java.lang.Object,int,int) -> a
    boolean isFinished(java.lang.Object) -> a
    void finish(java.lang.Object) -> b
    boolean onPull(java.lang.Object,float) -> a
    boolean onRelease(java.lang.Object) -> c
    boolean draw(java.lang.Object,android.graphics.Canvas) -> a
android.support.v4.widget.ResourceCursorAdapter -> android.support.v4.d.l:
    int mLayout -> j
    int mDropDownLayout -> k
    android.view.LayoutInflater mInflater -> l
    android.view.View newView(android.content.Context,android.database.Cursor,android.view.ViewGroup) -> a
    android.view.View newDropDownView(android.content.Context,android.database.Cursor,android.view.ViewGroup) -> b
android.support.v4.widget.SimpleCursorAdapter -> android.support.v4.d.m:
    int[] mFrom -> j
    int[] mTo -> k
    int mStringConversionColumn -> m
    android.support.v4.widget.SimpleCursorAdapter$CursorToStringConverter mCursorToStringConverter -> n
    android.support.v4.widget.SimpleCursorAdapter$ViewBinder mViewBinder -> o
    java.lang.String[] mOriginalFrom -> l
    void bindView(android.view.View,android.content.Context,android.database.Cursor) -> a
    void setViewImage(android.widget.ImageView,java.lang.String) -> a
    void setViewText(android.widget.TextView,java.lang.String) -> a
    java.lang.CharSequence convertToString(android.database.Cursor) -> c
    void findColumns(java.lang.String[]) -> a
    android.database.Cursor swapCursor(android.database.Cursor) -> b
android.support.v4.widget.SimpleCursorAdapter$CursorToStringConverter -> android.support.v4.d.n:
    java.lang.CharSequence convertToString(android.database.Cursor) -> a
android.support.v4.widget.SimpleCursorAdapter$ViewBinder -> android.support.v4.d.o:
    boolean setViewValue(android.view.View,android.database.Cursor,int) -> a
com.handmark.pulltorefresh.library.PullToRefreshAdapterViewBase -> a.a.a.a.a:
    int mSavedLastVisibleIndex -> c
    android.widget.AbsListView$OnScrollListener mOnScrollListener -> d
    com.handmark.pulltorefresh.library.PullToRefreshBase$OnLastItemVisibleListener mOnLastItemVisibleListener -> e
    android.view.View mEmptyView -> f
    android.widget.FrameLayout mRefreshableViewHolder -> g
    com.handmark.pulltorefresh.library.internal.IndicatorLayout mIndicatorIvTop -> h
    com.handmark.pulltorefresh.library.internal.IndicatorLayout mIndicatorIvBottom -> i
    boolean mShowIndicator -> j
    int[] $SWITCH_TABLE$com$handmark$pulltorefresh$library$PullToRefreshBase$Mode -> k
    android.view.ContextMenu$ContextMenuInfo getContextMenuInfo() -> getContextMenuInfo
    boolean getShowIndicator() -> getShowIndicator
    void onScroll(android.widget.AbsListView,int,int,int) -> onScroll
    void onScrollStateChanged(android.widget.AbsListView,int) -> onScrollStateChanged
    void setEmptyView(android.view.View) -> setEmptyView
    void setOnLastItemVisibleListener(com.handmark.pulltorefresh.library.PullToRefreshBase$OnLastItemVisibleListener) -> setOnLastItemVisibleListener
    void setOnScrollListener(android.widget.AbsListView$OnScrollListener) -> setOnScrollListener
    void setShowIndicator(boolean) -> setShowIndicator
    void addRefreshableView(android.content.Context,android.widget.AbsListView) -> a
    int getNumberInternalFooterViews() -> getNumberInternalFooterViews
    int getNumberInternalHeaderViews() -> getNumberInternalHeaderViews
    int getNumberInternalViews() -> getNumberInternalViews
    void handleStyledAttributes(android.content.res.TypedArray) -> a
    boolean isReadyForPullDown() -> a
    boolean isReadyForPullUp() -> b
    void onPullToRefresh() -> c
    void onReleaseToRefresh() -> d
    void resetHeader() -> e
    void setRefreshingInternal(boolean) -> setRefreshingInternal
    void updateUIForMode() -> f
    void addIndicatorViews() -> l
    boolean getShowIndicatorInternal() -> getShowIndicatorInternal
    boolean isFirstItemVisible() -> m
    boolean isLastItemVisible() -> n
    void removeIndicatorViews() -> o
    void updateIndicatorViewsVisibility() -> p
    void addRefreshableView(android.content.Context,android.view.View) -> a
    int[] $SWITCH_TABLE$com$handmark$pulltorefresh$library$PullToRefreshBase$Mode() -> g
com.handmark.pulltorefresh.library.PullToRefreshBase -> a.a.a.a.b:
    com.handmark.pulltorefresh.library.PullToRefreshBase$Mode DEFAULT_MODE -> a
    int mTouchSlop -> c
    float mLastMotionX -> d
    float mLastMotionY -> e
    float mInitialMotionY -> f
    boolean mIsBeingDragged -> g
    int mState -> h
    com.handmark.pulltorefresh.library.PullToRefreshBase$Mode mMode -> i
    com.handmark.pulltorefresh.library.PullToRefreshBase$Mode mCurrentMode -> j
    android.view.View mRefreshableView -> b
    boolean mPullToRefreshEnabled -> k
    boolean mShowViewWhileRefreshing -> l
    boolean mDisableScrollingWhileRefreshing -> m
    boolean mFilterTouchEvents -> n
    com.handmark.pulltorefresh.library.internal.LoadingLayout mHeaderLayout -> o
    com.handmark.pulltorefresh.library.internal.LoadingLayout mFooterLayout -> p
    int mHeaderHeight -> q
    android.os.Handler mHandler -> r
    com.handmark.pulltorefresh.library.PullToRefreshBase$OnRefreshListener mOnRefreshListener -> s
    com.handmark.pulltorefresh.library.PullToRefreshBase$OnRefreshListener2 mOnRefreshListener2 -> t
    com.handmark.pulltorefresh.library.PullToRefreshBase$SmoothScrollRunnable mCurrentSmoothScrollRunnable -> u
    int[] $SWITCH_TABLE$com$handmark$pulltorefresh$library$PullToRefreshBase$Mode -> v
    com.handmark.pulltorefresh.library.PullToRefreshBase$Mode getCurrentMode() -> getCurrentMode
    boolean getFilterTouchEvents() -> getFilterTouchEvents
    com.handmark.pulltorefresh.library.PullToRefreshBase$Mode getMode() -> getMode
    android.view.View getRefreshableView() -> getRefreshableView
    boolean getShowViewWhileRefreshing() -> getShowViewWhileRefreshing
    boolean isPullToRefreshEnabled() -> h
    boolean isRefreshing() -> i
    boolean onInterceptTouchEvent(android.view.MotionEvent) -> onInterceptTouchEvent
    void onRefreshComplete() -> j
    boolean onTouchEvent(android.view.MotionEvent) -> onTouchEvent
    void setDisableScrollingWhileRefreshing(boolean) -> setDisableScrollingWhileRefreshing
    void setFilterTouchEvents(boolean) -> setFilterTouchEvents
    void setLastUpdatedLabel(java.lang.CharSequence) -> setLastUpdatedLabel
    void setLoadingDrawable(android.graphics.drawable.Drawable) -> setLoadingDrawable
    void setLoadingDrawable(android.graphics.drawable.Drawable,com.handmark.pulltorefresh.library.PullToRefreshBase$Mode) -> a
    void setLongClickable(boolean) -> setLongClickable
    void setMode(com.handmark.pulltorefresh.library.PullToRefreshBase$Mode) -> setMode
    void setOnRefreshListener(com.handmark.pulltorefresh.library.PullToRefreshBase$OnRefreshListener) -> setOnRefreshListener
    void setOnRefreshListener(com.handmark.pulltorefresh.library.PullToRefreshBase$OnRefreshListener2) -> setOnRefreshListener
    void setPullLabel(java.lang.String) -> setPullLabel
    void setPullLabel(java.lang.String,com.handmark.pulltorefresh.library.PullToRefreshBase$Mode) -> a
    void setPullToRefreshEnabled(boolean) -> setPullToRefreshEnabled
    void setRefreshing(boolean) -> setRefreshing
    void setRefreshingLabel(java.lang.String) -> setRefreshingLabel
    void setRefreshingLabel(java.lang.String,com.handmark.pulltorefresh.library.PullToRefreshBase$Mode) -> b
    void setReleaseLabel(java.lang.String) -> setReleaseLabel
    void setReleaseLabel(java.lang.String,com.handmark.pulltorefresh.library.PullToRefreshBase$Mode) -> c
    void setShowViewWhileRefreshing(boolean) -> setShowViewWhileRefreshing
    void addRefreshableView(android.content.Context,android.view.View) -> a
    android.view.View createRefreshableView(android.content.Context,android.util.AttributeSet) -> a
    com.handmark.pulltorefresh.library.internal.LoadingLayout getFooterLayout() -> getFooterLayout
    int getHeaderHeight() -> getHeaderHeight
    com.handmark.pulltorefresh.library.internal.LoadingLayout getHeaderLayout() -> getHeaderLayout
    int getState() -> getState
    void handleStyledAttributes(android.content.res.TypedArray) -> a
    boolean isReadyForPullDown() -> a
    boolean isReadyForPullUp() -> b
    void onPullToRefresh() -> c
    void onReleaseToRefresh() -> d
    void onRestoreInstanceState(android.os.Parcelable) -> onRestoreInstanceState
    android.os.Parcelable onSaveInstanceState() -> onSaveInstanceState
    void resetHeader() -> e
    void setHeaderScroll(int) -> setHeaderScroll
    void setRefreshingInternal(boolean) -> setRefreshingInternal
    void smoothScrollTo(int) -> a
    void updateUIForMode() -> f
    void init(android.content.Context,android.util.AttributeSet) -> b
    boolean isReadyForPull() -> g
    void measureView(android.view.View) -> a
    boolean pullEvent() -> l
    void refreshLoadingViewsHeight() -> m
    int[] $SWITCH_TABLE$com$handmark$pulltorefresh$library$PullToRefreshBase$Mode() -> k
com.handmark.pulltorefresh.library.PullToRefreshBase$Mode -> a.a.a.a.c:
    com.handmark.pulltorefresh.library.PullToRefreshBase$Mode PULL_DOWN_TO_REFRESH -> a
    com.handmark.pulltorefresh.library.PullToRefreshBase$Mode PULL_UP_TO_REFRESH -> b
    com.handmark.pulltorefresh.library.PullToRefreshBase$Mode BOTH -> c
    int mIntValue -> d
    com.handmark.pulltorefresh.library.PullToRefreshBase$Mode[] ENUM$VALUES -> e
    com.handmark.pulltorefresh.library.PullToRefreshBase$Mode mapIntToMode(int) -> a
    boolean canPullDown() -> a
    boolean canPullUp() -> b
    int getIntValue() -> c
    com.handmark.pulltorefresh.library.PullToRefreshBase$Mode[] values() -> values
    com.handmark.pulltorefresh.library.PullToRefreshBase$Mode valueOf(java.lang.String) -> valueOf
com.handmark.pulltorefresh.library.PullToRefreshBase$OnLastItemVisibleListener -> a.a.a.a.d:
    void onLastItemVisible() -> a
com.handmark.pulltorefresh.library.PullToRefreshBase$OnRefreshListener -> a.a.a.a.e:
    void onRefresh() -> b_
com.handmark.pulltorefresh.library.PullToRefreshBase$OnRefreshListener2 -> a.a.a.a.f:
    void onPullDownToRefresh() -> a
    void onPullUpToRefresh() -> b
com.handmark.pulltorefresh.library.PullToRefreshBase$SmoothScrollRunnable -> a.a.a.a.g:
    android.view.animation.Interpolator mInterpolator -> b
    int mScrollToY -> c
    int mScrollFromY -> d
    android.os.Handler mHandler -> e
    boolean mContinueRunning -> f
    long mStartTime -> g
    int mCurrentY -> h
    com.handmark.pulltorefresh.library.PullToRefreshBase this$0 -> a
    void run() -> run
    void stop() -> a
com.handmark.pulltorefresh.library.PullToRefreshListView -> a.a.a.a.h:
    com.handmark.pulltorefresh.library.internal.LoadingLayout mHeaderLoadingView -> c
    com.handmark.pulltorefresh.library.internal.LoadingLayout mFooterLoadingView -> d
    android.widget.FrameLayout mLvFooterLoadingFrame -> e
    int[] $SWITCH_TABLE$com$handmark$pulltorefresh$library$PullToRefreshBase$Mode -> f
    android.view.ContextMenu$ContextMenuInfo getContextMenuInfo() -> getContextMenuInfo
    void setPullLabel(java.lang.String,com.handmark.pulltorefresh.library.PullToRefreshBase$Mode) -> a
    void setRefreshingLabel(java.lang.String,com.handmark.pulltorefresh.library.PullToRefreshBase$Mode) -> b
    void setReleaseLabel(java.lang.String,com.handmark.pulltorefresh.library.PullToRefreshBase$Mode) -> c
    android.widget.ListView createRefreshableView(android.content.Context,android.util.AttributeSet) -> b
    int getNumberInternalFooterViews() -> getNumberInternalFooterViews
    int getNumberInternalHeaderViews() -> getNumberInternalHeaderViews
    void resetHeader() -> e
    void setRefreshingInternal(boolean) -> setRefreshingInternal
    android.view.View createRefreshableView(android.content.Context,android.util.AttributeSet) -> a
    android.widget.FrameLayout access$1(com.handmark.pulltorefresh.library.PullToRefreshListView) -> a
    int[] $SWITCH_TABLE$com$handmark$pulltorefresh$library$PullToRefreshBase$Mode() -> l
com.handmark.pulltorefresh.library.PullToRefreshListView$InternalListView -> a.a.a.a.i:
    boolean mAddedLvFooter -> b
    com.handmark.pulltorefresh.library.PullToRefreshListView this$0 -> a
    void draw(android.graphics.Canvas) -> draw
    android.view.ContextMenu$ContextMenuInfo getContextMenuInfo() -> getContextMenuInfo
    void setAdapter(android.widget.ListAdapter) -> setAdapter
    void setEmptyView(android.view.View) -> setEmptyView
    void setEmptyViewInternal(android.view.View) -> a
com.handmark.pulltorefresh.library.R -> a.a.a.a.j:
com.handmark.pulltorefresh.library.R$anim -> a.a.a.a.k:
    int grow_from_bottom -> grow_from_bottom
    int grow_from_bottomleft_to_topright -> grow_from_bottomleft_to_topright
    int grow_from_bottomright_to_topleft -> grow_from_bottomright_to_topleft
    int grow_from_top -> grow_from_top
    int grow_from_topleft_to_bottomright -> grow_from_topleft_to_bottomright
    int grow_from_topright_to_bottomleft -> grow_from_topright_to_bottomleft
    int shrink_from_bottom -> shrink_from_bottom
    int shrink_from_bottomleft_to_topright -> shrink_from_bottomleft_to_topright
    int shrink_from_bottomright_to_topleft -> shrink_from_bottomright_to_topleft
    int shrink_from_top -> shrink_from_top
    int shrink_from_topleft_to_bottomright -> shrink_from_topleft_to_bottomright
    int shrink_from_topright_to_bottomleft -> shrink_from_topright_to_bottomleft
    int slide_in_from_bottom -> slide_in_from_bottom
    int slide_in_from_top -> slide_in_from_top
    int slide_out_to_bottom -> slide_out_to_bottom
    int slide_out_to_top -> slide_out_to_top
com.handmark.pulltorefresh.library.R$dimen -> a.a.a.a.l:
    int actionbar_button_width -> actionbar_button_width
    int actionbar_height -> actionbar_height
    int image_preview_height -> image_preview_height
    int image_preview_width -> image_preview_width
    int indicator_corner_radius -> indicator_corner_radius
    int indicator_internal_padding -> indicator_internal_padding
    int indicator_right_padding -> indicator_right_padding
    int popup_window_width -> popup_window_width
    int profile_image_size -> profile_image_size
    int set_color_height -> set_color_height
com.handmark.pulltorefresh.library.R$drawable -> a.a.a.a.m:
    int actionbar_back_dark -> actionbar_back_dark
    int actionbar_back_light -> actionbar_back_light
    int actionbar_bg_bottom_dark_holo -> actionbar_bg_bottom_dark_holo
    int actionbar_bg_bottom_light_darkactionbar_holo -> actionbar_bg_bottom_light_darkactionbar_holo
    int actionbar_bg_bottom_light_holo -> actionbar_bg_bottom_light_holo
    int actionbar_bg_dark_holo -> actionbar_bg_dark_holo
    int actionbar_bg_light_darkactionbar_holo -> actionbar_bg_light_darkactionbar_holo
    int actionbar_bg_light_holo -> actionbar_bg_light_holo
    int actionbar_item_background_holo_dark -> actionbar_item_background_holo_dark
    int actionbar_item_background_holo_light -> actionbar_item_background_holo_light
    int actionbar_shadow -> actionbar_shadow
    int arrow_down -> arrow_down
    int arrow_up -> arrow_up
    int background_holo_dark -> background_holo_dark
    int background_holo_light -> background_holo_light
    int bg_actionbar_light_theme -> bg_actionbar_light_theme
    int broken_image -> broken_image
    int btn_check_off_disabled_focused_holo_dark -> btn_check_off_disabled_focused_holo_dark
    int btn_check_off_disabled_focused_holo_light -> btn_check_off_disabled_focused_holo_light
    int btn_check_off_disabled_holo_dark -> btn_check_off_disabled_holo_dark
    int btn_check_off_disabled_holo_light -> btn_check_off_disabled_holo_light
    int btn_check_off_focused_holo_dark -> btn_check_off_focused_holo_dark
    int btn_check_off_focused_holo_light -> btn_check_off_focused_holo_light
    int btn_check_off_holo_dark -> btn_check_off_holo_dark
    int btn_check_off_holo_light -> btn_check_off_holo_light
    int btn_check_off_pressed_holo_dark -> btn_check_off_pressed_holo_dark
    int btn_check_off_pressed_holo_light -> btn_check_off_pressed_holo_light
    int btn_check_on_disabled_focused_holo_dark -> btn_check_on_disabled_focused_holo_dark
    int btn_check_on_disabled_focused_holo_light -> btn_check_on_disabled_focused_holo_light
    int btn_check_on_disabled_holo_dark -> btn_check_on_disabled_holo_dark
    int btn_check_on_disabled_holo_light -> btn_check_on_disabled_holo_light
    int btn_check_on_focused_holo_dark -> btn_check_on_focused_holo_dark
    int btn_check_on_focused_holo_light -> btn_check_on_focused_holo_light
    int btn_check_on_holo_dark -> btn_check_on_holo_dark
    int btn_check_on_holo_light -> btn_check_on_holo_light
    int btn_check_on_pressed_holo_dark -> btn_check_on_pressed_holo_dark
    int btn_check_on_pressed_holo_light -> btn_check_on_pressed_holo_light
    int btn_checkbox_holo_dark -> btn_checkbox_holo_dark
    int btn_checkbox_holo_light -> btn_checkbox_holo_light
    int btn_default_disabled_focused_holo -> btn_default_disabled_focused_holo
    int btn_default_disabled_holo -> btn_default_disabled_holo
    int btn_default_focused_holo -> btn_default_focused_holo
    int btn_default_holo -> btn_default_holo
    int btn_default_normal_holo -> btn_default_normal_holo
    int btn_default_pressed_holo -> btn_default_pressed_holo
    int btn_default_selected -> btn_default_selected
    int btn_radio_holo_dark -> btn_radio_holo_dark
    int btn_radio_holo_light -> btn_radio_holo_light
    int btn_radio_off_disabled_focused_holo_dark -> btn_radio_off_disabled_focused_holo_dark
    int btn_radio_off_disabled_focused_holo_light -> btn_radio_off_disabled_focused_holo_light
    int btn_radio_off_disabled_holo_dark -> btn_radio_off_disabled_holo_dark
    int btn_radio_off_disabled_holo_light -> btn_radio_off_disabled_holo_light
    int btn_radio_off_focused_holo_dark -> btn_radio_off_focused_holo_dark
    int btn_radio_off_focused_holo_light -> btn_radio_off_focused_holo_light
    int btn_radio_off_holo_dark -> btn_radio_off_holo_dark
    int btn_radio_off_holo_light -> btn_radio_off_holo_light
    int btn_radio_off_pressed_holo_dark -> btn_radio_off_pressed_holo_dark
    int btn_radio_off_pressed_holo_light -> btn_radio_off_pressed_holo_light
    int btn_radio_on_disabled_focused_holo_dark -> btn_radio_on_disabled_focused_holo_dark
    int btn_radio_on_disabled_focused_holo_light -> btn_radio_on_disabled_focused_holo_light
    int btn_radio_on_disabled_holo_dark -> btn_radio_on_disabled_holo_dark
    int btn_radio_on_disabled_holo_light -> btn_radio_on_disabled_holo_light
    int btn_radio_on_focused_holo_dark -> btn_radio_on_focused_holo_dark
    int btn_radio_on_focused_holo_light -> btn_radio_on_focused_holo_light
    int btn_radio_on_holo_dark -> btn_radio_on_holo_dark
    int btn_radio_on_holo_light -> btn_radio_on_holo_light
    int btn_radio_on_pressed_holo_dark -> btn_radio_on_pressed_holo_dark
    int btn_radio_on_pressed_holo_light -> btn_radio_on_pressed_holo_light
    int btn_viewer_bottomleft -> btn_viewer_bottomleft
    int btn_viewer_bottomright -> btn_viewer_bottomright
    int btn_viewer_focused_bottomleft -> btn_viewer_focused_bottomleft
    int btn_viewer_focused_bottomright -> btn_viewer_focused_bottomright
    int btn_viewer_focused_topleft -> btn_viewer_focused_topleft
    int btn_viewer_focused_topright -> btn_viewer_focused_topright
    int btn_viewer_normal_bottomleft -> btn_viewer_normal_bottomleft
    int btn_viewer_normal_bottomright -> btn_viewer_normal_bottomright
    int btn_viewer_normal_topleft -> btn_viewer_normal_topleft
    int btn_viewer_normal_topright -> btn_viewer_normal_topright
    int btn_viewer_pressed_bottomleft -> btn_viewer_pressed_bottomleft
    int btn_viewer_pressed_bottomright -> btn_viewer_pressed_bottomright
    int btn_viewer_pressed_topleft -> btn_viewer_pressed_topleft
    int btn_viewer_pressed_topright -> btn_viewer_pressed_topright
    int btn_viewer_topleft -> btn_viewer_topleft
    int btn_viewer_topright -> btn_viewer_topright
    int default_ptr_drawable -> default_ptr_drawable
    int dialog_bottom_holo_dark -> dialog_bottom_holo_dark
    int dialog_bottom_holo_light -> dialog_bottom_holo_light
    int dialog_full_holo_dark -> dialog_full_holo_dark
    int dialog_full_holo_light -> dialog_full_holo_light
    int dialog_middle_holo_dark -> dialog_middle_holo_dark
    int dialog_middle_holo_light -> dialog_middle_holo_light
    int dialog_top_holo_dark -> dialog_top_holo_dark
    int dialog_top_holo_light -> dialog_top_holo_light
    int edit_text_holo_dark -> edit_text_holo_dark
    int edit_text_holo_light -> edit_text_holo_light
    int expander_close_holo -> expander_close_holo
    int expander_open_holo -> expander_open_holo
    int gallery_item_background -> gallery_item_background
    int gallery_selected_default -> gallery_selected_default
    int gallery_selected_focused -> gallery_selected_focused
    int gallery_selected_pressed -> gallery_selected_pressed
    int gallery_unselected_default -> gallery_unselected_default
    int gallery_unselected_pressed -> gallery_unselected_pressed
    int ic_folder -> ic_folder
    int ic_indicator_has_location -> ic_indicator_has_location
    int ic_indicator_has_media -> ic_indicator_has_media
    int ic_indicator_incoming -> ic_indicator_incoming
    int ic_indicator_is_protected -> ic_indicator_is_protected
    int ic_indicator_outgoing -> ic_indicator_outgoing
    int ic_indicator_reply -> ic_indicator_reply
    int ic_indicator_retweet -> ic_indicator_retweet
    int ic_indicator_starred -> ic_indicator_starred
    int ic_label_color -> ic_label_color
    int ic_launcher -> ic_launcher
    int ic_list_gap -> ic_list_gap
    int ic_map_marker -> ic_map_marker
    int ic_menu_accounts -> ic_menu_accounts
    int ic_menu_accounts_stock -> ic_menu_accounts_stock
    int ic_menu_block -> ic_menu_block
    int ic_menu_browser -> ic_menu_browser
    int ic_menu_camera -> ic_menu_camera
    int ic_menu_close_clear_cancel -> ic_menu_close_clear_cancel
    int ic_menu_color_palette -> ic_menu_color_palette
    int ic_menu_delete -> ic_menu_delete
    int ic_menu_edit -> ic_menu_edit
    int ic_menu_gallery -> ic_menu_gallery
    int ic_menu_mapmode -> ic_menu_mapmode
    int ic_menu_mark -> ic_menu_mark
    int ic_menu_more -> ic_menu_more
    int ic_menu_mute -> ic_menu_mute
    int ic_menu_mylocation -> ic_menu_mylocation
    int ic_menu_preferences -> ic_menu_preferences
    int ic_menu_profile -> ic_menu_profile
    int ic_menu_quote -> ic_menu_quote
    int ic_menu_refresh -> ic_menu_refresh
    int ic_menu_reply -> ic_menu_reply
    int ic_menu_report_user -> ic_menu_report_user
    int ic_menu_retweet -> ic_menu_retweet
    int ic_menu_save -> ic_menu_save
    int ic_menu_send -> ic_menu_send
    int ic_menu_server -> ic_menu_server
    int ic_menu_share -> ic_menu_share
    int ic_menu_star -> ic_menu_star
    int ic_menu_stop -> ic_menu_stop
    int ic_menu_tweet -> ic_menu_tweet
    int ic_profile_image_default -> ic_profile_image_default
    int ic_tab_connect -> ic_tab_connect
    int ic_tab_discover -> ic_tab_discover
    int ic_tab_home -> ic_tab_home
    int ic_tab_me -> ic_tab_me
    int ic_tile_list_gap -> ic_tile_list_gap
    int image_preview_fallback -> image_preview_fallback
    int image_viewer_background -> image_viewer_background
    int indicator_bg_bottom -> indicator_bg_bottom
    int indicator_bg_top -> indicator_bg_top
    int item_background_holo_dark -> item_background_holo_dark
    int item_background_holo_light -> item_background_holo_light
    int list_divider_holo_dark -> list_divider_holo_dark
    int list_divider_holo_light -> list_divider_holo_light
    int list_focused_holo -> list_focused_holo
    int list_longpressed_holo -> list_longpressed_holo
    int list_pressed_holo -> list_pressed_holo
    int list_selector_background_transition_holo -> list_selector_background_transition_holo
    int list_selector_disabled_holo_dark -> list_selector_disabled_holo_dark
    int list_selector_disabled_holo_light -> list_selector_disabled_holo_light
    int list_selector_holo_dark -> list_selector_holo_dark
    int list_selector_holo_light -> list_selector_holo_light
    int menu_dropdown_panel_holo_dark -> menu_dropdown_panel_holo_dark
    int menu_dropdown_panel_holo_light -> menu_dropdown_panel_holo_light
    int popup_holo_dark -> popup_holo_dark
    int popup_holo_light -> popup_holo_light
    int progress_large_holo -> progress_large_holo
    int progress_medium_holo -> progress_medium_holo
    int progress_small_holo -> progress_small_holo
    int refresh_image -> refresh_image
    int spinner_16_inner_holo -> spinner_16_inner_holo
    int spinner_16_outer_holo -> spinner_16_outer_holo
    int spinner_48_inner_holo -> spinner_48_inner_holo
    int spinner_48_outer_holo -> spinner_48_outer_holo
    int spinner_76_inner_holo -> spinner_76_inner_holo
    int spinner_76_outer_holo -> spinner_76_outer_holo
    int spinner_background_holo_dark -> spinner_background_holo_dark
    int spinner_background_holo_light -> spinner_background_holo_light
    int spinner_default_holo_dark -> spinner_default_holo_dark
    int spinner_default_holo_light -> spinner_default_holo_light
    int spinner_disabled_holo_dark -> spinner_disabled_holo_dark
    int spinner_disabled_holo_light -> spinner_disabled_holo_light
    int spinner_focused_holo_dark -> spinner_focused_holo_dark
    int spinner_focused_holo_light -> spinner_focused_holo_light
    int spinner_pressed_holo_dark -> spinner_pressed_holo_dark
    int spinner_pressed_holo_light -> spinner_pressed_holo_light
    int switch_bg_disabled_holo_dark -> switch_bg_disabled_holo_dark
    int switch_bg_disabled_holo_light -> switch_bg_disabled_holo_light
    int switch_bg_focused_holo_dark -> switch_bg_focused_holo_dark
    int switch_bg_focused_holo_light -> switch_bg_focused_holo_light
    int switch_bg_holo_dark -> switch_bg_holo_dark
    int switch_bg_holo_light -> switch_bg_holo_light
    int switch_inner_holo_dark -> switch_inner_holo_dark
    int switch_inner_holo_light -> switch_inner_holo_light
    int switch_thumb_activated_holo_dark -> switch_thumb_activated_holo_dark
    int switch_thumb_activated_holo_light -> switch_thumb_activated_holo_light
    int switch_thumb_disabled_holo_dark -> switch_thumb_disabled_holo_dark
    int switch_thumb_disabled_holo_light -> switch_thumb_disabled_holo_light
    int switch_thumb_holo_dark -> switch_thumb_holo_dark
    int switch_thumb_holo_light -> switch_thumb_holo_light
    int switch_thumb_pressed_holo_dark -> switch_thumb_pressed_holo_dark
    int switch_thumb_pressed_holo_light -> switch_thumb_pressed_holo_light
    int switch_track_holo_dark -> switch_track_holo_dark
    int switch_track_holo_light -> switch_track_holo_light
    int tab_background_dark -> tab_background_dark
    int textfield_activated_holo -> textfield_activated_holo
    int textfield_default_holo_dark -> textfield_default_holo_dark
    int textfield_default_holo_light -> textfield_default_holo_light
    int textfield_disabled_focused_holo_dark -> textfield_disabled_focused_holo_dark
    int textfield_disabled_focused_holo_light -> textfield_disabled_focused_holo_light
    int textfield_disabled_holo_dark -> textfield_disabled_holo_dark
    int textfield_disabled_holo_light -> textfield_disabled_holo_light
    int textfield_focused_holo -> textfield_focused_holo
    int vpi__tab_indicator -> vpi__tab_indicator
    int vpi__tab_selected_focused_holo -> vpi__tab_selected_focused_holo
    int vpi__tab_selected_holo -> vpi__tab_selected_holo
    int vpi__tab_selected_pressed_holo -> vpi__tab_selected_pressed_holo
    int vpi__tab_unselected_focused_holo -> vpi__tab_unselected_focused_holo
    int vpi__tab_unselected_holo -> vpi__tab_unselected_holo
    int vpi__tab_unselected_pressed_holo -> vpi__tab_unselected_pressed_holo
com.handmark.pulltorefresh.library.R$id -> a.a.a.a.n:
    int accounts -> accounts
    int actionbar -> actionbar
    int actionbar_custom_view_container -> actionbar_custom_view_container
    int actionbar_home -> actionbar_home
    int actionbar_home_as_up_indicator -> actionbar_home_as_up_indicator
    int actionbar_icon -> actionbar_icon
    int actionbar_menu_buttons -> actionbar_menu_buttons
    int actionbar_progress_indeterminate -> actionbar_progress_indeterminate
    int actionbar_subtitle -> actionbar_subtitle
    int actionbar_title -> actionbar_title
    int actionbar_title_view -> actionbar_title_view
    int add -> add
    int add_account -> add_account
    int add_image -> add_image
    int add_location -> add_location
    int advanced_api_config -> advanced_api_config
    int advanced_api_config_label -> advanced_api_config_label
    int auth_type -> auth_type
    int auth_type_scroll -> auth_type_scroll
    int basic -> basic
    int block -> block
    int both -> both
    int button_compose -> button_compose
    int cancel -> cancel
    int center -> center
    int close -> close
    int color -> color
    int colors_grid -> colors_grid
    int compose -> compose
    int created_at -> created_at
    int created_at_container -> created_at_container
    int delete -> delete
    int delete_all -> delete_all
    int delete_all_submenu -> delete_all_submenu
    int delete_submenu -> delete_submenu
    int description -> description
    int description_container -> description_container
    int discover_content -> discover_content
    int divider -> divider
    int drafts -> drafts
    int edit -> edit
    int edit_api -> edit_api
    int edit_file_name -> edit_file_name
    int edit_text -> edit_text
    int fav -> fav
    int follow -> follow
    int follow_container -> follow_container
    int follow_indicator -> follow_indicator
    int follow_progress -> follow_progress
    int followers_container -> followers_container
    int followers_count -> followers_count
    int friends_container -> friends_container
    int friends_count -> friends_count
    int gridview -> gridview
    int image -> image
    int image_thumbnail_preview -> image_thumbnail_preview
    int image_viewer -> image_viewer
    int images_preview -> images_preview
    int in_reply_to -> in_reply_to
    int label_auth_type -> label_auth_type
    int label_rest_base_url -> label_rest_base_url
    int left_pane -> left_pane
    int list_gap_text -> list_gap_text
    int list_progress -> list_progress
    int load_images -> load_images
    int location -> location
    int location_container -> location_container
    int location_view -> location_view
    int main -> main
    int map_frame -> map_frame
    int menu_bar -> menu_bar
    int more -> more
    int more_options -> more_options
    int more_options_container -> more_options_container
    int more_options_progress -> more_options_progress
    int mute -> mute
    int name -> name
    int name_container -> name_container
    int navigate -> navigate
    int oauth -> oauth
    int oauth_base_url -> oauth_base_url
    int open_in_browser -> open_in_browser
    int pager -> pager
    int password -> password
    int pick_from_gallery -> pick_from_gallery
    int pick_from_map -> pick_from_map
    int preview_gallery -> preview_gallery
    int profile -> profile
    int profile_divider_vertical -> profile_divider_vertical
    int profile_image -> profile_image
    int profile_image_container -> profile_image_container
    int profile_name_container -> profile_name_container
    int progress -> progress
    int pullDownFromTop -> pullDownFromTop
    int pullUpFromBottom -> pullUpFromBottom
    int pull_to_refresh_image -> pull_to_refresh_image
    int pull_to_refresh_sub_text -> pull_to_refresh_sub_text
    int pull_to_refresh_text -> pull_to_refresh_text
    int quote -> quote
    int refresh -> refresh
    int refresh_stop_save -> refresh_stop_save
    int reply -> reply
    int reply_retweet_status -> reply_retweet_status
    int report_spam -> report_spam
    int report_spam_submenu -> report_spam_submenu
    int rest_base_url -> rest_base_url
    int retry -> retry
    int retweet -> retweet
    int retweet_submenu -> retweet_submenu
    int right_pane -> right_pane
    int save -> save
    int screen_name -> screen_name
    int search -> search
    int search_base_url -> search_base_url
    int search_tweets -> search_tweets
    int search_users -> search_users
    int select_account -> select_account
    int send -> send
    int send_all -> send_all
    int send_all_submenu -> send_all_submenu
    int set_as_default -> set_as_default
    int set_color -> set_color
    int settings -> settings
    int share -> share
    int sign_in -> sign_in
    int sign_in_sign_up -> sign_in_sign_up
    int sign_up -> sign_up
    int signing_oauth_base_url -> signing_oauth_base_url
    int signing_rest_base_url -> signing_rest_base_url
    int stub_advanced_api_config -> stub_advanced_api_config
    int take_photo -> take_photo
    int text -> text
    int text_count -> text_count
    int time -> time
    int time_source -> time_source
    int toggle -> toggle
    int trends_header -> trends_header
    int trends_list -> trends_list
    int trends_list_container -> trends_list_container
    int trends_progress -> trends_progress
    int trends_refresh -> trends_refresh
    int trends_spinner -> trends_spinner
    int tweet_count -> tweet_count
    int tweets_container -> tweets_container
    int twip_o -> twip_o
    int upload_base_url -> upload_base_url
    int url -> url
    int url_container -> url_container
    int username -> username
    int username_password -> username_password
    int view -> view
    int webview -> webview
    int xauth -> xauth
com.handmark.pulltorefresh.library.R$layout -> a.a.a.a.o:
    int account_list_item -> account_list_item
    int accounts -> accounts
    int actionbar -> actionbar
    int actionbar_filters -> actionbar_filters
    int actionbar_spinner_navigation -> actionbar_spinner_navigation
    int color_grid_item -> color_grid_item
    int compose -> compose
    int direct_message_list_item -> direct_message_list_item
    int direct_messages -> direct_messages
    int discover -> discover
    int draft_list_item -> draft_list_item
    int drafts_list -> drafts_list
    int edit_api -> edit_api
    int edit_api_advanced_fields -> edit_api_advanced_fields
    int file_save_as -> file_save_as
    int home_tabs -> home_tabs
    int image_viewer -> image_viewer
    int images_preview -> images_preview
    int images_preview_item -> images_preview_item
    int main -> main
    int map_viewer -> map_viewer
    int menu_button_item -> menu_button_item
    int menu_list_item -> menu_list_item
    int popup_list -> popup_list
    int pull_to_refresh_header -> pull_to_refresh_header
    int select_account -> select_account
    int set_color -> set_color
    int simple_dropdown_hint -> simple_dropdown_hint
    int spinner_dropdown_item -> spinner_dropdown_item
    int spinner_item -> spinner_item
    int status_list_item -> status_list_item
    int twitter_login -> twitter_login
    int two_line_list_item -> two_line_list_item
    int user_action_list_item -> user_action_list_item
    int user_autocomplete_list_item -> user_autocomplete_list_item
    int user_list_item -> user_list_item
    int user_profile -> user_profile
    int user_profile_header -> user_profile_header
    int view_status -> view_status
    int vpi__tab -> vpi__tab
    int webview -> webview
com.handmark.pulltorefresh.library.R$string -> a.a.a.a.p:
    int about -> about
    int about_summary -> about_summary
    int add_account -> add_account
    int add_image -> add_image
    int add_location -> add_location
    int add_rule -> add_rule
    int advanced -> advanced
    int api -> api
    int app_name -> app_name
    int app_version -> app_version
    int auth_type -> auth_type
    int basic -> basic
    int block -> block
    int blocked_users -> blocked_users
    int bottom_compose_button -> bottom_compose_button
    int bottom_compose_button_summary -> bottom_compose_button_summary
    int browser -> browser
    int cancel_retweet -> cancel_retweet
    int cancel_retweet_success -> cancel_retweet_success
    int cannot_get_location -> cannot_get_location
    int capital_off -> capital_off
    int capital_on -> capital_on
    int clear_cache -> clear_cache
    int clear_cache_summary -> clear_cache_summary
    int clear_databases -> clear_databases
    int clear_databases_summary -> clear_databases_summary
    int compose -> compose
    int consumer_key -> consumer_key
    int consumer_key_summary -> consumer_key_summary
    int consumer_secret -> consumer_secret
    int consumer_secret_summary -> consumer_secret_summary
    int content -> content
    int created_at -> created_at
    int customize -> customize
    int daily_trends -> daily_trends
    int dark_theme -> dark_theme
    int dark_theme_summary -> dark_theme_summary
    int database_item_limit -> database_item_limit
    int database_item_limit_summary -> database_item_limit_summary
    int default_account -> default_account
    int delete -> delete
    int delete_all -> delete_all
    int delete_success -> delete_success
    int description -> description
    int description_permission_read_databases -> description_permission_read_databases
    int description_permission_write_databases -> description_permission_write_databases
    int direct_messages -> direct_messages
    int discover -> discover
    int display_name -> display_name
    int display_name_summaryoff -> display_name_summaryoff
    int display_name_summaryon -> display_name_summaryon
    int display_profile_image -> display_profile_image
    int display_profile_image_summary -> display_profile_image_summary
    int drafts -> drafts
    int edit -> edit
    int edit_api -> edit_api
    int error_already_logged_in -> error_already_logged_in
    int error_message -> error_message
    int error_occurred -> error_occurred
    int error_unknown_error -> error_unknown_error
    int fav -> fav
    int favorite_success -> favorite_success
    int favorites -> favorites
    int file_saved_to -> file_saved_to
    int filename_hint -> filename_hint
    int filter -> filter
    int filter_summary -> filter_summary
    int follow -> follow
    int follow_success -> follow_success
    int followers -> followers
    int following -> following
    int gzip_compressing -> gzip_compressing
    int gzip_compressing_summary -> gzip_compressing_summary
    int home -> home
    int http_proxy -> http_proxy
    int http_proxy_summary -> http_proxy_summary
    int ignore_ssl_error -> ignore_ssl_error
    int ignore_ssl_error_summary -> ignore_ssl_error_summary
    int in_reply_to -> in_reply_to
    int inbox -> inbox
    int just_now -> just_now
    int keywords -> keywords
    int label_backend_service -> label_backend_service
    int label_permission_group_access_twidere -> label_permission_group_access_twidere
    int label_permission_read_databases -> label_permission_read_databases
    int label_permission_write_databases -> label_permission_write_databases
    int label_tweetstore_provider -> label_tweetstore_provider
    int leftside_compose_button -> leftside_compose_button
    int leftside_compose_button_summary -> leftside_compose_button_summary
    int license -> license
    int license_summary -> license_summary
    int load_images -> load_images
    int load_item_limit -> load_item_limit
    int load_item_limit_summary -> load_item_limit_summary
    int load_more_automatically -> load_more_automatically
    int load_more_automatically_summary -> load_more_automatically_summary
    int location -> location
    int login_to_twitter -> login_to_twitter
    int longclick_to_delete -> longclick_to_delete
    int look_and_feel -> look_and_feel
    int me -> me
    int mentions -> mentions
    int more -> more
    int mute -> mute
    int name -> name
    int no_account_selected -> no_account_selected
    int notifications -> notifications
    int oauth -> oauth
    int oauth_base_url -> oauth_base_url
    int open_in_browser -> open_in_browser
    int other_settings -> other_settings
    int outbox -> outbox
    int overwrite_confirm -> overwrite_confirm
    int password -> password
    int pick_color -> pick_color
    int pick_from_gallery -> pick_from_gallery
    int please_wait -> please_wait
    int profile_image_update_success -> profile_image_update_success
    int profile_update_success -> profile_update_success
    int proxy -> proxy
    int proxy_host -> proxy_host
    int proxy_port -> proxy_port
    int pull_to_refresh_from_bottom_pull_label -> pull_to_refresh_from_bottom_pull_label
    int pull_to_refresh_from_bottom_refreshing_label -> pull_to_refresh_from_bottom_refreshing_label
    int pull_to_refresh_from_bottom_release_label -> pull_to_refresh_from_bottom_release_label
    int pull_to_refresh_pull_label -> pull_to_refresh_pull_label
    int pull_to_refresh_refreshing_label -> pull_to_refresh_refreshing_label
    int pull_to_refresh_release_label -> pull_to_refresh_release_label
    int quote -> quote
    int quote_format -> quote_format
    int quote_format_message -> quote_format_message
    int quote_format_summary -> quote_format_summary
    int quote_user -> quote_user
    int refresh -> refresh
    int remember_position -> remember_position
    int remember_position_summary -> remember_position_summary
    int remove_image -> remove_image
    int remove_location -> remove_location
    int remove_photo -> remove_photo
    int reply -> reply
    int reply_to -> reply_to
    int report_for_spam -> report_for_spam
    int reported_user_for_spam -> reported_user_for_spam
    int rest_base_url -> rest_base_url
    int retry -> retry
    int retweet -> retweet
    int retweet_success -> retweet_success
    int retweeted_by -> retweeted_by
    int save -> save
    int save_as -> save_as
    int search_base_url -> search_base_url
    int search_hint -> search_hint
    int search_tweets -> search_tweets
    int search_users -> search_users
    int select_account -> select_account
    int send -> send
    int send_all -> send_all
    int send_success -> send_success
    int set_as_default -> set_as_default
    int set_color -> set_color
    int set_default_account_hint -> set_default_account_hint
    int settings -> settings
    int share -> share
    int share_via_twidere -> share_via_twidere
    int sign_in -> sign_in
    int sign_up -> sign_up
    int signing_oauth_base_url -> signing_oauth_base_url
    int signing_rest_base_url -> signing_rest_base_url
    int sources -> sources
    int stop_service_after_closed -> stop_service_after_closed
    int stop_service_after_closed_summary -> stop_service_after_closed_summary
    int storage -> storage
    int take_photo -> take_photo
    int tap_to_load_more -> tap_to_load_more
    int test -> test
    int text_size -> text_size
    int text_size_summary -> text_size_summary
    int time_source -> time_source
    int tweet_hint -> tweet_hint
    int tweets -> tweets
    int twip_o -> twip_o
    int unblock -> unblock
    int unfav -> unfav
    int unfavorite_success -> unfavorite_success
    int unfollow -> unfollow
    int unfollow_success -> unfollow_success
    int upload_base_url -> upload_base_url
    int url -> url
    int user_blocked -> user_blocked
    int user_muted -> user_muted
    int user_unblocked -> user_unblocked
    int username -> username
    int users -> users
    int view -> view
    int view_conversation -> view_conversation
    int view_image -> view_image
    int view_map -> view_map
    int view_media -> view_media
    int view_status -> view_status
    int view_user_profile -> view_user_profile
    int warn_expert_only -> warn_expert_only
    int weekly_trends -> weekly_trends
    int xauth -> xauth
com.handmark.pulltorefresh.library.R$styleable -> a.a.a.a.q:
    int[] PullToRefresh -> PullToRefresh
    int PullToRefresh_ptrAdapterViewBackground -> PullToRefresh_ptrAdapterViewBackground
    int PullToRefresh_ptrDrawable -> PullToRefresh_ptrDrawable
    int PullToRefresh_ptrHeaderBackground -> PullToRefresh_ptrHeaderBackground
    int PullToRefresh_ptrHeaderSubTextColor -> PullToRefresh_ptrHeaderSubTextColor
    int PullToRefresh_ptrHeaderTextColor -> PullToRefresh_ptrHeaderTextColor
    int PullToRefresh_ptrMode -> PullToRefresh_ptrMode
    int PullToRefresh_ptrShowIndicator -> PullToRefresh_ptrShowIndicator
    int[] Switch -> Switch
    int Switch_switchMinWidth -> Switch_switchMinWidth
    int Switch_switchPadding -> Switch_switchPadding
    int Switch_switchTextAppearance -> Switch_switchTextAppearance
    int Switch_textOff -> Switch_textOff
    int Switch_textOn -> Switch_textOn
    int Switch_thumb -> Switch_thumb
    int Switch_thumbTextPadding -> Switch_thumbTextPadding
    int Switch_track -> Switch_track
    int[] TextAppearance -> TextAppearance
    int TextAppearance_textColor -> TextAppearance_textColor
    int TextAppearance_textSize -> TextAppearance_textSize
    int[] Twidere -> Twidere
    int Twidere_switchStyle -> Twidere_switchStyle
    int[] ViewPagerIndicator -> ViewPagerIndicator
    int ViewPagerIndicator_tabBackground -> ViewPagerIndicator_tabBackground
    int ViewPagerIndicator_tabStyle -> ViewPagerIndicator_tabStyle
    int ViewPagerIndicator_tabTextStyle -> ViewPagerIndicator_tabTextStyle
com.handmark.pulltorefresh.library.internal.EmptyViewMethodAccessor -> a.a.a.a.a.a:
    void setEmptyViewInternal(android.view.View) -> a
com.handmark.pulltorefresh.library.internal.IndicatorLayout -> a.a.a.a.a.b:
    android.view.animation.Animation mInAnim -> a
    android.view.animation.Animation mOutAnim -> b
    android.widget.ImageView mArrowImageView -> c
    android.view.animation.Animation mRotateAnimation -> d
    android.view.animation.Animation mResetRotateAnimation -> e
    int[] $SWITCH_TABLE$com$handmark$pulltorefresh$library$PullToRefreshBase$Mode -> f
    boolean isVisible() -> a
    void hide() -> b
    void show() -> c
    void onAnimationEnd(android.view.animation.Animation) -> onAnimationEnd
    void onAnimationRepeat(android.view.animation.Animation) -> onAnimationRepeat
    void onAnimationStart(android.view.animation.Animation) -> onAnimationStart
    void releaseToRefresh() -> d
    void pullToRefresh() -> e
    int[] $SWITCH_TABLE$com$handmark$pulltorefresh$library$PullToRefreshBase$Mode() -> f
com.handmark.pulltorefresh.library.internal.LoadingLayout -> a.a.a.a.a.c:
    android.widget.ImageView mHeaderImage -> a
    android.graphics.Matrix mHeaderImageMatrix -> b
    android.widget.TextView mHeaderText -> c
    android.widget.TextView mSubHeaderText -> d
    java.lang.String mPullLabel -> e
    java.lang.String mRefreshingLabel -> f
    java.lang.String mReleaseLabel -> g
    float mRotationPivotX -> h
    float mRotationPivotY -> i
    android.view.animation.Animation mRotateAnimation -> j
    int[] $SWITCH_TABLE$com$handmark$pulltorefresh$library$PullToRefreshBase$Mode -> k
    void reset() -> a
    void releaseToRefresh() -> b
    void setPullLabel(java.lang.String) -> setPullLabel
    void refreshing() -> c
    void setRefreshingLabel(java.lang.String) -> setRefreshingLabel
    void setReleaseLabel(java.lang.String) -> setReleaseLabel
    void pullToRefresh() -> d
    void setTextColor(android.content.res.ColorStateList) -> setTextColor
    void setSubTextColor(android.content.res.ColorStateList) -> setSubTextColor
    void setTextColor(int) -> setTextColor
    void setLoadingDrawable(android.graphics.drawable.Drawable) -> setLoadingDrawable
    void setSubTextColor(int) -> setSubTextColor
    void setSubHeaderText(java.lang.CharSequence) -> setSubHeaderText
    void onPullY(float) -> a
    void resetImageRotation() -> f
    int[] $SWITCH_TABLE$com$handmark$pulltorefresh$library$PullToRefreshBase$Mode() -> e
com.twitter.Extractor -> a.b.a:
    boolean extractURLWithoutProtocol -> a
    java.util.List extractMentionedScreennames(java.lang.String) -> a
    java.util.List extractMentionedScreennames(java.lang.String,boolean) -> a
    java.util.List extractMentionedScreennamesWithIndices(java.lang.String) -> b
    java.util.List extractMentionsOrListsWithIndices(java.lang.String) -> c
    java.util.List extractURLsWithIndices(java.lang.String) -> d
com.twitter.Extractor$Entity -> a.b.b:
    int start -> a
    int end -> b
    java.lang.String value -> c
    java.lang.String listSlug -> d
    com.twitter.Extractor$Entity$Type type -> e
    java.lang.String displayURL -> f
    java.lang.String expandedURL -> g
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
com.twitter.Extractor$Entity$Type -> a.b.c:
    com.twitter.Extractor$Entity$Type URL -> a
    com.twitter.Extractor$Entity$Type HASHTAG -> b
    com.twitter.Extractor$Entity$Type MENTION -> c
    com.twitter.Extractor$Entity$Type CASHTAG -> d
    com.twitter.Extractor$Entity$Type[] ENUM$VALUES -> e
    com.twitter.Extractor$Entity$Type[] values() -> values
    com.twitter.Extractor$Entity$Type valueOf(java.lang.String) -> valueOf
com.twitter.Regex -> a.b.d:
    java.lang.String LATIN_ACCENTS_CHARS -> k
    java.lang.String HASHTAG_ALPHA_CHARS -> l
    java.lang.String HASHTAG_ALPHA_NUMERIC_CHARS -> m
    java.lang.String HASHTAG_ALPHA -> n
    java.lang.String HASHTAG_ALPHA_NUMERIC -> o
    java.lang.String URL_VALID_CHARS -> p
    java.lang.String URL_VALID_SUBDOMAIN -> q
    java.lang.String URL_VALID_DOMAIN_NAME -> r
    java.lang.String URL_VALID_DOMAIN -> s
    java.lang.String URL_VALID_GENERAL_PATH_CHARS -> t
    java.lang.String URL_BALANCED_PARENS -> u
    java.lang.String URL_VALID_PATH_ENDING_CHARS -> v
    java.lang.String URL_VALID_PATH -> w
    java.lang.String VALID_URL_PATTERN_STRING -> x
    java.lang.String AT_SIGNS_CHARS -> y
    java.util.regex.Pattern VALID_HASHTAG -> a
    java.util.regex.Pattern INVALID_HASHTAG_MATCH_END -> b
    java.util.regex.Pattern AT_SIGNS -> c
    java.util.regex.Pattern VALID_MENTION_OR_LIST -> d
    java.util.regex.Pattern VALID_REPLY -> e
    java.util.regex.Pattern INVALID_MENTION_MATCH_END -> f
    java.util.regex.Pattern VALID_URL -> g
    java.util.regex.Pattern VALID_TCO_URL -> h
    java.util.regex.Pattern INVALID_URL_WITHOUT_PROTOCOL_MATCH_BEGIN -> i
    java.util.regex.Pattern VALID_CASHTAG -> j
com.twitter.Validator -> a.b.e:
    int shortUrlLength -> a
    int shortUrlLengthHttps -> b
    com.twitter.Extractor extractor -> c
    int getTweetLength(java.lang.String) -> a
    boolean isValidTweet(java.lang.String) -> b
org.mariotaku.actionbarcompat.ActionBar -> org.mariotaku.a.a:
    android.view.View getCustomView() -> a
    void setCustomView(int) -> a
    void setDisplayHomeAsUpEnabled(boolean) -> a
    void setDisplayShowCustomEnabled(boolean) -> b
    void setDisplayShowHomeEnabled(boolean) -> c
    void setDisplayShowTitleEnabled(boolean) -> d
    void setTitle(java.lang.CharSequence) -> a
org.mariotaku.actionbarcompat.ActionBarCompat -> org.mariotaku.a.b:
    org.mariotaku.actionbarcompat.ActionBar getActionBar() -> b
    android.view.MenuInflater getMenuInflater(android.view.MenuInflater) -> a
    org.mariotaku.actionbarcompat.ActionBarCompat getInstance(android.app.Activity) -> a
org.mariotaku.actionbarcompat.ActionBarCompatBase -> org.mariotaku.a.c:
    android.app.Activity mActivity -> a
    android.view.View mActionBarView -> b
    android.view.View mCustomView -> c
    android.view.View mHomeAsUpIndicator -> d
    android.widget.ImageView mIconView -> e
    android.widget.TextView mTitleView -> f
    android.widget.TextView mSubtitleView -> g
    android.view.ViewGroup mHomeView -> h
    android.view.ViewGroup mTitleContainer -> i
    android.view.ViewGroup mCustomViewContainer -> j
    android.view.ViewGroup mActionMenuView -> k
    android.view.Menu mRealMenu -> l
    android.view.Menu mActionBarMenu -> m
    boolean mProgressBarIndeterminateEnabled -> n
    void createActionBarMenu() -> c
    android.view.View getCustomView() -> a
    android.view.MenuInflater getMenuInflater(android.view.MenuInflater) -> a
    void setCustomView(int) -> a
    void setCustomView(android.view.View) -> a
    void setDisplayHomeAsUpEnabled(boolean) -> a
    void setDisplayShowCustomEnabled(boolean) -> b
    void setDisplayShowHomeEnabled(boolean) -> c
    void setDisplayShowTitleEnabled(boolean) -> d
    void setTitle(java.lang.CharSequence) -> a
    android.view.View addActionItemCompatFromMenuItem(android.view.MenuItem) -> a
    void clearMenuButtons() -> g
    void setHomeButton() -> h
    void hideInRealMenu(android.view.Menu) -> a
    void invalidateOptionsMenu() -> d
    boolean requestCustomTitleView() -> e
    boolean setCustomTitleView() -> f
    void setProgressBarIndeterminateEnabled(boolean) -> e
    void setProgressBarIndeterminateVisibility(boolean) -> f
    android.view.Menu access$0(org.mariotaku.actionbarcompat.ActionBarCompatBase) -> a
    android.view.Menu access$1(org.mariotaku.actionbarcompat.ActionBarCompatBase) -> b
    android.app.Activity access$2(org.mariotaku.actionbarcompat.ActionBarCompatBase) -> c
    android.view.ViewGroup access$3(org.mariotaku.actionbarcompat.ActionBarCompatBase) -> d
org.mariotaku.actionbarcompat.ActionBarCompatBase$1 -> org.mariotaku.a.d:
    org.mariotaku.actionbarcompat.ActionBarCompatBase this$0 -> a
    android.view.MenuItem val$item -> b
    void onClick(android.view.View) -> onClick
    org.mariotaku.actionbarcompat.ActionBarCompatBase access$0(org.mariotaku.actionbarcompat.ActionBarCompatBase$1) -> a
org.mariotaku.actionbarcompat.ActionBarCompatBase$1$1 -> org.mariotaku.a.e:
    org.mariotaku.actionbarcompat.ActionBarCompatBase$1 this$1 -> a
    boolean onMenuItemClick(android.view.MenuItem) -> a
org.mariotaku.actionbarcompat.ActionBarCompatBase$2 -> org.mariotaku.a.f:
    org.mariotaku.actionbarcompat.ActionBarCompatBase this$0 -> a
    android.view.MenuItem val$item -> b
    boolean onLongClick(android.view.View) -> onLongClick
org.mariotaku.actionbarcompat.ActionBarCompatBase$3 -> org.mariotaku.a.g:
    org.mariotaku.actionbarcompat.ActionBarCompatBase this$0 -> a
    android.view.MenuItem val$homeItem -> b
    void onClick(android.view.View) -> onClick
org.mariotaku.actionbarcompat.ActionBarCompatBase$SupportMenu -> org.mariotaku.a.h:
    android.content.Context context -> b
    org.mariotaku.actionbarcompat.ActionBarCompatBase this$0 -> a
    android.view.MenuItem findItem(int) -> findItem
org.mariotaku.actionbarcompat.ActionBarCompatBase$SupportMenuInflater -> org.mariotaku.a.i:
    android.view.MenuInflater mInflater -> a
    org.mariotaku.actionbarcompat.ActionBarCompatBase this$0 -> b
    void inflate(int,android.view.Menu) -> inflate
    void removeDuplicateMenuInActionBar(android.view.Menu,int) -> a
org.mariotaku.actionbarcompat.ActionBarCompatBase$SupportMenuItem -> org.mariotaku.a.j:
    int itemId -> b
    org.mariotaku.actionbarcompat.ActionBarCompatBase this$0 -> a
    android.view.MenuItem setEnabled(boolean) -> setEnabled
    android.view.MenuItem setIcon(int) -> setIcon
    android.view.MenuItem setTitle(int) -> setTitle
    android.view.MenuItem setVisible(boolean) -> setVisible
org.mariotaku.actionbarcompat.ActionBarCompatNative -> org.mariotaku.a.k:
    android.app.Activity mActivity -> a
    android.view.View getCustomView() -> a
    void setCustomView(int) -> a
    void setDisplayHomeAsUpEnabled(boolean) -> a
    void setDisplayShowCustomEnabled(boolean) -> b
    void setDisplayShowHomeEnabled(boolean) -> c
    void setDisplayShowTitleEnabled(boolean) -> d
    void setTitle(java.lang.CharSequence) -> a
org.mariotaku.actionbarcompat.ActionBarFragmentActivity -> org.mariotaku.a.l:
    org.mariotaku.actionbarcompat.ActionBarCompat mActionBarCompat -> m
    boolean mActionBarInitialized -> n
    android.support.v4.app.Fragment mAttachedFragment -> o
    android.view.MenuInflater getMenuInflater() -> getMenuInflater
    org.mariotaku.actionbarcompat.ActionBar getSupportActionBar() -> f
    void invalidateSupportOptionsMenu() -> g
    void onAttachFragment(android.support.v4.app.Fragment) -> a
    void onCreate(android.os.Bundle) -> onCreate
    boolean onCreateOptionsMenu(android.view.Menu) -> onCreateOptionsMenu
    void onPostCreate(android.os.Bundle) -> onPostCreate
    boolean onPrepareOptionsMenu(android.view.Menu) -> onPrepareOptionsMenu
    void onTitleChanged(java.lang.CharSequence,int) -> onTitleChanged
    void requestSupportWindowFeature(int) -> b
    void setContentView(int) -> setContentView
    void setContentView(android.view.View) -> setContentView
    void setContentView(android.view.View,android.view.ViewGroup$LayoutParams) -> setContentView
    void setSupportProgressBarIndeterminateVisibility(boolean) -> b
org.mariotaku.actionbarcompat.ActionBarPreferenceActivity -> org.mariotaku.a.m:
    org.mariotaku.actionbarcompat.ActionBarCompat mActionBarCompat -> a
    boolean mActionBarInitialized -> b
    org.mariotaku.actionbarcompat.ActionBar getSupportActionBar() -> a
    void onCreate(android.os.Bundle) -> onCreate
    boolean onCreateOptionsMenu(android.view.Menu) -> onCreateOptionsMenu
    void onPostCreate(android.os.Bundle) -> onPostCreate
    boolean onPrepareOptionsMenu(android.view.Menu) -> onPrepareOptionsMenu
    void onTitleChanged(java.lang.CharSequence,int) -> onTitleChanged
    void setContentView(int) -> setContentView
    void setContentView(android.view.View) -> setContentView
    void setContentView(android.view.View,android.view.ViewGroup$LayoutParams) -> setContentView
org.mariotaku.actionbarcompat.MethodsCompat -> org.mariotaku.a.n:
    void invalidateOptionsMenu(android.app.Activity) -> a
org.mariotaku.actionbarcompat.R -> org.mariotaku.a.o:
org.mariotaku.actionbarcompat.R$attr -> org.mariotaku.a.p:
    int actionBarBackground -> actionBarBackground
    int actionBarHomeAsUpIndicator -> actionBarHomeAsUpIndicator
    int actionBarIndeterminateProgressStyle -> actionBarIndeterminateProgressStyle
    int actionBarItemHomeStyle -> actionBarItemHomeStyle
    int actionBarItemStyle -> actionBarItemStyle
    int actionBarStyle -> actionBarStyle
    int actionBarTitleStyle -> actionBarTitleStyle
    int menuBarBackground -> menuBarBackground
    int popupBackground -> popupBackground
    int ptrAdapterViewBackground -> ptrAdapterViewBackground
    int ptrDrawable -> ptrDrawable
    int ptrHeaderBackground -> ptrHeaderBackground
    int ptrHeaderSubTextColor -> ptrHeaderSubTextColor
    int ptrHeaderTextColor -> ptrHeaderTextColor
    int ptrMode -> ptrMode
    int ptrShowIndicator -> ptrShowIndicator
    int switchMinWidth -> switchMinWidth
    int switchPadding -> switchPadding
    int switchStyle -> switchStyle
    int switchTextAppearance -> switchTextAppearance
    int tabBackground -> tabBackground
    int tabStyle -> tabStyle
    int tabTextStyle -> tabTextStyle
    int textColor -> textColor
    int textOff -> textOff
    int textOn -> textOn
    int textSize -> textSize
    int thumb -> thumb
    int thumbTextPadding -> thumbTextPadding
    int track -> track
org.mariotaku.actionbarcompat.R$dimen -> org.mariotaku.a.q:
    int actionbar_button_width -> actionbar_button_width
    int actionbar_height -> actionbar_height
    int image_preview_height -> image_preview_height
    int image_preview_width -> image_preview_width
    int indicator_corner_radius -> indicator_corner_radius
    int indicator_internal_padding -> indicator_internal_padding
    int indicator_right_padding -> indicator_right_padding
    int popup_window_width -> popup_window_width
    int profile_image_size -> profile_image_size
    int set_color_height -> set_color_height
org.mariotaku.actionbarcompat.R$id -> org.mariotaku.a.r:
    int accounts -> accounts
    int actionbar -> actionbar
    int actionbar_custom_view_container -> actionbar_custom_view_container
    int actionbar_home -> actionbar_home
    int actionbar_home_as_up_indicator -> actionbar_home_as_up_indicator
    int actionbar_icon -> actionbar_icon
    int actionbar_menu_buttons -> actionbar_menu_buttons
    int actionbar_progress_indeterminate -> actionbar_progress_indeterminate
    int actionbar_subtitle -> actionbar_subtitle
    int actionbar_title -> actionbar_title
    int actionbar_title_view -> actionbar_title_view
    int add -> add
    int add_account -> add_account
    int add_image -> add_image
    int add_location -> add_location
    int advanced_api_config -> advanced_api_config
    int advanced_api_config_label -> advanced_api_config_label
    int auth_type -> auth_type
    int auth_type_scroll -> auth_type_scroll
    int basic -> basic
    int block -> block
    int both -> both
    int button_compose -> button_compose
    int cancel -> cancel
    int center -> center
    int close -> close
    int color -> color
    int colors_grid -> colors_grid
    int compose -> compose
    int created_at -> created_at
    int created_at_container -> created_at_container
    int delete -> delete
    int delete_all -> delete_all
    int delete_all_submenu -> delete_all_submenu
    int delete_submenu -> delete_submenu
    int description -> description
    int description_container -> description_container
    int discover_content -> discover_content
    int divider -> divider
    int drafts -> drafts
    int edit -> edit
    int edit_api -> edit_api
    int edit_file_name -> edit_file_name
    int edit_text -> edit_text
    int fav -> fav
    int follow -> follow
    int follow_container -> follow_container
    int follow_indicator -> follow_indicator
    int follow_progress -> follow_progress
    int followers_container -> followers_container
    int followers_count -> followers_count
    int friends_container -> friends_container
    int friends_count -> friends_count
    int gridview -> gridview
    int image -> image
    int image_thumbnail_preview -> image_thumbnail_preview
    int image_viewer -> image_viewer
    int images_preview -> images_preview
    int in_reply_to -> in_reply_to
    int label_auth_type -> label_auth_type
    int label_rest_base_url -> label_rest_base_url
    int left_pane -> left_pane
    int list_gap_text -> list_gap_text
    int list_progress -> list_progress
    int load_images -> load_images
    int location -> location
    int location_container -> location_container
    int location_view -> location_view
    int main -> main
    int map_frame -> map_frame
    int menu_bar -> menu_bar
    int more -> more
    int more_options -> more_options
    int more_options_container -> more_options_container
    int more_options_progress -> more_options_progress
    int mute -> mute
    int name -> name
    int name_container -> name_container
    int navigate -> navigate
    int oauth -> oauth
    int oauth_base_url -> oauth_base_url
    int open_in_browser -> open_in_browser
    int pager -> pager
    int password -> password
    int pick_from_gallery -> pick_from_gallery
    int pick_from_map -> pick_from_map
    int preview_gallery -> preview_gallery
    int profile -> profile
    int profile_divider_vertical -> profile_divider_vertical
    int profile_image -> profile_image
    int profile_image_container -> profile_image_container
    int profile_name_container -> profile_name_container
    int progress -> progress
    int pullDownFromTop -> pullDownFromTop
    int pullUpFromBottom -> pullUpFromBottom
    int pull_to_refresh_image -> pull_to_refresh_image
    int pull_to_refresh_sub_text -> pull_to_refresh_sub_text
    int pull_to_refresh_text -> pull_to_refresh_text
    int quote -> quote
    int refresh -> refresh
    int refresh_stop_save -> refresh_stop_save
    int reply -> reply
    int reply_retweet_status -> reply_retweet_status
    int report_spam -> report_spam
    int report_spam_submenu -> report_spam_submenu
    int rest_base_url -> rest_base_url
    int retry -> retry
    int retweet -> retweet
    int retweet_submenu -> retweet_submenu
    int right_pane -> right_pane
    int save -> save
    int screen_name -> screen_name
    int search -> search
    int search_base_url -> search_base_url
    int search_tweets -> search_tweets
    int search_users -> search_users
    int select_account -> select_account
    int send -> send
    int send_all -> send_all
    int send_all_submenu -> send_all_submenu
    int set_as_default -> set_as_default
    int set_color -> set_color
    int settings -> settings
    int share -> share
    int sign_in -> sign_in
    int sign_in_sign_up -> sign_in_sign_up
    int sign_up -> sign_up
    int signing_oauth_base_url -> signing_oauth_base_url
    int signing_rest_base_url -> signing_rest_base_url
    int stub_advanced_api_config -> stub_advanced_api_config
    int take_photo -> take_photo
    int text -> text
    int text_count -> text_count
    int time -> time
    int time_source -> time_source
    int toggle -> toggle
    int trends_header -> trends_header
    int trends_list -> trends_list
    int trends_list_container -> trends_list_container
    int trends_progress -> trends_progress
    int trends_refresh -> trends_refresh
    int trends_spinner -> trends_spinner
    int tweet_count -> tweet_count
    int tweets_container -> tweets_container
    int twip_o -> twip_o
    int upload_base_url -> upload_base_url
    int url -> url
    int url_container -> url_container
    int username -> username
    int username_password -> username_password
    int view -> view
    int webview -> webview
    int xauth -> xauth
org.mariotaku.actionbarcompat.R$layout -> org.mariotaku.a.s:
    int account_list_item -> account_list_item
    int accounts -> accounts
    int actionbar -> actionbar
    int actionbar_filters -> actionbar_filters
    int actionbar_spinner_navigation -> actionbar_spinner_navigation
    int color_grid_item -> color_grid_item
    int compose -> compose
    int direct_message_list_item -> direct_message_list_item
    int direct_messages -> direct_messages
    int discover -> discover
    int draft_list_item -> draft_list_item
    int drafts_list -> drafts_list
    int edit_api -> edit_api
    int edit_api_advanced_fields -> edit_api_advanced_fields
    int file_save_as -> file_save_as
    int home_tabs -> home_tabs
    int image_viewer -> image_viewer
    int images_preview -> images_preview
    int images_preview_item -> images_preview_item
    int main -> main
    int map_viewer -> map_viewer
    int menu_button_item -> menu_button_item
    int menu_list_item -> menu_list_item
    int popup_list -> popup_list
    int pull_to_refresh_header -> pull_to_refresh_header
    int select_account -> select_account
    int set_color -> set_color
    int simple_dropdown_hint -> simple_dropdown_hint
    int spinner_dropdown_item -> spinner_dropdown_item
    int spinner_item -> spinner_item
    int status_list_item -> status_list_item
    int twitter_login -> twitter_login
    int two_line_list_item -> two_line_list_item
    int user_action_list_item -> user_action_list_item
    int user_autocomplete_list_item -> user_autocomplete_list_item
    int user_list_item -> user_list_item
    int user_profile -> user_profile
    int user_profile_header -> user_profile_header
    int view_status -> view_status
    int vpi__tab -> vpi__tab
    int webview -> webview
org.mariotaku.actionbarcompat.R$style -> org.mariotaku.a.t:
    int AlertDialog -> AlertDialog
    int AlertDialog_Holo -> AlertDialog_Holo
    int AlertDialog_Holo_Light -> AlertDialog_Holo_Light
    int Animation_ImageViewer -> Animation_ImageViewer
    int Animations -> Animations
    int Animations_PopDownMenu -> Animations_PopDownMenu
    int Animations_PopDownMenu_Center -> Animations_PopDownMenu_Center
    int Animations_PopDownMenu_Left -> Animations_PopDownMenu_Left
    int Animations_PopDownMenu_Right -> Animations_PopDownMenu_Right
    int Animations_PopUpMenu -> Animations_PopUpMenu
    int Animations_PopUpMenu_Center -> Animations_PopUpMenu_Center
    int Animations_PopUpMenu_Left -> Animations_PopUpMenu_Left
    int Animations_PopUpMenu_Right -> Animations_PopUpMenu_Right
    int DialogWindowTitle_Holo -> DialogWindowTitle_Holo
    int DialogWindowTitle_Holo_Light -> DialogWindowTitle_Holo_Light
    int TextAppearance_Holo -> TextAppearance_Holo
    int TextAppearance_Holo_DialogWindowTitle -> TextAppearance_Holo_DialogWindowTitle
    int TextAppearance_Holo_Inverse -> TextAppearance_Holo_Inverse
    int TextAppearance_Holo_Large -> TextAppearance_Holo_Large
    int TextAppearance_Holo_Large_Inverse -> TextAppearance_Holo_Large_Inverse
    int TextAppearance_Holo_Light -> TextAppearance_Holo_Light
    int TextAppearance_Holo_Light_DialogWindowTitle -> TextAppearance_Holo_Light_DialogWindowTitle
    int TextAppearance_Holo_Light_Inverse -> TextAppearance_Holo_Light_Inverse
    int TextAppearance_Holo_Light_Large -> TextAppearance_Holo_Light_Large
    int TextAppearance_Holo_Light_Large_Inverse -> TextAppearance_Holo_Light_Large_Inverse
    int TextAppearance_Holo_Light_Medium -> TextAppearance_Holo_Light_Medium
    int TextAppearance_Holo_Light_Medium_Inverse -> TextAppearance_Holo_Light_Medium_Inverse
    int TextAppearance_Holo_Light_SearchResult -> TextAppearance_Holo_Light_SearchResult
    int TextAppearance_Holo_Light_SearchResult_Subtitle -> TextAppearance_Holo_Light_SearchResult_Subtitle
    int TextAppearance_Holo_Light_SearchResult_Title -> TextAppearance_Holo_Light_SearchResult_Title
    int TextAppearance_Holo_Light_Small -> TextAppearance_Holo_Light_Small
    int TextAppearance_Holo_Light_Small_Inverse -> TextAppearance_Holo_Light_Small_Inverse
    int TextAppearance_Holo_Light_Widget -> TextAppearance_Holo_Light_Widget
    int TextAppearance_Holo_Light_Widget_Button -> TextAppearance_Holo_Light_Widget_Button
    int TextAppearance_Holo_Light_Widget_DropDownHint -> TextAppearance_Holo_Light_Widget_DropDownHint
    int TextAppearance_Holo_Medium -> TextAppearance_Holo_Medium
    int TextAppearance_Holo_Medium_Inverse -> TextAppearance_Holo_Medium_Inverse
    int TextAppearance_Holo_SearchResult -> TextAppearance_Holo_SearchResult
    int TextAppearance_Holo_SearchResult_Subtitle -> TextAppearance_Holo_SearchResult_Subtitle
    int TextAppearance_Holo_SearchResult_Title -> TextAppearance_Holo_SearchResult_Title
    int TextAppearance_Holo_Small -> TextAppearance_Holo_Small
    int TextAppearance_Holo_Small_Inverse -> TextAppearance_Holo_Small_Inverse
    int TextAppearance_Holo_Widget -> TextAppearance_Holo_Widget
    int TextAppearance_Holo_Widget_Button -> TextAppearance_Holo_Widget_Button
    int TextAppearance_Holo_Widget_DropDownHint -> TextAppearance_Holo_Widget_DropDownHint
    int TextAppearance_Holo_Widget_Switch -> TextAppearance_Holo_Widget_Switch
    int TextAppearance_Holo_Widget_TextView -> TextAppearance_Holo_Widget_TextView
    int TextAppearance_Holo_Widget_TextView_SpinnerItem -> TextAppearance_Holo_Widget_TextView_SpinnerItem
    int TextAppearance_TabPageIndicator -> TextAppearance_TabPageIndicator
    int Theme_ActionBar -> Theme_ActionBar
    int Theme_ActionBar_Dialog -> Theme_ActionBar_Dialog
    int Theme_ActionBar_Light -> Theme_ActionBar_Light
    int Theme_ActionBar_Light_DarkActionBar -> Theme_ActionBar_Light_DarkActionBar
    int Theme_ActionBar_Light_Dialog -> Theme_ActionBar_Light_Dialog
    int Theme_Holo -> Theme_Holo
    int Theme_Holo_Dialog -> Theme_Holo_Dialog
    int Theme_Holo_Light -> Theme_Holo_Light
    int Theme_Holo_Light_DarkActionBar -> Theme_Holo_Light_DarkActionBar
    int Theme_Holo_Light_Dialog -> Theme_Holo_Light_Dialog
    int Theme_Twidere -> Theme_Twidere
    int Theme_Twidere_Dialog -> Theme_Twidere_Dialog
    int Theme_Twidere_ImageViewer -> Theme_Twidere_ImageViewer
    int Theme_Twidere_Light -> Theme_Twidere_Light
    int Theme_Twidere_Light_Dialog -> Theme_Twidere_Light_Dialog
    int Theme_Twidere_Viewer -> Theme_Twidere_Viewer
    int Widget_ActionBar -> Widget_ActionBar
    int Widget_ActionBar_Light -> Widget_ActionBar_Light
    int Widget_ActionBar_Light_Solid_Inverse -> Widget_ActionBar_Light_Solid_Inverse
    int Widget_ActionBarHomeItem -> Widget_ActionBarHomeItem
    int Widget_ActionBarHomeItem_Light -> Widget_ActionBarHomeItem_Light
    int Widget_ActionBarItem -> Widget_ActionBarItem
    int Widget_ActionBarItem_Light -> Widget_ActionBarItem_Light
    int Widget_ActionBarTitle -> Widget_ActionBarTitle
    int Widget_ActionBarTitle_Inverse -> Widget_ActionBarTitle_Inverse
    int Widget_ActionBarTitleBase -> Widget_ActionBarTitleBase
    int Widget_Holo -> Widget_Holo
    int Widget_Holo_AutoCompleteTextView -> Widget_Holo_AutoCompleteTextView
    int Widget_Holo_CompoundButton_CheckBox -> Widget_Holo_CompoundButton_CheckBox
    int Widget_Holo_CompoundButton_RadioButton -> Widget_Holo_CompoundButton_RadioButton
    int Widget_Holo_CompoundButton_Switch -> Widget_Holo_CompoundButton_Switch
    int Widget_Holo_EditText -> Widget_Holo_EditText
    int Widget_Holo_GridView -> Widget_Holo_GridView
    int Widget_Holo_Light -> Widget_Holo_Light
    int Widget_Holo_Light_AutoCompleteTextView -> Widget_Holo_Light_AutoCompleteTextView
    int Widget_Holo_Light_CompoundButton_CheckBox -> Widget_Holo_Light_CompoundButton_CheckBox
    int Widget_Holo_Light_CompoundButton_RadioButton -> Widget_Holo_Light_CompoundButton_RadioButton
    int Widget_Holo_Light_CompoundButton_Switch -> Widget_Holo_Light_CompoundButton_Switch
    int Widget_Holo_Light_EditText -> Widget_Holo_Light_EditText
    int Widget_Holo_Light_GridView -> Widget_Holo_Light_GridView
    int Widget_Holo_Light_ListView -> Widget_Holo_Light_ListView
    int Widget_Holo_Light_ProgressBar -> Widget_Holo_Light_ProgressBar
    int Widget_Holo_Light_ProgressBar_Inverse -> Widget_Holo_Light_ProgressBar_Inverse
    int Widget_Holo_Light_ProgressBar_Large -> Widget_Holo_Light_ProgressBar_Large
    int Widget_Holo_Light_ProgressBar_Large_Inverse -> Widget_Holo_Light_ProgressBar_Large_Inverse
    int Widget_Holo_Light_ProgressBar_Small -> Widget_Holo_Light_ProgressBar_Small
    int Widget_Holo_Light_ProgressBar_Small_Inverse -> Widget_Holo_Light_ProgressBar_Small_Inverse
    int Widget_Holo_Light_ProgressBar_Small_Title -> Widget_Holo_Light_ProgressBar_Small_Title
    int Widget_Holo_Light_Spinner -> Widget_Holo_Light_Spinner
    int Widget_Holo_Light_TextView_SpinnerItem -> Widget_Holo_Light_TextView_SpinnerItem
    int Widget_Holo_ListView -> Widget_Holo_ListView
    int Widget_Holo_ProgressBar -> Widget_Holo_ProgressBar
    int Widget_Holo_ProgressBar_Inverse -> Widget_Holo_ProgressBar_Inverse
    int Widget_Holo_ProgressBar_Large -> Widget_Holo_ProgressBar_Large
    int Widget_Holo_ProgressBar_Large_Inverse -> Widget_Holo_ProgressBar_Large_Inverse
    int Widget_Holo_ProgressBar_Small -> Widget_Holo_ProgressBar_Small
    int Widget_Holo_ProgressBar_Small_Inverse -> Widget_Holo_ProgressBar_Small_Inverse
    int Widget_Holo_ProgressBar_Small_Title -> Widget_Holo_ProgressBar_Small_Title
    int Widget_Holo_Spinner -> Widget_Holo_Spinner
    int Widget_Holo_TextView_SpinnerItem -> Widget_Holo_TextView_SpinnerItem
    int Widget_TabPageIndicator -> Widget_TabPageIndicator
    int Widget_TabPageIndicator_TextView -> Widget_TabPageIndicator_TextView
    int Widget_TabPageIndicator_TextView_Light -> Widget_TabPageIndicator_TextView_Light
    int Widget_Twidere_ActionBar -> Widget_Twidere_ActionBar
    int Widget_Twidere_Button -> Widget_Twidere_Button
    int Widget_Twidere_Button_Inset -> Widget_Twidere_Button_Inset
    int Widget_Twidere_Button_Small -> Widget_Twidere_Button_Small
    int Widget_Twidere_ImageButton -> Widget_Twidere_ImageButton
    int Widget_Twidere_Light_ActionBar -> Widget_Twidere_Light_ActionBar
    int Widget_Twidere_Light_Button -> Widget_Twidere_Light_Button
    int Widget_Twidere_Light_Button_Inset -> Widget_Twidere_Light_Button_Inset
    int Widget_Twidere_Light_Button_Small -> Widget_Twidere_Light_Button_Small
    int Widget_Twidere_Light_ImageButton -> Widget_Twidere_Light_ImageButton
    int WindowTitle_Holo -> WindowTitle_Holo
    int WindowTitle_Holo_Inverse -> WindowTitle_Holo_Inverse
org.mariotaku.internal.menu.MenuAdapter -> org.mariotaku.b.a.a:
    android.view.Menu mMenu -> a
    long getItemId(int) -> getItemId
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
    void setMenu(android.view.Menu) -> a
    void setMenuItems() -> a
org.mariotaku.internal.menu.MenuImpl -> org.mariotaku.b.a.b:
    java.util.List mMenuItems -> a
    android.content.Context mContext -> b
    android.view.MenuItem add(java.lang.CharSequence) -> add
    android.view.MenuItem add(int) -> add
    android.view.MenuItem add(int,int,int,java.lang.CharSequence) -> add
    android.view.MenuItem add(int,int,int,int) -> add
    int addIntentOptions(int,int,int,android.content.ComponentName,android.content.Intent[],android.content.Intent,int,android.view.MenuItem[]) -> addIntentOptions
    android.view.SubMenu addSubMenu(java.lang.CharSequence) -> addSubMenu
    android.view.SubMenu addSubMenu(int) -> addSubMenu
    android.view.SubMenu addSubMenu(int,int,int,java.lang.CharSequence) -> addSubMenu
    android.view.SubMenu addSubMenu(int,int,int,int) -> addSubMenu
    void clear() -> clear
    void close() -> close
    android.view.MenuItem findItem(int) -> findItem
    android.view.MenuItem getItem(int) -> getItem
    java.util.List getMenuItems() -> a
    boolean hasVisibleItems() -> hasVisibleItems
    boolean isShortcutKey(int,android.view.KeyEvent) -> isShortcutKey
    boolean performIdentifierAction(int,int) -> performIdentifierAction
    boolean performShortcut(int,android.view.KeyEvent,int) -> performShortcut
    void removeGroup(int) -> removeGroup
    void removeItem(int) -> removeItem
    void setGroupCheckable(int,boolean,boolean) -> setGroupCheckable
    void setGroupEnabled(int,boolean) -> setGroupEnabled
    void setGroupVisible(int,boolean) -> setGroupVisible
    void setQwertyMode(boolean) -> setQwertyMode
    int size() -> size
org.mariotaku.internal.menu.MenuItemImpl -> org.mariotaku.b.a.c:
    java.lang.CharSequence title -> a
    int groupId -> b
    int itemId -> c
    int order -> d
    android.graphics.drawable.Drawable icon -> e
    android.view.SubMenu subMenu -> f
    android.content.Context context -> g
    boolean visible -> h
    boolean enabled -> i
    boolean checkable -> j
    boolean checked -> k
    boolean collapseActionView() -> collapseActionView
    boolean expandActionView() -> expandActionView
    android.view.ActionProvider getActionProvider() -> getActionProvider
    android.view.View getActionView() -> getActionView
    char getAlphabeticShortcut() -> getAlphabeticShortcut
    int getGroupId() -> getGroupId
    android.graphics.drawable.Drawable getIcon() -> getIcon
    android.content.Intent getIntent() -> getIntent
    int getItemId() -> getItemId
    android.view.ContextMenu$ContextMenuInfo getMenuInfo() -> getMenuInfo
    char getNumericShortcut() -> getNumericShortcut
    int getOrder() -> getOrder
    android.view.SubMenu getSubMenu() -> getSubMenu
    java.lang.CharSequence getTitle() -> getTitle
    java.lang.CharSequence getTitleCondensed() -> getTitleCondensed
    boolean hasSubMenu() -> hasSubMenu
    boolean isActionViewExpanded() -> isActionViewExpanded
    boolean isCheckable() -> isCheckable
    boolean isChecked() -> isChecked
    boolean isEnabled() -> isEnabled
    boolean isVisible() -> isVisible
    android.view.MenuItem setActionProvider(android.view.ActionProvider) -> setActionProvider
    android.view.MenuItem setActionView(int) -> setActionView
    android.view.MenuItem setActionView(android.view.View) -> setActionView
    android.view.MenuItem setAlphabeticShortcut(char) -> setAlphabeticShortcut
    android.view.MenuItem setCheckable(boolean) -> setCheckable
    android.view.MenuItem setChecked(boolean) -> setChecked
    android.view.MenuItem setEnabled(boolean) -> setEnabled
    android.view.MenuItem setIcon(android.graphics.drawable.Drawable) -> setIcon
    android.view.MenuItem setIcon(int) -> setIcon
    android.view.MenuItem setIntent(android.content.Intent) -> setIntent
    android.view.MenuItem setNumericShortcut(char) -> setNumericShortcut
    android.view.MenuItem setOnActionExpandListener(android.view.MenuItem$OnActionExpandListener) -> setOnActionExpandListener
    android.view.MenuItem setOnMenuItemClickListener(android.view.MenuItem$OnMenuItemClickListener) -> setOnMenuItemClickListener
    android.view.MenuItem setShortcut(char,char) -> setShortcut
    void setShowAsAction(int) -> setShowAsAction
    android.view.MenuItem setShowAsActionFlags(int) -> setShowAsActionFlags
    android.view.MenuItem setTitle(java.lang.CharSequence) -> setTitle
    android.view.MenuItem setTitle(int) -> setTitle
    android.view.MenuItem setTitleCondensed(java.lang.CharSequence) -> setTitleCondensed
    android.view.MenuItem setVisible(boolean) -> setVisible
    java.lang.String toString() -> toString
    org.mariotaku.internal.menu.MenuItemImpl setGroupId(int) -> a
    org.mariotaku.internal.menu.MenuItemImpl setItemId(int) -> b
    org.mariotaku.internal.menu.MenuItemImpl setOrder(int) -> c
    org.mariotaku.internal.menu.MenuItemImpl setSubMenu(android.view.SubMenu) -> a
    android.view.MenuItem createItem(android.content.Context,int) -> a
org.mariotaku.internal.menu.Menus -> org.mariotaku.b.a.d:
    org.mariotaku.internal.menu.MenuAdapter mAdapter -> a
    void add(int,android.view.MenuItem) -> a
    boolean add(android.view.MenuItem) -> a
    boolean addAll(java.util.Collection) -> addAll
    boolean addAll(int,java.util.Collection) -> addAll
    void clear() -> clear
    android.view.MenuItem remove(int) -> a
    boolean remove(java.lang.Object) -> remove
    android.view.MenuItem set(int,android.view.MenuItem) -> b
    int findInsertIndex(int) -> b
    boolean add(java.lang.Object) -> add
    void add(int,java.lang.Object) -> add
    java.lang.Object set(int,java.lang.Object) -> set
    java.lang.Object remove(int) -> remove
org.mariotaku.internal.menu.SubMenuImpl -> org.mariotaku.b.a.e:
    java.util.List mMenuItems -> a
    org.mariotaku.internal.menu.MenuAdapter mAdapter -> b
    android.view.MenuItem menuItem -> c
    android.content.Context mContext -> d
    android.graphics.drawable.Drawable mHeaderIcon -> e
    android.view.MenuItem add(java.lang.CharSequence) -> add
    android.view.MenuItem add(int) -> add
    android.view.MenuItem add(int,int,int,java.lang.CharSequence) -> add
    android.view.MenuItem add(int,int,int,int) -> add
    int addIntentOptions(int,int,int,android.content.ComponentName,android.content.Intent[],android.content.Intent,int,android.view.MenuItem[]) -> addIntentOptions
    android.view.SubMenu addSubMenu(java.lang.CharSequence) -> addSubMenu
    android.view.SubMenu addSubMenu(int) -> addSubMenu
    android.view.SubMenu addSubMenu(int,int,int,java.lang.CharSequence) -> addSubMenu
    android.view.SubMenu addSubMenu(int,int,int,int) -> addSubMenu
    void clear() -> clear
    void clearHeader() -> clearHeader
    void close() -> close
    android.view.MenuItem findItem(int) -> findItem
    android.view.MenuItem getItem() -> getItem
    android.view.MenuItem getItem(int) -> getItem
    java.util.List getMenuItems() -> a
    boolean hasVisibleItems() -> hasVisibleItems
    boolean isShortcutKey(int,android.view.KeyEvent) -> isShortcutKey
    boolean performIdentifierAction(int,int) -> performIdentifierAction
    boolean performShortcut(int,android.view.KeyEvent,int) -> performShortcut
    void removeGroup(int) -> removeGroup
    void removeItem(int) -> removeItem
    void setGroupCheckable(int,boolean,boolean) -> setGroupCheckable
    void setGroupEnabled(int,boolean) -> setGroupEnabled
    void setGroupVisible(int,boolean) -> setGroupVisible
    android.view.SubMenu setHeaderIcon(android.graphics.drawable.Drawable) -> setHeaderIcon
    android.view.SubMenu setHeaderIcon(int) -> setHeaderIcon
    android.view.SubMenu setHeaderTitle(java.lang.CharSequence) -> setHeaderTitle
    android.view.SubMenu setHeaderTitle(int) -> setHeaderTitle
    android.view.SubMenu setHeaderView(android.view.View) -> setHeaderView
    android.view.SubMenu setIcon(android.graphics.drawable.Drawable) -> setIcon
    android.view.SubMenu setIcon(int) -> setIcon
    void setQwertyMode(boolean) -> setQwertyMode
    int size() -> size
org.mariotaku.menubar.MenuBar -> org.mariotaku.menubar.MenuBar:
    android.view.Menu mMenu -> a
    android.content.Context mContext -> b
    org.mariotaku.menubar.MenuBar$OnMenuItemClickListener mItemClickListener -> c
    org.mariotaku.popupmenu.PopupMenu mPopupMenu -> d
    android.view.Menu getMenu() -> getMenu
    void inflate(int) -> a
    boolean onMenuItemClick(android.view.MenuItem) -> a
    void setOnMenuItemClickListener(org.mariotaku.menubar.MenuBar$OnMenuItemClickListener) -> setOnMenuItemClickListener
    void show() -> a
    void onDetachedFromWindow() -> onDetachedFromWindow
    android.view.View addMenuButton(android.view.MenuItem) -> b
    android.content.Context access$0(org.mariotaku.menubar.MenuBar) -> a
    void access$1(org.mariotaku.menubar.MenuBar,org.mariotaku.popupmenu.PopupMenu) -> a
    org.mariotaku.popupmenu.PopupMenu access$2(org.mariotaku.menubar.MenuBar) -> b
    org.mariotaku.menubar.MenuBar$OnMenuItemClickListener access$3(org.mariotaku.menubar.MenuBar) -> c
org.mariotaku.menubar.MenuBar$1 -> org.mariotaku.menubar.a:
    org.mariotaku.menubar.MenuBar this$0 -> a
    android.view.MenuItem val$item -> b
    void onClick(android.view.View) -> onClick
org.mariotaku.menubar.MenuBar$2 -> org.mariotaku.menubar.b:
    org.mariotaku.menubar.MenuBar this$0 -> a
    android.view.MenuItem val$item -> b
    boolean onLongClick(android.view.View) -> onLongClick
org.mariotaku.menubar.MenuBar$OnMenuItemClickListener -> org.mariotaku.menubar.c:
    boolean onMenuItemClick(android.view.MenuItem) -> a
org.mariotaku.popupmenu.PopupMenu -> org.mariotaku.c.a:
    void dismiss() -> a
    android.view.Menu getMenu() -> b
    void inflate(int) -> a
    void setMenu(android.view.Menu) -> a
    void setOnMenuItemClickListener(org.mariotaku.popupmenu.PopupMenu$OnMenuItemClickListener) -> a
    void show() -> c
    org.mariotaku.popupmenu.PopupMenu getInstance(android.content.Context,android.view.View) -> a
org.mariotaku.popupmenu.PopupMenu$OnDismissListener -> org.mariotaku.c.b:
    void onDismiss(org.mariotaku.popupmenu.PopupMenu) -> a
org.mariotaku.popupmenu.PopupMenu$OnMenuItemClickListener -> org.mariotaku.c.c:
    boolean onMenuItemClick(android.view.MenuItem) -> a
org.mariotaku.popupmenu.PopupMenuCompat -> org.mariotaku.c.d:
    android.widget.FrameLayout mRootView -> a
    android.widget.ListView mListView -> b
    org.mariotaku.popupmenu.PopupMenu$OnMenuItemClickListener mItemClickListener -> c
    org.mariotaku.popupmenu.PopupMenu$OnDismissListener mDismissListener -> d
    android.view.Menu mMenu -> e
    android.content.Context context -> f
    android.content.res.Resources res -> g
    android.view.View mAnchorView -> h
    android.widget.PopupWindow mWindow -> i
    android.view.WindowManager mWindowManager -> j
    boolean mDidAction -> k
    int rootWidth -> l
    int mPosX -> m
    int mPosY -> n
    org.mariotaku.internal.menu.MenuAdapter mAdapter -> o
    android.view.View$OnTouchListener mViewTouchListener -> p
    int mGravity -> q
    void dismiss() -> a
    android.view.Menu getMenu() -> b
    void inflate(int) -> a
    void onDismiss() -> onDismiss
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
    boolean onTouch(android.view.View,android.view.MotionEvent) -> onTouch
    void setMenu(android.view.Menu) -> a
    void setOnMenuItemClickListener(org.mariotaku.popupmenu.PopupMenu$OnMenuItemClickListener) -> a
    void show() -> c
    boolean isPopupWindowShowing() -> d
    void preShow() -> e
    void setAnchor(android.view.View) -> a
    void setAnimationStyle(int,int,boolean) -> a
    void setView() -> f
    void showMenu(android.view.Menu,boolean) -> a
org.mariotaku.popupmenu.PopupMenuCompat$1 -> org.mariotaku.c.e:
    org.mariotaku.popupmenu.PopupMenuCompat this$0 -> a
    boolean onTouch(android.view.View,android.view.MotionEvent) -> onTouch
org.mariotaku.popupmenu.PopupMenuNative -> org.mariotaku.c.f:
    org.mariotaku.popupmenu.PopupMenu$OnMenuItemClickListener mItemClickListener -> a
    org.mariotaku.popupmenu.PopupMenu$OnDismissListener mDismissListener -> b
    android.view.Menu mMenu -> c
    android.content.Context mContext -> d
    android.view.View mView -> e
    android.widget.ListPopupWindow mWindow -> f
    boolean mDidAction -> g
    org.mariotaku.internal.menu.MenuAdapter mAdapter -> h
    void dismiss() -> a
    android.view.Menu getMenu() -> b
    void inflate(int) -> a
    void onDismiss() -> onDismiss
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
    boolean onTouch(android.view.View,android.view.MotionEvent) -> onTouch
    void setMenu(android.view.Menu) -> a
    void setOnMenuItemClickListener(org.mariotaku.popupmenu.PopupMenu$OnMenuItemClickListener) -> a
    void show() -> c
    boolean isPopupWindowShowing() -> d
    void showMenu(android.view.Menu) -> b
org.mariotaku.preference.SeekBarPreference -> org.mariotaku.preference.SeekBarPreference:
    int mDefaultValue -> a
    int mValue -> b
    int mMax -> c
    int mMin -> d
    java.lang.String mTitle -> e
    java.lang.String mMessage -> f
    boolean onPreferenceClick(android.preference.Preference) -> onPreferenceClick
    void onSetInitialValue(boolean,java.lang.Object) -> onSetInitialValue
    int getValue() -> a
    void init(android.content.Context,android.util.AttributeSet) -> a
    void access$0(org.mariotaku.preference.SeekBarPreference,int) -> a
    int access$1(org.mariotaku.preference.SeekBarPreference) -> a
    boolean access$2(org.mariotaku.preference.SeekBarPreference,int) -> b
org.mariotaku.preference.SeekBarPreference$SeekBarDialog -> org.mariotaku.preference.a:
    android.widget.SeekBar mSeekBar -> b
    android.widget.TextView mMessageView -> c
    android.widget.TextView mProgressView -> d
    int mMin -> e
    org.mariotaku.preference.SeekBarPreference this$0 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
    void onProgressChanged(android.widget.SeekBar,int,boolean) -> onProgressChanged
    void onStartTrackingTouch(android.widget.SeekBar) -> onStartTrackingTouch
    void onStopTrackingTouch(android.widget.SeekBar) -> onStopTrackingTouch
    void setMessage(java.lang.CharSequence) -> setMessage
    void init(android.content.Context,int,int,int) -> a
org.mariotaku.preference.TextSizePreference -> org.mariotaku.preference.TextSizePreference:
    float mDefaultValue -> a
    float mValue -> b
    float mMax -> c
    float mMin -> d
    java.lang.String mTitle -> e
    java.lang.String mMessage -> f
    boolean onPreferenceClick(android.preference.Preference) -> onPreferenceClick
    void onSetInitialValue(boolean,java.lang.Object) -> onSetInitialValue
    float getValue() -> a
    void init(android.content.Context,android.util.AttributeSet) -> a
    void access$0(org.mariotaku.preference.TextSizePreference,float) -> a
    float access$1(org.mariotaku.preference.TextSizePreference) -> a
    boolean access$2(org.mariotaku.preference.TextSizePreference,float) -> b
org.mariotaku.preference.TextSizePreference$TextSizeDialog -> org.mariotaku.preference.b:
    android.widget.SeekBar mSeekBar -> b
    android.widget.TextView mMessageView -> c
    android.widget.TextView mTextSizeView -> d
    float mMin -> e
    org.mariotaku.preference.TextSizePreference this$0 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
    void onProgressChanged(android.widget.SeekBar,int,boolean) -> onProgressChanged
    void onStartTrackingTouch(android.widget.SeekBar) -> onStartTrackingTouch
    void onStopTrackingTouch(android.widget.SeekBar) -> onStopTrackingTouch
    void setMessage(java.lang.CharSequence) -> setMessage
    void init(android.content.Context,float,float,float) -> a
org.mariotaku.twidere.ITwidereService -> org.mariotaku.twidere.a:
    int getHomeTimeline(long[],long[]) -> a
    int getMentions(long[],long[]) -> b
    int getReceivedDirectMessages(long,long) -> a
    int getSentDirectMessages(long,long) -> b
    int updateStatus(long[],java.lang.String,android.location.Location,android.net.Uri,long,boolean) -> a
    int destroyStatus(long,long) -> c
    int retweetStatus(long,long) -> d
    int cancelRetweet(long,long) -> e
    int createFavorite(long,long) -> f
    int destroyFavorite(long,long) -> g
    int createFriendship(long,long) -> h
    int destroyFriendship(long,long) -> i
    int createBlock(long,long) -> j
    int destroyBlock(long,long) -> k
    int reportSpam(long,long) -> l
    int updateProfile(long,java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> a
    int updateProfileImage(long,android.net.Uri,boolean) -> a
    boolean isHomeTimelineRefreshing() -> a
    boolean isMentionsRefreshing() -> b
    boolean isReceivedDirectMessagesRefreshing() -> c
    boolean isSentDirectMessagesRefreshing() -> d
    boolean hasActivatedTask() -> e
    boolean test() -> f
    void shutdownService() -> g
org.mariotaku.twidere.ITwidereService$Stub -> org.mariotaku.twidere.b:
    org.mariotaku.twidere.ITwidereService asInterface(android.os.IBinder) -> a
    android.os.IBinder asBinder() -> asBinder
    boolean onTransact(int,android.os.Parcel,android.os.Parcel,int) -> onTransact
org.mariotaku.twidere.ITwidereService$Stub$Proxy -> org.mariotaku.twidere.c:
    android.os.IBinder mRemote -> a
    android.os.IBinder asBinder() -> asBinder
    int getHomeTimeline(long[],long[]) -> a
    int getMentions(long[],long[]) -> b
    int getReceivedDirectMessages(long,long) -> a
    int getSentDirectMessages(long,long) -> b
    int updateStatus(long[],java.lang.String,android.location.Location,android.net.Uri,long,boolean) -> a
    int destroyStatus(long,long) -> c
    int retweetStatus(long,long) -> d
    int cancelRetweet(long,long) -> e
    int createFavorite(long,long) -> f
    int destroyFavorite(long,long) -> g
    int createFriendship(long,long) -> h
    int destroyFriendship(long,long) -> i
    int createBlock(long,long) -> j
    int destroyBlock(long,long) -> k
    int reportSpam(long,long) -> l
    int updateProfile(long,java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> a
    int updateProfileImage(long,android.net.Uri,boolean) -> a
    boolean isHomeTimelineRefreshing() -> a
    boolean isMentionsRefreshing() -> b
    boolean isReceivedDirectMessagesRefreshing() -> c
    boolean isSentDirectMessagesRefreshing() -> d
    boolean hasActivatedTask() -> e
    boolean test() -> f
    void shutdownService() -> g
org.mariotaku.twidere.R -> org.mariotaku.twidere.d:
org.mariotaku.twidere.R$styleable -> org.mariotaku.twidere.e:
    int[] PullToRefresh -> PullToRefresh
    int PullToRefresh_ptrAdapterViewBackground -> PullToRefresh_ptrAdapterViewBackground
    int PullToRefresh_ptrDrawable -> PullToRefresh_ptrDrawable
    int PullToRefresh_ptrHeaderBackground -> PullToRefresh_ptrHeaderBackground
    int PullToRefresh_ptrHeaderSubTextColor -> PullToRefresh_ptrHeaderSubTextColor
    int PullToRefresh_ptrHeaderTextColor -> PullToRefresh_ptrHeaderTextColor
    int PullToRefresh_ptrMode -> PullToRefresh_ptrMode
    int PullToRefresh_ptrShowIndicator -> PullToRefresh_ptrShowIndicator
    int[] Switch -> Switch
    int Switch_switchMinWidth -> Switch_switchMinWidth
    int Switch_switchPadding -> Switch_switchPadding
    int Switch_switchTextAppearance -> Switch_switchTextAppearance
    int Switch_textOff -> Switch_textOff
    int Switch_textOn -> Switch_textOn
    int Switch_thumb -> Switch_thumb
    int Switch_thumbTextPadding -> Switch_thumbTextPadding
    int Switch_track -> Switch_track
    int[] TextAppearance -> TextAppearance
    int TextAppearance_textColor -> TextAppearance_textColor
    int TextAppearance_textSize -> TextAppearance_textSize
    int[] Twidere -> Twidere
    int Twidere_switchStyle -> Twidere_switchStyle
    int[] ViewPagerIndicator -> ViewPagerIndicator
    int ViewPagerIndicator_tabBackground -> ViewPagerIndicator_tabBackground
    int ViewPagerIndicator_tabStyle -> ViewPagerIndicator_tabStyle
    int ViewPagerIndicator_tabTextStyle -> ViewPagerIndicator_tabTextStyle
org.mariotaku.twidere.activity.AboutActivity -> org.mariotaku.twidere.activity.AboutActivity:
    void onCreate(android.os.Bundle) -> onCreate
    boolean onOptionsItemSelected(android.view.MenuItem) -> onOptionsItemSelected
    boolean isThemeChanged() -> b
    org.mariotaku.twidere.app.TwidereApplication getTwidereApplication() -> c
    void onResume() -> onResume
    void setTheme() -> d
org.mariotaku.twidere.activity.AuthorizationActivity -> org.mariotaku.twidere.activity.AuthorizationActivity:
    android.net.Uri authUrl -> m
    android.content.SharedPreferences mPreferences -> n
    android.webkit.WebView mWebView -> o
    android.webkit.WebSettings mWebSettings -> p
    void onCreate(android.os.Bundle) -> onCreate
    android.net.Uri access$0(org.mariotaku.twidere.activity.AuthorizationActivity) -> a
org.mariotaku.twidere.activity.AuthorizationActivity$AuthorizationWebViewClient -> org.mariotaku.twidere.activity.a:
    org.mariotaku.twidere.activity.AuthorizationActivity this$0 -> a
    void onPageFinished(android.webkit.WebView,java.lang.String) -> onPageFinished
    void onPageStarted(android.webkit.WebView,java.lang.String,android.graphics.Bitmap) -> onPageStarted
    void onReceivedError(android.webkit.WebView,int,java.lang.String,java.lang.String) -> onReceivedError
    boolean shouldOverrideUrlLoading(android.webkit.WebView,java.lang.String) -> shouldOverrideUrlLoading
org.mariotaku.twidere.activity.BaseActivity -> org.mariotaku.twidere.activity.b:
    int mThemeId -> m
    boolean isThemeChanged() -> h
    void onCreate(android.os.Bundle) -> onCreate
    void onResume() -> onResume
    void setTheme() -> i
org.mariotaku.twidere.activity.BaseDialogActivity -> org.mariotaku.twidere.activity.c:
    int mThemeId -> m
    boolean isThemeChanged() -> f
    void onCreate(android.os.Bundle) -> onCreate
    void onResume() -> onResume
    void setTheme() -> g
org.mariotaku.twidere.activity.BasePreferenceActivity -> org.mariotaku.twidere.activity.d:
    int mThemeId -> b
    org.mariotaku.twidere.app.TwidereApplication getTwidereApplication() -> c
    boolean isThemeChanged() -> b
    void onCreate(android.os.Bundle) -> onCreate
    void onResume() -> onResume
    void setTheme() -> d
org.mariotaku.twidere.activity.BrowserActivity -> org.mariotaku.twidere.activity.BrowserActivity:
    android.net.Uri mUri -> m
    void onCreate(android.os.Bundle) -> onCreate
org.mariotaku.twidere.activity.ComposeActivity -> org.mariotaku.twidere.activity.ComposeActivity:
    org.mariotaku.actionbarcompat.ActionBar mActionBar -> m
    java.lang.String mText -> n
    android.net.Uri mImageUri -> o
    org.mariotaku.twidere.view.StatusComposeEditText mEditText -> p
    android.widget.TextView mTextCount -> q
    android.widget.ImageView mImageThumbnailPreview -> r
    org.mariotaku.menubar.MenuBar mMenuBar -> s
    boolean mIsImageAttached -> t
    boolean mIsPhotoAttached -> u
    long[] mAccountIds -> v
    org.mariotaku.twidere.util.ServiceInterface mInterface -> w
    android.location.Location mRecentLocation -> x
    android.location.LocationManager mLocationManager -> y
    android.content.SharedPreferences mPreferences -> z
    long mInReplyToStatusId -> A
    long mAccountId -> B
    java.lang.String mInReplyToScreenName -> C
    java.lang.String mInReplyToName -> D
    boolean mIsQuote -> E
    com.twitter.Validator mValidator -> F
    org.mariotaku.twidere.activity.ComposeActivity$AttachedImageThumbnailTask mAttachedImageThumbnailTask -> G
    void afterTextChanged(android.text.Editable) -> afterTextChanged
    void beforeTextChanged(java.lang.CharSequence,int,int,int) -> beforeTextChanged
    void onActivityResult(int,int,android.content.Intent) -> onActivityResult
    void onClick(android.view.View) -> onClick
    void onCreate(android.os.Bundle) -> onCreate
    boolean onCreateOptionsMenu(android.view.Menu) -> onCreateOptionsMenu
    void onLocationChanged(android.location.Location) -> onLocationChanged
    boolean onLongClick(android.view.View) -> onLongClick
    boolean onMenuItemClick(android.view.MenuItem) -> a
    boolean onOptionsItemSelected(android.view.MenuItem) -> onOptionsItemSelected
    boolean onPrepareOptionsMenu(android.view.Menu) -> onPrepareOptionsMenu
    void onProviderDisabled(java.lang.String) -> onProviderDisabled
    void onProviderEnabled(java.lang.String) -> onProviderEnabled
    void onSaveInstanceState(android.os.Bundle) -> onSaveInstanceState
    void onStatusChanged(java.lang.String,int,android.os.Bundle) -> onStatusChanged
    void onTextChanged(java.lang.CharSequence,int,int,int) -> onTextChanged
    boolean getLocation() -> j
    void pickImage() -> k
    void reloadAttachedImageThumbnail(java.io.File) -> a
    void setMenu(android.view.Menu) -> a
    void takePhoto() -> l
    android.widget.ImageView access$0(org.mariotaku.twidere.activity.ComposeActivity) -> a
org.mariotaku.twidere.activity.ComposeActivity$AttachedImageThumbnailTask -> org.mariotaku.twidere.activity.e:
    java.io.File file -> b
    org.mariotaku.twidere.activity.ComposeActivity this$0 -> a
    android.graphics.Bitmap doInBackground(java.lang.Void[]) -> a
    void onPostExecute(android.graphics.Bitmap) -> a
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
org.mariotaku.twidere.activity.DirectMessagesActivity -> org.mariotaku.twidere.activity.DirectMessagesActivity:
    org.mariotaku.actionbarcompat.ActionBar mActionBar -> m
    android.widget.ArrayAdapter mAdapter -> n
    android.widget.Spinner mSpinner -> o
    android.os.Bundle mArguments -> p
    void onCreate(android.os.Bundle) -> onCreate
    boolean onCreateOptionsMenu(android.view.Menu) -> onCreateOptionsMenu
    void onItemSelected(android.widget.AdapterView,android.view.View,int,long) -> onItemSelected
    void onNothingSelected(android.widget.AdapterView) -> onNothingSelected
    boolean onOptionsItemSelected(android.view.MenuItem) -> onOptionsItemSelected
org.mariotaku.twidere.activity.DirectMessagesActivity$TabSpec -> org.mariotaku.twidere.activity.f:
    java.lang.Class cls -> a
    java.lang.String name -> b
    java.lang.String toString() -> toString
org.mariotaku.twidere.activity.DraftsActivity -> org.mariotaku.twidere.activity.DraftsActivity:
    org.mariotaku.twidere.activity.DraftsActivity$DraftsAdapter mAdapter -> m
    android.database.Cursor mCursor -> n
    android.widget.ListView mListView -> o
    android.content.ContentResolver mResolver -> p
    org.mariotaku.twidere.util.ServiceInterface mInterface -> q
    android.content.SharedPreferences mPreferences -> r
    float mTextSize -> s
    org.mariotaku.twidere.activity.DraftsActivity$DraftItem mDraftItem -> t
    long mSelectedId -> u
    android.content.BroadcastReceiver mStatusReceiver -> v
    org.mariotaku.popupmenu.PopupMenu mPopupMenu -> w
    void onActivityResult(int,int,android.content.Intent) -> onActivityResult
    void onCreate(android.os.Bundle) -> onCreate
    android.support.v4.content.Loader onCreateLoader(int,android.os.Bundle) -> a
    boolean onCreateOptionsMenu(android.view.Menu) -> onCreateOptionsMenu
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
    boolean onItemLongClick(android.widget.AdapterView,android.view.View,int,long) -> onItemLongClick
    void onLoaderReset(android.support.v4.content.Loader) -> a
    void onLoadFinished(android.support.v4.content.Loader,android.database.Cursor) -> a
    boolean onMenuItemClick(android.view.MenuItem) -> a
    boolean onOptionsItemSelected(android.view.MenuItem) -> onOptionsItemSelected
    void onResume() -> onResume
    void onStart() -> onStart
    void onStop() -> onStop
    void composeDraft(org.mariotaku.twidere.activity.DraftsActivity$DraftItem) -> a
    void sendDraft(org.mariotaku.twidere.activity.DraftsActivity$DraftItem) -> b
    void onLoadFinished(android.support.v4.content.Loader,java.lang.Object) -> a
    android.database.Cursor access$1(org.mariotaku.twidere.activity.DraftsActivity) -> a
org.mariotaku.twidere.activity.DraftsActivity$1 -> org.mariotaku.twidere.activity.g:
    org.mariotaku.twidere.activity.DraftsActivity this$0 -> a
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
org.mariotaku.twidere.activity.DraftsActivity$DraftItem -> org.mariotaku.twidere.activity.h:
    long[] account_ids -> a
    long in_reply_to_status_id -> b
    java.lang.String text -> c
    java.lang.String media_uri -> d
    org.mariotaku.twidere.activity.DraftsActivity this$0 -> e
org.mariotaku.twidere.activity.DraftsActivity$DraftsAdapter -> org.mariotaku.twidere.activity.i:
    java.lang.String[] mFrom -> m
    int[] mTo -> n
    float mTextSize -> o
    void bindView(android.view.View,android.content.Context,android.database.Cursor) -> a
    void setTextSize(float) -> a
org.mariotaku.twidere.activity.EditAPIActivity -> org.mariotaku.twidere.activity.EditAPIActivity:
    android.widget.EditText mEditRestBaseURL -> m
    android.widget.EditText mEditSearchBaseURL -> n
    android.widget.EditText mEditUploadBaseURL -> o
    android.widget.EditText mEditSigningRESTBaseURL -> p
    android.widget.EditText mEditOAuthBaseURL -> q
    android.widget.EditText mEditSigningOAuthBaseURL -> r
    android.widget.RadioGroup mEditAuthType -> s
    android.widget.RadioButton mButtonOAuth -> t
    android.widget.RadioButton mButtonxAuth -> u
    android.widget.RadioButton mButtonBasic -> v
    android.widget.RadioButton mButtonTwipOMode -> w
    android.widget.Button mSaveButton -> x
    java.lang.String mRestBaseURL -> y
    java.lang.String mSearchBaseURL -> z
    java.lang.String mUploadBaseURL -> A
    java.lang.String mSigningRESTBaseURL -> B
    java.lang.String mOAuthBaseURL -> C
    java.lang.String mSigningOAuthBaseURL -> D
    android.widget.TextView mAdvancedAPIConfigLabel -> E
    int mAuthType -> F
    void onCheckedChanged(android.widget.RadioGroup,int) -> onCheckedChanged
    void onClick(android.view.View) -> onClick
    void onCreate(android.os.Bundle) -> onCreate
    void onSaveInstanceState(android.os.Bundle) -> onSaveInstanceState
    void saveEditedText() -> h
    boolean isThemeChanged() -> f
    void onResume() -> onResume
    void setTheme() -> g
org.mariotaku.twidere.activity.FileSaveAsActivity -> org.mariotaku.twidere.activity.FileSaveAsActivity:
    java.io.File mCurrentDirectory -> m
    java.io.File mSourceFile -> n
    android.widget.ListView mListView -> o
    org.mariotaku.twidere.activity.FileSaveAsActivity$DirectoriesAdapter mAdapter -> p
    android.widget.EditText mEditFileName -> q
    java.lang.String mDefaultFileName -> r
    java.lang.String mFileName -> s
    android.support.v4.app.DialogFragment mOverwriteComfirmFragment -> t
    android.support.v4.app.DialogFragment mSaveProgressFragment -> u
    org.mariotaku.twidere.activity.FileSaveAsActivity$SaveFileTask mSaveFileTask -> v
    android.text.InputFilter VALID_FILENAME_FILTER -> w
    void afterTextChanged(android.text.Editable) -> afterTextChanged
    void beforeTextChanged(java.lang.CharSequence,int,int,int) -> beforeTextChanged
    void onBackPressed() -> onBackPressed
    void onClick(android.content.DialogInterface,int) -> onClick
    void onCreate(android.os.Bundle) -> onCreate
    android.support.v4.content.Loader onCreateLoader(int,android.os.Bundle) -> a
    boolean onCreateOptionsMenu(android.view.Menu) -> onCreateOptionsMenu
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
    void onLoaderReset(android.support.v4.content.Loader) -> a
    void onLoadFinished(android.support.v4.content.Loader,java.util.List) -> a
    boolean onOptionsItemSelected(android.view.MenuItem) -> onOptionsItemSelected
    boolean onPrepareOptionsMenu(android.view.Menu) -> onPrepareOptionsMenu
    void onTextChanged(java.lang.CharSequence,int,int,int) -> onTextChanged
    void onSaveInstanceState(android.os.Bundle) -> onSaveInstanceState
    void onLoadFinished(android.support.v4.content.Loader,java.lang.Object) -> a
    android.support.v4.app.DialogFragment access$1(org.mariotaku.twidere.activity.FileSaveAsActivity) -> a
org.mariotaku.twidere.activity.FileSaveAsActivity$1 -> org.mariotaku.twidere.activity.j:
    java.lang.CharSequence filter(java.lang.CharSequence,int,int,android.text.Spanned,int,int) -> filter
org.mariotaku.twidere.activity.FileSaveAsActivity$DirectoriesAdapter -> org.mariotaku.twidere.activity.k:
    android.view.LayoutInflater mInflater -> a
    android.content.Context mContext -> b
    java.util.List mData -> c
    int getCount() -> getCount
    java.io.File getItem(int) -> a
    long getItemId(int) -> getItemId
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
    void setData(java.util.List) -> a
    java.lang.Object getItem(int) -> getItem
org.mariotaku.twidere.activity.FileSaveAsActivity$DirectoriesLoader -> org.mariotaku.twidere.activity.l:
    java.io.File path -> f
    java.util.Comparator NAME_COMPARATOR -> g
    java.util.List loadInBackground() -> f
    void onStartLoading() -> g
    void onStopLoading() -> h
    java.lang.Object loadInBackground() -> d
org.mariotaku.twidere.activity.FileSaveAsActivity$DirectoriesLoader$1 -> org.mariotaku.twidere.activity.m:
    int compare(java.io.File,java.io.File) -> a
    int compare(java.lang.Object,java.lang.Object) -> compare
org.mariotaku.twidere.activity.FileSaveAsActivity$OverwriteComfirmFragment -> org.mariotaku.twidere.activity.n:
    android.app.Dialog onCreateDialog(android.os.Bundle) -> c
org.mariotaku.twidere.activity.FileSaveAsActivity$SaveFileTask -> org.mariotaku.twidere.activity.o:
    java.io.File src -> b
    java.io.File dst -> c
    org.mariotaku.twidere.activity.FileSaveAsActivity this$0 -> a
    java.lang.Boolean doInBackground(java.lang.Void[]) -> a
    void onCancelled() -> onCancelled
    void onPostExecute(java.lang.Boolean) -> a
    void onPreExecute() -> onPreExecute
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
org.mariotaku.twidere.activity.FileSaveAsActivity$SaveProgressFragment -> org.mariotaku.twidere.activity.p:
    android.app.Dialog onCreateDialog(android.os.Bundle) -> c
org.mariotaku.twidere.activity.FiltersActivity -> org.mariotaku.twidere.activity.FiltersActivity:
    org.mariotaku.actionbarcompat.ActionBar mActionBar -> m
    android.widget.CompoundButton mToggle -> n
    android.content.SharedPreferences mPrefs -> o
    android.widget.ArrayAdapter mAdapter -> p
    android.widget.Spinner mSpinner -> q
    void onCheckedChanged(android.widget.CompoundButton,boolean) -> onCheckedChanged
    void onCreate(android.os.Bundle) -> onCreate
    boolean onCreateOptionsMenu(android.view.Menu) -> onCreateOptionsMenu
    void onItemSelected(android.widget.AdapterView,android.view.View,int,long) -> onItemSelected
    void onNothingSelected(android.widget.AdapterView) -> onNothingSelected
    boolean onOptionsItemSelected(android.view.MenuItem) -> onOptionsItemSelected
org.mariotaku.twidere.activity.FiltersActivity$TabSpec -> org.mariotaku.twidere.activity.q:
    java.lang.Class cls -> a
    java.lang.String name -> b
    java.lang.String toString() -> toString
org.mariotaku.twidere.activity.HomeActivity -> org.mariotaku.twidere.activity.HomeActivity:
    org.mariotaku.twidere.view.ExtendedViewPager mViewPager -> m
    android.content.SharedPreferences mPreferences -> n
    org.mariotaku.actionbarcompat.ActionBar mActionBar -> o
    android.widget.ProgressBar mProgress -> p
    org.mariotaku.twidere.adapter.TabsAdapter mAdapter -> q
    android.widget.ImageButton mComposeButton -> r
    org.mariotaku.twidere.util.ServiceInterface mInterface -> s
    org.mariotaku.twidere.view.TabPageIndicator mIndicator -> t
    android.content.BroadcastReceiver mStateReceiver -> u
    boolean mProgressBarIndeterminateVisible -> v
    boolean mIsNavigateToDefaultAccount -> w
    boolean mStateSaved -> x
    boolean checkDefaultAccountSet() -> j
    boolean isDualPaneMode() -> k
    void onActivityResult(int,int,android.content.Intent) -> onActivityResult
    void onBackStackChanged() -> a
    void onClick(android.view.View) -> onClick
    void onCreate(android.os.Bundle) -> onCreate
    boolean onCreateOptionsMenu(android.view.Menu) -> onCreateOptionsMenu
    void onDestroy() -> onDestroy
    boolean onOptionsItemSelected(android.view.MenuItem) -> onOptionsItemSelected
    void onPostCreate(android.os.Bundle) -> onPostCreate
    boolean onPrepareOptionsMenu(android.view.Menu) -> onPrepareOptionsMenu
    void onResume() -> onResume
    void onStart() -> onStart
    void onStop() -> onStop
    void setPagingEnabled(boolean) -> c
    void setSupportProgressBarIndeterminateVisibility(boolean) -> b
    void showAtPane(int,android.support.v4.app.Fragment,boolean) -> a
    void onNewIntent(android.content.Intent) -> onNewIntent
    void onPostResume() -> onPostResume
    void onSaveInstanceState(android.os.Bundle) -> onSaveInstanceState
    void navigateToTop() -> l
    boolean access$0(org.mariotaku.twidere.activity.HomeActivity) -> a
org.mariotaku.twidere.activity.HomeActivity$1 -> org.mariotaku.twidere.activity.r:
    org.mariotaku.twidere.activity.HomeActivity this$0 -> a
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
org.mariotaku.twidere.activity.ImageViewerActivity -> org.mariotaku.twidere.activity.ImageViewerActivity:
    org.mariotaku.twidere.view.ImageViewer mImageView -> m
    org.mariotaku.twidere.activity.ImageViewerActivity$ImageLoader mImageLoader -> n
    android.view.View mProgress -> o
    android.widget.ImageButton mRefreshStopSaveButton -> p
    boolean mImageLoading -> q
    boolean mImageLoaded -> r
    java.io.File mImageFile -> s
    android.os.Handler mErrorHandler -> t
    void onClick(android.view.View) -> onClick
    void onCreate(android.os.Bundle) -> onCreate
    void onDestroy() -> onDestroy
    void loadImage() -> f
    void saveImage() -> g
    void stopLoading() -> h
    void access$0(org.mariotaku.twidere.activity.ImageViewerActivity,boolean) -> a
    boolean access$1(org.mariotaku.twidere.activity.ImageViewerActivity) -> a
    android.widget.ImageButton access$2(org.mariotaku.twidere.activity.ImageViewerActivity) -> b
    android.view.View access$3(org.mariotaku.twidere.activity.ImageViewerActivity) -> c
    android.os.Handler access$4(org.mariotaku.twidere.activity.ImageViewerActivity) -> d
    void access$5(org.mariotaku.twidere.activity.ImageViewerActivity,boolean) -> b
    void access$6(org.mariotaku.twidere.activity.ImageViewerActivity,java.io.File) -> a
org.mariotaku.twidere.activity.ImageViewerActivity$1 -> org.mariotaku.twidere.activity.s:
    org.mariotaku.twidere.activity.ImageViewerActivity this$0 -> a
    void handleMessage(android.os.Message) -> handleMessage
org.mariotaku.twidere.activity.ImageViewerActivity$ImageLoader -> org.mariotaku.twidere.activity.t:
    android.net.Uri uri -> b
    org.mariotaku.twidere.view.ImageViewer image_view -> c
    boolean ignore_ssl_error -> d
    java.io.File mCacheDir -> e
    android.content.SharedPreferences prefs -> f
    org.mariotaku.twidere.activity.ImageViewerActivity this$0 -> a
    void cancel() -> a
    android.graphics.Bitmap doInBackground(java.lang.Void[]) -> a
    void onPostExecute(android.graphics.Bitmap) -> a
    void onPreExecute() -> onPreExecute
    void copyStream(java.io.InputStream,java.io.OutputStream) -> a
    android.graphics.Bitmap decodeFile(java.io.File) -> a
    java.lang.String getURLFilename(java.net.URL) -> a
    void init() -> b
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
org.mariotaku.twidere.activity.LicenseActivity -> org.mariotaku.twidere.activity.LicenseActivity:
    void onCreate(android.os.Bundle) -> onCreate
    boolean isThemeChanged() -> f
    void onResume() -> onResume
    void setTheme() -> g
org.mariotaku.twidere.activity.LinkHandlerActivity -> org.mariotaku.twidere.activity.LinkHandlerActivity:
    android.content.UriMatcher URI_MATCHER -> m
    android.support.v4.app.Fragment mFragment -> n
    void onCreate(android.os.Bundle) -> onCreate
    boolean onOptionsItemSelected(android.view.MenuItem) -> onOptionsItemSelected
    boolean setFragment(android.net.Uri) -> a
org.mariotaku.twidere.activity.MapViewerActivity -> org.mariotaku.twidere.activity.MapViewerActivity:
    android.support.v4.app.Fragment mFragment -> m
    void onClick(android.view.View) -> onClick
    void onCreate(android.os.Bundle) -> onCreate
    boolean isNativeMapSupported() -> f
org.mariotaku.twidere.activity.NativeMapActivity -> org.mariotaku.twidere.activity.NativeMapActivity:
    com.google.android.maps.MapView mMapView -> a
    boolean isRouteDisplayed() -> isRouteDisplayed
    void onCreate(android.os.Bundle) -> onCreate
org.mariotaku.twidere.activity.NativeMapActivity$1 -> org.mariotaku.twidere.activity.u:
    org.mariotaku.twidere.activity.NativeMapActivity this$0 -> a
org.mariotaku.twidere.activity.NativeMapActivity$Itemization -> org.mariotaku.twidere.activity.v:
    java.util.ArrayList mOverlays -> a
    void addOverlay(com.google.android.maps.OverlayItem) -> a
    int size() -> size
    com.google.android.maps.OverlayItem createItem(int) -> createItem
org.mariotaku.twidere.activity.SearchActivity -> org.mariotaku.twidere.activity.SearchActivity:
    org.mariotaku.actionbarcompat.ActionBar mActionBar -> m
    android.widget.ArrayAdapter mAdapter -> n
    android.widget.Spinner mSpinner -> o
    android.net.Uri mData -> p
    android.os.Bundle mArguments -> q
    void onCreate(android.os.Bundle) -> onCreate
    boolean onCreateOptionsMenu(android.view.Menu) -> onCreateOptionsMenu
    void onItemSelected(android.widget.AdapterView,android.view.View,int,long) -> onItemSelected
    void onNothingSelected(android.widget.AdapterView) -> onNothingSelected
    boolean onOptionsItemSelected(android.view.MenuItem) -> onOptionsItemSelected
org.mariotaku.twidere.activity.SearchActivity$TabSpec -> org.mariotaku.twidere.activity.w:
    java.lang.Class cls -> a
    java.lang.String name -> b
    java.lang.String toString() -> toString
org.mariotaku.twidere.activity.SelectAccountActivity -> org.mariotaku.twidere.activity.SelectAccountActivity:
    android.widget.ListView mListView -> m
    android.support.v4.widget.SimpleCursorAdapter mAdapter -> n
    android.database.Cursor mCursor -> o
    java.util.List mActivatedUsersId -> p
    android.database.Cursor getAccountsCursor() -> h
    void onBackPressed() -> onBackPressed
    void onClick(android.view.View) -> onClick
    void onCreate(android.os.Bundle) -> onCreate
    void onDestroy() -> onDestroy
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
    void onSaveInstanceState(android.os.Bundle) -> onSaveInstanceState
    boolean isThemeChanged() -> f
    void onResume() -> onResume
    void setTheme() -> g
org.mariotaku.twidere.activity.SetColorActivity -> org.mariotaku.twidere.activity.SetColorActivity:
    android.widget.GridView mColorsGrid -> o
    int mCustomizedColor -> p
    java.util.List mColors -> m
    org.mariotaku.twidere.fragment.ColorPickerDialogFragment mFragment -> n
    void onColorSelected(int) -> b
    void onCreate(android.os.Bundle) -> onCreate
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
    void onSaveInstanceState(android.os.Bundle) -> onSaveInstanceState
    void finishSelecting(int) -> c
    void showDialog() -> h
    boolean isThemeChanged() -> f
    void onResume() -> onResume
    void setTheme() -> g
    int access$4(org.mariotaku.twidere.activity.SetColorActivity) -> a
org.mariotaku.twidere.activity.SetColorActivity$ColorsAdapter -> org.mariotaku.twidere.activity.x:
    android.content.Context mContext -> b
    org.mariotaku.twidere.activity.SetColorActivity this$0 -> a
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
org.mariotaku.twidere.activity.SettingsActivity -> org.mariotaku.twidere.activity.SettingsActivity:
    void onCreate(android.os.Bundle) -> onCreate
    boolean onOptionsItemSelected(android.view.MenuItem) -> onOptionsItemSelected
    boolean onPreferenceChange(android.preference.Preference,java.lang.Object) -> onPreferenceChange
    boolean onPreferenceClick(android.preference.Preference) -> onPreferenceClick
    boolean isThemeChanged() -> b
    org.mariotaku.twidere.app.TwidereApplication getTwidereApplication() -> c
    void onResume() -> onResume
    void setTheme() -> d
org.mariotaku.twidere.activity.TwitterLoginActivity -> org.mariotaku.twidere.activity.TwitterLoginActivity:
    java.lang.String mRestBaseURL -> m
    java.lang.String mSearchBaseURL -> n
    java.lang.String mUploadBaseURL -> o
    java.lang.String mSigningRESTBaseURL -> p
    java.lang.String mOAuthBaseURL -> q
    java.lang.String mSigningOAuthBaseURL -> r
    java.lang.String mUsername -> s
    java.lang.String mPassword -> t
    int mAuthType -> u
    int mUserColor -> v
    boolean mUserColorSet -> w
    android.widget.EditText mEditUsername -> x
    android.widget.EditText mEditPassword -> y
    android.widget.Button mSignInButton -> z
    android.widget.Button mSignUpButton -> A
    android.widget.LinearLayout mSigninSignup -> B
    android.widget.LinearLayout mUsernamePassword -> C
    android.widget.ImageButton mSetColorButton -> D
    org.mariotaku.twidere.activity.TwitterLoginActivity$AbstractTask mTask -> E
    twitter4j.auth.RequestToken mRequestToken -> F
    long mLoggedId -> G
    void afterTextChanged(android.text.Editable) -> afterTextChanged
    void beforeTextChanged(java.lang.CharSequence,int,int,int) -> beforeTextChanged
    void onActivityResult(int,int,android.content.Intent) -> onActivityResult
    void onClick(android.view.View) -> onClick
    void onCreate(android.os.Bundle) -> onCreate
    boolean onCreateOptionsMenu(android.view.Menu) -> onCreateOptionsMenu
    void onDestroy() -> onDestroy
    boolean onOptionsItemSelected(android.view.MenuItem) -> onOptionsItemSelected
    void onSaveInstanceState(android.os.Bundle) -> onSaveInstanceState
    void onTextChanged(java.lang.CharSequence,int,int,int) -> onTextChanged
    void analyseUserProfileColor(java.lang.String) -> a
    void saveEditedText() -> j
    twitter4j.conf.ConfigurationBuilder setAPI(twitter4j.conf.ConfigurationBuilder) -> a
    void setSignInButton() -> k
    void setUserColorButton() -> l
    void access$0(org.mariotaku.twidere.activity.TwitterLoginActivity,org.mariotaku.twidere.activity.TwitterLoginActivity$AbstractTask) -> a
    android.widget.EditText access$1(org.mariotaku.twidere.activity.TwitterLoginActivity) -> a
    android.widget.EditText access$2(org.mariotaku.twidere.activity.TwitterLoginActivity) -> b
    android.widget.Button access$3(org.mariotaku.twidere.activity.TwitterLoginActivity) -> c
    android.widget.Button access$4(org.mariotaku.twidere.activity.TwitterLoginActivity) -> d
    android.widget.ImageButton access$5(org.mariotaku.twidere.activity.TwitterLoginActivity) -> e
    twitter4j.conf.ConfigurationBuilder access$6(org.mariotaku.twidere.activity.TwitterLoginActivity,twitter4j.conf.ConfigurationBuilder) -> a
    boolean access$7(org.mariotaku.twidere.activity.TwitterLoginActivity) -> f
    void access$8(org.mariotaku.twidere.activity.TwitterLoginActivity,java.lang.String) -> a
    void access$9(org.mariotaku.twidere.activity.TwitterLoginActivity,long) -> a
    long access$10(org.mariotaku.twidere.activity.TwitterLoginActivity) -> g
    int access$11(org.mariotaku.twidere.activity.TwitterLoginActivity) -> h
    java.lang.String access$12(org.mariotaku.twidere.activity.TwitterLoginActivity) -> i
    java.lang.String access$13(org.mariotaku.twidere.activity.TwitterLoginActivity) -> j
    void access$14(org.mariotaku.twidere.activity.TwitterLoginActivity,twitter4j.auth.RequestToken) -> a
    twitter4j.auth.RequestToken access$15(org.mariotaku.twidere.activity.TwitterLoginActivity) -> k
    java.lang.String access$16(org.mariotaku.twidere.activity.TwitterLoginActivity) -> l
    java.lang.String access$17(org.mariotaku.twidere.activity.TwitterLoginActivity) -> m
    int access$18(org.mariotaku.twidere.activity.TwitterLoginActivity) -> n
    void access$19(org.mariotaku.twidere.activity.TwitterLoginActivity,int) -> a
org.mariotaku.twidere.activity.TwitterLoginActivity$AbstractTask -> org.mariotaku.twidere.activity.y:
    org.mariotaku.twidere.activity.TwitterLoginActivity this$0 -> a
    void onPostExecute(java.lang.Object) -> onPostExecute
    void onPreExecute() -> onPreExecute
org.mariotaku.twidere.activity.TwitterLoginActivity$CallbackAuthTask -> org.mariotaku.twidere.activity.z:
    twitter4j.auth.RequestToken requestToken -> c
    java.lang.String oauthVerifier -> d
    org.mariotaku.twidere.activity.TwitterLoginActivity this$0 -> b
    org.mariotaku.twidere.activity.TwitterLoginActivity$CallbackAuthTask$Response doInBackground(java.lang.Void[]) -> a
    void onPostExecute(org.mariotaku.twidere.activity.TwitterLoginActivity$CallbackAuthTask$Response) -> a
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
org.mariotaku.twidere.activity.TwitterLoginActivity$CallbackAuthTask$Response -> org.mariotaku.twidere.activity.aa:
    boolean succeed -> a
    boolean is_logged_in -> b
    twitter4j.TwitterException exception -> c
    org.mariotaku.twidere.activity.TwitterLoginActivity$CallbackAuthTask this$1 -> d
org.mariotaku.twidere.activity.TwitterLoginActivity$LoginTask -> org.mariotaku.twidere.activity.ab:
    org.mariotaku.twidere.activity.TwitterLoginActivity this$0 -> b
    org.mariotaku.twidere.activity.TwitterLoginActivity$LoginTask$Response doInBackground(java.lang.Void[]) -> a
    void onPostExecute(org.mariotaku.twidere.activity.TwitterLoginActivity$LoginTask$Response) -> a
    org.mariotaku.twidere.activity.TwitterLoginActivity$LoginTask$Response authBasic() -> a
    org.mariotaku.twidere.activity.TwitterLoginActivity$LoginTask$Response authOAuth() -> b
    org.mariotaku.twidere.activity.TwitterLoginActivity$LoginTask$Response authTwipOMode() -> c
    org.mariotaku.twidere.activity.TwitterLoginActivity$LoginTask$Response authxAuth() -> d
    org.mariotaku.twidere.activity.TwitterLoginActivity$LoginTask$Response doAuth() -> e
    java.lang.String parseString(java.lang.Object) -> a
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
org.mariotaku.twidere.activity.TwitterLoginActivity$LoginTask$Response -> org.mariotaku.twidere.activity.ac:
    boolean open_browser -> a
    boolean already_logged_in -> b
    boolean succeed -> c
    twitter4j.auth.RequestToken request_token -> d
    twitter4j.TwitterException exception -> e
    org.mariotaku.twidere.activity.TwitterLoginActivity$LoginTask this$1 -> f
org.mariotaku.twidere.adapter.DirectMessagesCursorAdapter -> org.mariotaku.twidere.a.a:
    boolean mDisplayProfileImage -> m
    boolean mDisplayName -> n
    boolean mShowLastItemAsGap -> o
    org.mariotaku.twidere.util.LazyImageLoader mImageLoader -> p
    float mTextSize -> q
    android.content.Context mContext -> r
    org.mariotaku.twidere.model.DirectMessageCursorIndices mIndices -> s
    void bindView(android.view.View,android.content.Context,android.database.Cursor) -> a
    org.mariotaku.twidere.model.ParcelableDirectMessage findItem(long) -> a
    long findItemIdByPosition(int) -> a
    android.database.Cursor getItem(int) -> b
    android.view.View newView(android.content.Context,android.database.Cursor,android.view.ViewGroup) -> a
    void setDisplayName(boolean) -> a
    void setDisplayProfileImage(boolean) -> b
    void setShowLastItemAsGap(boolean) -> c
    void setTextSize(float) -> a
    android.database.Cursor swapCursor(android.database.Cursor) -> b
    java.lang.Object getItem(int) -> getItem
org.mariotaku.twidere.adapter.ParcelableStatusesAdapter -> org.mariotaku.twidere.a.b:
    boolean mDisplayProfileImage -> a
    boolean mDisplayName -> b
    boolean mShowAccountColor -> c
    boolean mShowLastItemAsGap -> d
    org.mariotaku.twidere.util.LazyImageLoader mImageLoader -> e
    float mTextSize -> f
    android.content.Context mContext -> g
    org.mariotaku.twidere.model.ParcelableStatus findItem(long) -> a
    org.mariotaku.twidere.model.ParcelableStatus findItemByStatusId(long) -> b
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
    void setData(java.util.List) -> a
    void setData(java.util.List,boolean) -> a
    void setDisplayName(boolean) -> a
    void setDisplayProfileImage(boolean) -> b
    void setShowLastItemAsGap(boolean) -> c
    void setTextSize(float) -> a
org.mariotaku.twidere.adapter.StatusesCursorAdapter -> org.mariotaku.twidere.a.c:
    boolean mDisplayProfileImage -> m
    boolean mDisplayName -> n
    boolean mShowAccountColor -> o
    boolean mShowLastItemAsGap -> p
    org.mariotaku.twidere.util.LazyImageLoader mImageLoader -> q
    float mTextSize -> r
    android.content.Context mContext -> s
    org.mariotaku.twidere.model.StatusCursorIndices mIndices -> t
    void bindView(android.view.View,android.content.Context,android.database.Cursor) -> a
    org.mariotaku.twidere.model.ParcelableStatus findItem(long) -> a
    long findItemIdByPosition(int) -> a
    int findItemPositionByStatusId(long) -> b
    android.database.Cursor getItem(int) -> b
    android.view.View newView(android.content.Context,android.database.Cursor,android.view.ViewGroup) -> a
    void setDisplayName(boolean) -> a
    void setDisplayProfileImage(boolean) -> b
    void setShowAccountColor(boolean) -> d
    void setShowLastItemAsGap(boolean) -> c
    void setTextSize(float) -> a
    android.database.Cursor swapCursor(android.database.Cursor) -> b
    java.lang.Object getItem(int) -> getItem
org.mariotaku.twidere.adapter.TabsAdapter -> org.mariotaku.twidere.a.d:
    java.util.ArrayList mTabsInfo -> a
    android.content.Context mContext -> b
    void addTab(java.lang.Class,android.os.Bundle,java.lang.String,java.lang.Integer) -> a
    int getCount() -> b
    java.lang.Integer getIcon(int) -> b
    android.support.v4.app.Fragment getItem(int) -> a
    java.lang.String getTitle(int) -> c
    void onPageReselected(int) -> d
    void onPageSelected(int) -> e
org.mariotaku.twidere.adapter.TabsAdapter$TabInfo -> org.mariotaku.twidere.a.e:
    java.lang.String name -> b
    java.lang.Integer icon -> c
    java.lang.Class cls -> d
    android.os.Bundle args -> e
    org.mariotaku.twidere.adapter.TabsAdapter this$0 -> a
    java.lang.Integer access$0(org.mariotaku.twidere.adapter.TabsAdapter$TabInfo) -> a
    java.lang.Class access$1(org.mariotaku.twidere.adapter.TabsAdapter$TabInfo) -> b
    android.os.Bundle access$2(org.mariotaku.twidere.adapter.TabsAdapter$TabInfo) -> c
    java.lang.String access$3(org.mariotaku.twidere.adapter.TabsAdapter$TabInfo) -> d
org.mariotaku.twidere.adapter.UserAutoCompleteAdapter -> org.mariotaku.twidere.a.f:
    android.database.Cursor mCursor -> m
    android.content.ContentResolver mResolver -> n
    org.mariotaku.twidere.util.LazyImageLoader mImageLoader -> o
    java.lang.String[] FROM -> p
    int[] TO -> q
    int mProfileImageUrlIdx -> r
    int mScreenNameIdx -> s
    boolean mCursorClosed -> t
    void bindView(android.view.View,android.content.Context,android.database.Cursor) -> a
    void changeCursor(android.database.Cursor) -> a
    void closeCursor() -> d
    java.lang.CharSequence convertToString(android.database.Cursor) -> c
    boolean isCursorClosed() -> e
    android.database.Cursor runQueryOnBackgroundThread(java.lang.CharSequence) -> a
org.mariotaku.twidere.adapter.UsersAdapter -> org.mariotaku.twidere.a.g:
    org.mariotaku.twidere.util.LazyImageLoader mImageLoader -> a
    boolean mDisplayProfileImage -> b
    boolean mShowLastItemAsGap -> c
    boolean mDisplayName -> d
    float mTextSize -> e
    org.mariotaku.twidere.model.ParcelableUser findItemByUserId(long) -> a
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
    boolean isGap(int) -> a
    void setData(java.util.List) -> a
    void setData(java.util.List,boolean) -> a
    void setDisplayName(boolean) -> a
    void setDisplayProfileImage(boolean) -> b
    void setShowLastItemAsGap(boolean) -> c
    void setTextSize(float) -> a
org.mariotaku.twidere.app.TwidereApplication -> org.mariotaku.twidere.app.TwidereApplication:
    org.mariotaku.twidere.util.LazyImageLoader mProfileImageLoader -> a
    org.mariotaku.twidere.util.AsyncTaskManager mAsyncTaskManager -> b
    org.mariotaku.twidere.app.TwidereApplication$ClearCacheTask mClearCacheTask -> c
    org.mariotaku.twidere.util.MemCache mMemCache -> d
    void clearCache() -> a
    org.mariotaku.twidere.util.AsyncTaskManager getAsyncTaskManager() -> b
    org.mariotaku.twidere.util.MemCache getMemCache() -> c
    org.mariotaku.twidere.util.LazyImageLoader getProfileImageLoader() -> d
    org.mariotaku.twidere.util.ServiceInterface getServiceInterface() -> e
    void onLowMemory() -> onLowMemory
org.mariotaku.twidere.app.TwidereApplication$ClearCacheTask -> org.mariotaku.twidere.app.a:
    android.content.Context context -> a
    java.lang.Void doInBackground(java.lang.Void[]) -> a
    void deleteRecursive(java.io.File) -> a
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
org.mariotaku.twidere.fragment.AccountsFragment -> org.mariotaku.twidere.b.a:
    android.widget.ListView mListView -> V
    int mSelectedColor -> W
    long mSelectedUserId -> X
    android.content.ContentResolver mResolver -> Y
    org.mariotaku.popupmenu.PopupMenu mPopupMenu -> Z
    boolean mActivityFirstCreated -> aa
    android.database.Cursor mCursor -> ab
    org.mariotaku.twidere.fragment.AccountsFragment$AccountsAdapter mAdapter -> ac
    android.content.BroadcastReceiver mStatusReceiver -> ad
    android.content.SharedPreferences mPreferences -> ae
    void onActivityCreated(android.os.Bundle) -> d
    void onActivityResult(int,int,android.content.Intent) -> a
    void onCreate(android.os.Bundle) -> a
    android.support.v4.content.Loader onCreateLoader(int,android.os.Bundle) -> a
    android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle) -> a
    void onDestroy() -> r
    boolean onItemLongClick(android.widget.AdapterView,android.view.View,int,long) -> onItemLongClick
    void onListItemClick(android.widget.ListView,android.view.View,int,long) -> a
    void onLoaderReset(android.support.v4.content.Loader) -> a
    void onLoadFinished(android.support.v4.content.Loader,android.database.Cursor) -> a
    boolean onMenuItemClick(android.view.MenuItem) -> a
    void onStart() -> c
    void onStop() -> d
    boolean isDefaultAccountValid() -> b
    void setDefaultAccount(long) -> a
    void onLoadFinished(android.support.v4.content.Loader,java.lang.Object) -> a
org.mariotaku.twidere.fragment.AccountsFragment$1 -> org.mariotaku.twidere.b.b:
    org.mariotaku.twidere.fragment.AccountsFragment this$0 -> a
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
org.mariotaku.twidere.fragment.AccountsFragment$AccountsAdapter -> org.mariotaku.twidere.b.c:
    org.mariotaku.twidere.util.LazyImageLoader mImageLoader -> m
    android.content.SharedPreferences mPreferences -> n
    int mUserColorIdx -> o
    int mProfileImageIdx -> p
    int mUserIdIdx -> q
    long mDefaultAccountId -> r
    void bindView(android.view.View,android.content.Context,android.database.Cursor) -> a
    android.view.View newView(android.content.Context,android.database.Cursor,android.view.ViewGroup) -> a
    void notifyDataSetChanged() -> notifyDataSetChanged
    android.database.Cursor swapCursor(android.database.Cursor) -> b
org.mariotaku.twidere.fragment.AccountsFragment$ViewHolder -> org.mariotaku.twidere.b.d:
    android.widget.ImageView profile_image -> a
    android.view.View content -> b
    android.view.View default_indicator -> c
    void setAccountColor(int) -> a
    void setIsDefault(boolean) -> a
org.mariotaku.twidere.fragment.ActivityHostFragment -> org.mariotaku.twidere.b.e:
    android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle) -> a
    java.lang.Class getActivityClass() -> a
org.mariotaku.twidere.fragment.BaseDialogFragment -> org.mariotaku.twidere.b.f:
    android.content.ContentResolver getContentResolver() -> z
org.mariotaku.twidere.fragment.BaseDirectMessagesListFragment -> org.mariotaku.twidere.b.g:
    org.mariotaku.twidere.util.ServiceInterface mServiceInterface -> V
    android.content.SharedPreferences mPreferences -> W
    org.mariotaku.twidere.util.AsyncTaskManager mAsyncTaskManager -> X
    android.os.Handler mHandler -> Y
    java.lang.Runnable mTicker -> Z
    android.widget.ListView mListView -> aa
    org.mariotaku.popupmenu.PopupMenu mPopupMenu -> ab
    org.mariotaku.twidere.model.ParcelableDirectMessage mSelectedDirectMessage -> ac
    int mRunningTaskId -> ad
    boolean mLoadMoreAutomatically -> ae
    boolean mBusy -> af
    boolean mTickerStopped -> ag
    boolean mReachedBottom -> ah
    boolean mActivityFirstCreated -> ai
    boolean mNotReachedBottomBefore -> aj
    org.mariotaku.twidere.adapter.DirectMessagesCursorAdapter mAdapter -> ak
    android.net.Uri getContentUri() -> b
    int getDirectMessages(long,long) -> a
    org.mariotaku.twidere.util.DirectMessagesAdapterInterface getListAdapter() -> z
    org.mariotaku.twidere.util.ServiceInterface getServiceInterface() -> A
    void onActivityCreated(android.os.Bundle) -> d
    void onCreate(android.os.Bundle) -> a
    android.support.v4.content.Loader onCreateLoader(int,android.os.Bundle) -> a
    void onDestroy() -> r
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
    boolean onItemLongClick(android.widget.AdapterView,android.view.View,int,long) -> onItemLongClick
    void onLoaderReset(android.support.v4.content.Loader) -> a
    void onLoadFinished(android.support.v4.content.Loader,android.database.Cursor) -> a
    boolean onMenuItemClick(android.view.MenuItem) -> a
    void onPostStart() -> B
    void onRefresh() -> b_
    void onResume() -> p
    void onScroll(android.widget.AbsListView,int,int,int) -> onScroll
    void onScrollStateChanged(android.widget.AbsListView,int) -> onScrollStateChanged
    void onStart() -> c
    void onStop() -> d
    void openStatus(org.mariotaku.twidere.model.ParcelableDirectMessage) -> a
    void onLoadFinished(android.support.v4.content.Loader,java.lang.Object) -> a
    boolean access$2(org.mariotaku.twidere.fragment.BaseDirectMessagesListFragment) -> a
    android.widget.ListView access$3(org.mariotaku.twidere.fragment.BaseDirectMessagesListFragment) -> b
    boolean access$4(org.mariotaku.twidere.fragment.BaseDirectMessagesListFragment) -> c
    android.os.Handler access$5(org.mariotaku.twidere.fragment.BaseDirectMessagesListFragment) -> d
    java.lang.Runnable access$6(org.mariotaku.twidere.fragment.BaseDirectMessagesListFragment) -> e
org.mariotaku.twidere.fragment.BaseDirectMessagesListFragment$1 -> org.mariotaku.twidere.b.h:
    org.mariotaku.twidere.fragment.BaseDirectMessagesListFragment this$0 -> a
    void run() -> run
org.mariotaku.twidere.fragment.BaseFragment -> org.mariotaku.twidere.b.i:
    org.mariotaku.twidere.app.TwidereApplication getApplication() -> a
    android.content.ContentResolver getContentResolver() -> b
    android.content.SharedPreferences getSharedPreferences(java.lang.String,int) -> a
    void registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter) -> a
    void setProgressBarIndeterminateVisibility(boolean) -> a
    void unregisterReceiver(android.content.BroadcastReceiver) -> a
org.mariotaku.twidere.fragment.BaseListFragment -> org.mariotaku.twidere.b.j:
    org.mariotaku.twidere.app.TwidereApplication getApplication() -> C
    android.content.ContentResolver getContentResolver() -> D
    android.content.SharedPreferences getSharedPreferences(java.lang.String,int) -> a
    void registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter) -> a
    void setProgressBarIndeterminateVisibility(boolean) -> f
    void unregisterReceiver(android.content.BroadcastReceiver) -> a
org.mariotaku.twidere.fragment.BaseStatusesListFragment -> org.mariotaku.twidere.b.k:
    org.mariotaku.twidere.util.ServiceInterface mServiceInterface -> V
    android.content.SharedPreferences mPreferences -> W
    org.mariotaku.twidere.util.AsyncTaskManager mAsyncTaskManager -> X
    android.os.Handler mHandler -> Y
    java.lang.Runnable mTicker -> Z
    android.widget.ListView mListView -> aa
    java.lang.Object mData -> ab
    org.mariotaku.popupmenu.PopupMenu mPopupMenu -> ac
    org.mariotaku.twidere.model.ParcelableStatus mSelectedStatus -> ad
    int mRunningTaskId -> ae
    boolean mLoadMoreAutomatically -> af
    boolean mBusy -> ag
    boolean mTickerStopped -> ah
    boolean mReachedBottom -> ai
    boolean mActivityFirstCreated -> aj
    boolean mNotReachedBottomBefore -> ak
    android.support.v4.app.Fragment mDetailFragment -> al
    java.lang.Object getData() -> b
    long[] getLastStatusIds() -> z
    org.mariotaku.twidere.util.StatusesAdapterInterface getListAdapter() -> A
    org.mariotaku.twidere.util.ServiceInterface getServiceInterface() -> B
    android.content.SharedPreferences getSharedPreferences() -> E
    int getStatuses(long[],long[]) -> a
    boolean isActivityFirstCreated() -> F
    boolean isListLoadFinished() -> G
    void onActivityCreated(android.os.Bundle) -> d
    void onCreate(android.os.Bundle) -> a
    void onDestroy() -> r
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
    boolean onItemLongClick(android.widget.AdapterView,android.view.View,int,long) -> onItemLongClick
    void onLoaderReset(android.support.v4.content.Loader) -> a
    void onLoadFinished(android.support.v4.content.Loader,java.lang.Object) -> a
    boolean onMenuItemClick(android.view.MenuItem) -> a
    void onPostStart() -> H
    void onResume() -> p
    void onScroll(android.widget.AbsListView,int,int,int) -> onScroll
    void onScrollStateChanged(android.widget.AbsListView,int) -> onScrollStateChanged
    void onStart() -> c
    void onStop() -> d
    void openStatus(org.mariotaku.twidere.model.ParcelableStatus) -> a
    boolean access$1(org.mariotaku.twidere.fragment.BaseStatusesListFragment) -> a
    android.widget.ListView access$2(org.mariotaku.twidere.fragment.BaseStatusesListFragment) -> b
    boolean access$3(org.mariotaku.twidere.fragment.BaseStatusesListFragment) -> c
    android.os.Handler access$4(org.mariotaku.twidere.fragment.BaseStatusesListFragment) -> d
    java.lang.Runnable access$5(org.mariotaku.twidere.fragment.BaseStatusesListFragment) -> e
org.mariotaku.twidere.fragment.BaseStatusesListFragment$1 -> org.mariotaku.twidere.b.l:
    org.mariotaku.twidere.fragment.BaseStatusesListFragment this$0 -> a
    void run() -> run
org.mariotaku.twidere.fragment.BaseUsersListFragment -> org.mariotaku.twidere.b.m:
    org.mariotaku.twidere.adapter.UsersAdapter mAdapter -> V
    android.content.SharedPreferences mPreferences -> W
    boolean mLoadMoreAutomatically -> X
    android.widget.ListView mListView -> Y
    long mAccountId -> Z
    java.util.ArrayList mData -> aa
    boolean mReachedBottom -> ab
    boolean mNotReachedBottomBefore -> ac
    android.support.v4.app.Fragment mDetailFragment -> ad
    boolean mAllItemsLoaded -> ae
    java.util.ArrayList getData() -> b
    android.support.v4.content.Loader newLoaderInstance() -> z
    void onActivityCreated(android.os.Bundle) -> d
    void onCreate(android.os.Bundle) -> a
    android.support.v4.content.Loader onCreateLoader(int,android.os.Bundle) -> a
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
    void onLoaderReset(android.support.v4.content.Loader) -> a
    void onLoadFinished(android.support.v4.content.Loader,java.util.List) -> a
    void onResume() -> p
    void onScroll(android.widget.AbsListView,int,int,int) -> onScroll
    void onScrollStateChanged(android.widget.AbsListView,int) -> onScrollStateChanged
    void openUserProfile(long,java.lang.String) -> a
    void onLoadFinished(android.support.v4.content.Loader,java.lang.Object) -> a
org.mariotaku.twidere.fragment.ColorPickerDialogFragment -> org.mariotaku.twidere.b.n:
    org.mariotaku.twidere.fragment.ColorPickerDialogFragment$ColorPickerDialog mDialog -> V
    org.mariotaku.twidere.fragment.ColorPickerDialogFragment$OnColorSelectedListener mListener -> W
    int mInitialColor -> X
    android.app.Dialog onCreateDialog(android.os.Bundle) -> c
    void onSaveInstanceState(android.os.Bundle) -> e
    void setInitialColor(int) -> c
    org.mariotaku.twidere.fragment.ColorPickerDialogFragment$OnColorSelectedListener access$0(org.mariotaku.twidere.fragment.ColorPickerDialogFragment) -> a
    void access$1(org.mariotaku.twidere.fragment.ColorPickerDialogFragment,int) -> a
org.mariotaku.twidere.fragment.ColorPickerDialogFragment$ColorPickerDialog -> org.mariotaku.twidere.b.o:
    org.mariotaku.twidere.view.ColorPickerView mColorPicker -> b
    org.mariotaku.twidere.fragment.ColorPickerDialogFragment this$0 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
    void onColorChanged(int) -> a
    android.graphics.Bitmap getPreviewBitmap(int) -> b
    void init(android.content.Context,int) -> a
org.mariotaku.twidere.fragment.ColorPickerDialogFragment$OnColorSelectedListener -> org.mariotaku.twidere.b.p:
    void onColorSelected(int) -> b
org.mariotaku.twidere.fragment.CursorStatusesListFragment -> org.mariotaku.twidere.b.q:
    org.mariotaku.twidere.adapter.StatusesCursorAdapter mAdapter -> V
    android.net.Uri getContentUri() -> I
    long[] getLastStatusIds() -> z
    org.mariotaku.twidere.adapter.StatusesCursorAdapter getListAdapter() -> J
    boolean isListLoadFinished() -> G
    void onActivityCreated(android.os.Bundle) -> d
    android.support.v4.content.Loader onCreateLoader(int,android.os.Bundle) -> a
    void onLoaderReset(android.support.v4.content.Loader) -> a
    void onLoadFinished(android.support.v4.content.Loader,android.database.Cursor) -> a
    void onPostStart() -> H
    void onRefresh() -> b_
    void onLoadFinished(android.support.v4.content.Loader,java.lang.Object) -> a
    void onResume() -> p
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
    void onStop() -> d
    org.mariotaku.twidere.util.ServiceInterface getServiceInterface() -> B
    void onCreate(android.os.Bundle) -> a
    void onDestroy() -> r
    boolean onMenuItemClick(android.view.MenuItem) -> a
    org.mariotaku.twidere.util.StatusesAdapterInterface getListAdapter() -> A
    void onScroll(android.widget.AbsListView,int,int,int) -> onScroll
    void onStart() -> c
    void onScrollStateChanged(android.widget.AbsListView,int) -> onScrollStateChanged
    android.content.SharedPreferences getSharedPreferences() -> E
    boolean onItemLongClick(android.widget.AdapterView,android.view.View,int,long) -> onItemLongClick
    boolean isActivityFirstCreated() -> F
org.mariotaku.twidere.fragment.DirectMessagesInboxFragment -> org.mariotaku.twidere.b.r:
    android.content.BroadcastReceiver mStatusReceiver -> V
    android.net.Uri getContentUri() -> b
    int getDirectMessages(long,long) -> a
    void onActivityCreated(android.os.Bundle) -> d
    void onPostStart() -> B
    void onStart() -> c
    void onStop() -> d
    void onLoadFinished(android.support.v4.content.Loader,android.database.Cursor) -> a
    void onResume() -> p
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
    void onLoaderReset(android.support.v4.content.Loader) -> a
    org.mariotaku.twidere.util.ServiceInterface getServiceInterface() -> A
    void onCreate(android.os.Bundle) -> a
    void onDestroy() -> r
    android.support.v4.content.Loader onCreateLoader(int,android.os.Bundle) -> a
    void onRefresh() -> b_
    boolean onMenuItemClick(android.view.MenuItem) -> a
    org.mariotaku.twidere.util.DirectMessagesAdapterInterface getListAdapter() -> z
    void onScroll(android.widget.AbsListView,int,int,int) -> onScroll
    void onScrollStateChanged(android.widget.AbsListView,int) -> onScrollStateChanged
    boolean onItemLongClick(android.widget.AdapterView,android.view.View,int,long) -> onItemLongClick
org.mariotaku.twidere.fragment.DirectMessagesInboxFragment$1 -> org.mariotaku.twidere.b.s:
    org.mariotaku.twidere.fragment.DirectMessagesInboxFragment this$0 -> a
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
org.mariotaku.twidere.fragment.DirectMessagesOutboxFragment -> org.mariotaku.twidere.b.t:
    android.content.BroadcastReceiver mStatusReceiver -> V
    android.net.Uri getContentUri() -> b
    int getDirectMessages(long,long) -> a
    void onActivityCreated(android.os.Bundle) -> d
    void onPostStart() -> B
    void onStart() -> c
    void onStop() -> d
    void onLoadFinished(android.support.v4.content.Loader,android.database.Cursor) -> a
    void onResume() -> p
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
    void onLoaderReset(android.support.v4.content.Loader) -> a
    org.mariotaku.twidere.util.ServiceInterface getServiceInterface() -> A
    void onCreate(android.os.Bundle) -> a
    void onDestroy() -> r
    android.support.v4.content.Loader onCreateLoader(int,android.os.Bundle) -> a
    void onRefresh() -> b_
    boolean onMenuItemClick(android.view.MenuItem) -> a
    org.mariotaku.twidere.util.DirectMessagesAdapterInterface getListAdapter() -> z
    void onScroll(android.widget.AbsListView,int,int,int) -> onScroll
    void onScrollStateChanged(android.widget.AbsListView,int) -> onScrollStateChanged
    boolean onItemLongClick(android.widget.AdapterView,android.view.View,int,long) -> onItemLongClick
org.mariotaku.twidere.fragment.DirectMessagesOutboxFragment$1 -> org.mariotaku.twidere.b.u:
    org.mariotaku.twidere.fragment.DirectMessagesOutboxFragment this$0 -> a
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
org.mariotaku.twidere.fragment.DiscoverFragment -> org.mariotaku.twidere.b.v:
    long mAccountId -> a
    twitter4j.Twitter mTwitter -> b
    android.widget.ListView mTrendsListView -> c
    android.widget.ProgressBar mTrendsLoadingProgress -> d
    org.mariotaku.twidere.fragment.DiscoverFragment$TrendsAdapter mTrendsAdapter -> e
    android.view.LayoutInflater mInflater -> f
    android.widget.Spinner mTrendsSpinner -> g
    android.widget.ArrayAdapter mTrendsCategoriesAdapter -> h
    android.widget.ImageButton mTrendsRefreshButton -> V
    android.view.View mContentView -> W
    org.mariotaku.twidere.util.MemCache mMemCache -> X
    android.content.BroadcastReceiver mStatusReceiver -> Y
    android.widget.AdapterView$OnItemClickListener mOnTrendsClickListener -> Z
    android.os.AsyncTask mFetchTrendsTask -> aa
    void onActivityCreated(android.os.Bundle) -> d
    void onClick(android.view.View) -> onClick
    android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle) -> a
    void onItemSelected(android.widget.AdapterView,android.view.View,int,long) -> onItemSelected
    void onNothingSelected(android.widget.AdapterView) -> onNothingSelected
    void onStart() -> c
    void onStop() -> d
    void fetchTrends(int) -> c
    long access$0(org.mariotaku.twidere.fragment.DiscoverFragment) -> a
    void access$1(org.mariotaku.twidere.fragment.DiscoverFragment,twitter4j.Twitter) -> a
    twitter4j.Twitter access$2(org.mariotaku.twidere.fragment.DiscoverFragment) -> b
    android.view.View access$3(org.mariotaku.twidere.fragment.DiscoverFragment) -> c
    android.widget.ArrayAdapter access$4(org.mariotaku.twidere.fragment.DiscoverFragment) -> d
    android.widget.Spinner access$5(org.mariotaku.twidere.fragment.DiscoverFragment) -> e
    void access$6(org.mariotaku.twidere.fragment.DiscoverFragment,int) -> a
    org.mariotaku.twidere.fragment.DiscoverFragment$TrendsAdapter access$7(org.mariotaku.twidere.fragment.DiscoverFragment) -> f
    org.mariotaku.twidere.util.MemCache access$8(org.mariotaku.twidere.fragment.DiscoverFragment) -> g
    android.widget.ProgressBar access$9(org.mariotaku.twidere.fragment.DiscoverFragment) -> h
    android.widget.ListView access$10(org.mariotaku.twidere.fragment.DiscoverFragment) -> i
    android.view.LayoutInflater access$11(org.mariotaku.twidere.fragment.DiscoverFragment) -> j
org.mariotaku.twidere.fragment.DiscoverFragment$1 -> org.mariotaku.twidere.b.w:
    org.mariotaku.twidere.fragment.DiscoverFragment this$0 -> a
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
org.mariotaku.twidere.fragment.DiscoverFragment$2 -> org.mariotaku.twidere.b.x:
    org.mariotaku.twidere.fragment.DiscoverFragment this$0 -> a
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
org.mariotaku.twidere.fragment.DiscoverFragment$FetchTrendsTask -> org.mariotaku.twidere.b.y:
    int type -> b
    org.mariotaku.twidere.fragment.DiscoverFragment this$0 -> a
    java.util.List doInBackground(java.lang.Void[]) -> a
    void onPostExecute(java.util.List) -> a
    void onPreExecute() -> onPreExecute
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
org.mariotaku.twidere.fragment.DiscoverFragment$TrendsAdapter -> org.mariotaku.twidere.b.z:
    java.util.List mData -> b
    org.mariotaku.twidere.fragment.DiscoverFragment this$0 -> a
    int getCount() -> getCount
    twitter4j.Trend getItem(int) -> a
    long getItemId(int) -> getItemId
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
    void setData(java.util.List) -> a
    java.lang.Object getItem(int) -> getItem
org.mariotaku.twidere.fragment.DiscoverFragment$TrendsCategory -> org.mariotaku.twidere.b.aa:
    int type -> a
    java.lang.String name -> b
    java.lang.String toString() -> toString
org.mariotaku.twidere.fragment.FiltersFragment -> org.mariotaku.twidere.b.ab:
    org.mariotaku.twidere.fragment.FiltersFragment$FilterListAdapter mAdapter -> V
    org.mariotaku.twidere.fragment.FiltersFragment$AddItemFragment mFragment -> W
    android.content.ContentResolver mResolver -> X
    java.lang.String[] getContentColumns() -> b
    android.net.Uri getContentUri() -> z
    void onActivityCreated(android.os.Bundle) -> d
    android.support.v4.content.Loader onCreateLoader(int,android.os.Bundle) -> a
    boolean onItemLongClick(android.widget.AdapterView,android.view.View,int,long) -> onItemLongClick
    void onListItemClick(android.widget.ListView,android.view.View,int,long) -> a
    void onLoaderReset(android.support.v4.content.Loader) -> a
    void onLoadFinished(android.support.v4.content.Loader,android.database.Cursor) -> a
    boolean onOptionsItemSelected(android.view.MenuItem) -> a_
    void onLoadFinished(android.support.v4.content.Loader,java.lang.Object) -> a
org.mariotaku.twidere.fragment.FiltersFragment$AddItemFragment -> org.mariotaku.twidere.b.ac:
    org.mariotaku.twidere.fragment.FiltersFragment mFragment -> V
    android.widget.EditText mEditText -> W
    void onClick(android.content.DialogInterface,int) -> onClick
    android.app.Dialog onCreateDialog(android.os.Bundle) -> c
org.mariotaku.twidere.fragment.FiltersFragment$AddItemFragment$1 -> org.mariotaku.twidere.b.ad:
    org.mariotaku.twidere.fragment.FiltersFragment$AddItemFragment this$1 -> a
org.mariotaku.twidere.fragment.FiltersFragment$FilterListAdapter -> org.mariotaku.twidere.b.ae:
    java.lang.String[] from -> m
    int[] to -> n
org.mariotaku.twidere.fragment.FiltersFragment$FilteredKeywordsFragment -> org.mariotaku.twidere.b.af:
    java.lang.String[] getContentColumns() -> b
    android.net.Uri getContentUri() -> z
org.mariotaku.twidere.fragment.FiltersFragment$FilteredSourcesFragment -> org.mariotaku.twidere.b.ag:
    java.lang.String[] getContentColumns() -> b
    android.net.Uri getContentUri() -> z
org.mariotaku.twidere.fragment.FiltersFragment$FilteredUsersFragment -> org.mariotaku.twidere.b.ah:
    java.lang.String[] getContentColumns() -> b
    android.net.Uri getContentUri() -> z
org.mariotaku.twidere.fragment.HomeTimelineFragment -> org.mariotaku.twidere.b.ai:
    android.content.SharedPreferences mPreferences -> V
    android.content.BroadcastReceiver mStatusReceiver -> W
    boolean mShouldRestorePositoin -> X
    android.net.Uri getContentUri() -> I
    int getStatuses(long[],long[]) -> a
    void onActivityCreated(android.os.Bundle) -> d
    void onLoadFinished(android.support.v4.content.Loader,android.database.Cursor) -> a
    void onStart() -> c
    void onStop() -> d
    void onResume() -> p
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
    org.mariotaku.twidere.util.ServiceInterface getServiceInterface() -> B
    void onCreate(android.os.Bundle) -> a
    void onDestroy() -> r
    boolean onMenuItemClick(android.view.MenuItem) -> a
    void onScroll(android.widget.AbsListView,int,int,int) -> onScroll
    void onScrollStateChanged(android.widget.AbsListView,int) -> onScrollStateChanged
    android.content.SharedPreferences getSharedPreferences() -> E
    boolean onItemLongClick(android.widget.AdapterView,android.view.View,int,long) -> onItemLongClick
    boolean isActivityFirstCreated() -> F
org.mariotaku.twidere.fragment.HomeTimelineFragment$1 -> org.mariotaku.twidere.b.aj:
    org.mariotaku.twidere.fragment.HomeTimelineFragment this$0 -> a
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
org.mariotaku.twidere.fragment.ImagesPreviewFragment -> org.mariotaku.twidere.b.ak:
    android.widget.Gallery mGallery -> a
    org.mariotaku.twidere.fragment.ImagesPreviewFragment$ImagesAdapter mAdapter -> b
    java.util.List mData -> c
    android.view.View mLoadImagesIndicator -> d
    android.content.SharedPreferences mPreferences -> e
    boolean add(org.mariotaku.twidere.fragment.ImagesPreviewFragment$ImageSpec) -> a
    void onActivityCreated(android.os.Bundle) -> d
    void onClick(android.view.View) -> onClick
    android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle) -> a
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
    void show() -> z
org.mariotaku.twidere.fragment.ImagesPreviewFragment$ImageSpec -> org.mariotaku.twidere.b.al:
    java.lang.String thumbnail_link -> a
    java.lang.String image_link -> b
org.mariotaku.twidere.fragment.ImagesPreviewFragment$ImagesAdapter -> org.mariotaku.twidere.b.am:
    java.util.List mUrls -> b
    org.mariotaku.twidere.util.LazyImageLoader mImageLoader -> c
    android.view.LayoutInflater mInflater -> d
    org.mariotaku.twidere.fragment.ImagesPreviewFragment this$0 -> a
    boolean addAll(java.util.Collection) -> a
    void clear() -> a
    int getCount() -> getCount
    org.mariotaku.twidere.fragment.ImagesPreviewFragment$ImageSpec getItem(int) -> a
    long getItemId(int) -> getItemId
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
    java.lang.Object getItem(int) -> getItem
org.mariotaku.twidere.fragment.LicenseFragment -> org.mariotaku.twidere.b.an:
    void onActivityCreated(android.os.Bundle) -> d
org.mariotaku.twidere.fragment.LicenseFragment$LicenseWebViewClient -> org.mariotaku.twidere.b.ao:
    android.support.v4.app.FragmentActivity mActivity -> b
    org.mariotaku.twidere.fragment.LicenseFragment this$0 -> a
    void onPageFinished(android.webkit.WebView,java.lang.String) -> onPageFinished
    boolean shouldOverrideUrlLoading(android.webkit.WebView,java.lang.String) -> shouldOverrideUrlLoading
org.mariotaku.twidere.fragment.LocalActivityManagerFragment -> org.mariotaku.twidere.b.ap:
    android.app.LocalActivityManager mLocalActivityManager -> a
    void onCreate(android.os.Bundle) -> a
    void onDestroy() -> r
    void onPause() -> q
    void onResume() -> p
    void onSaveInstanceState(android.os.Bundle) -> e
    void onStop() -> d
    android.app.LocalActivityManager getLocalActivityManager() -> b
org.mariotaku.twidere.fragment.MentionsFragment -> org.mariotaku.twidere.b.aq:
    android.content.SharedPreferences mPreferences -> V
    android.content.BroadcastReceiver mStatusReceiver -> W
    boolean mShouldRestorePositoin -> X
    android.net.Uri getContentUri() -> I
    int getStatuses(long[],long[]) -> a
    void onActivityCreated(android.os.Bundle) -> d
    void onLoadFinished(android.support.v4.content.Loader,android.database.Cursor) -> a
    void onStart() -> c
    void onStop() -> d
    void onResume() -> p
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
    org.mariotaku.twidere.util.ServiceInterface getServiceInterface() -> B
    void onCreate(android.os.Bundle) -> a
    void onDestroy() -> r
    boolean onMenuItemClick(android.view.MenuItem) -> a
    void onScroll(android.widget.AbsListView,int,int,int) -> onScroll
    void onScrollStateChanged(android.widget.AbsListView,int) -> onScrollStateChanged
    android.content.SharedPreferences getSharedPreferences() -> E
    boolean onItemLongClick(android.widget.AdapterView,android.view.View,int,long) -> onItemLongClick
    boolean isActivityFirstCreated() -> F
org.mariotaku.twidere.fragment.MentionsFragment$1 -> org.mariotaku.twidere.b.ar:
    org.mariotaku.twidere.fragment.MentionsFragment this$0 -> a
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
org.mariotaku.twidere.fragment.NativeMapFragment -> org.mariotaku.twidere.b.as:
    java.lang.Class getActivityClass() -> a
org.mariotaku.twidere.fragment.ParcelableStatusesListFragment -> org.mariotaku.twidere.b.at:
    org.mariotaku.twidere.adapter.ParcelableStatusesAdapter mAdapter -> V
    long[] getLastStatusIds() -> z
    org.mariotaku.twidere.adapter.ParcelableStatusesAdapter getListAdapter() -> I
    int getStatuses(long[],long[]) -> a
    android.support.v4.content.Loader newLoaderInstance(android.os.Bundle) -> c
    void onActivityCreated(android.os.Bundle) -> d
    android.support.v4.content.Loader onCreateLoader(int,android.os.Bundle) -> a
    void onDataLoaded(android.support.v4.content.Loader,org.mariotaku.twidere.adapter.ParcelableStatusesAdapter) -> a
    void onDestroyView() -> e
    void onLoaderReset(android.support.v4.content.Loader) -> a
    void onLoadFinished(android.support.v4.content.Loader,java.util.List) -> a
    void onPostStart() -> H
    void onRefresh() -> b_
    void onSaveInstanceState(android.os.Bundle) -> e
    void onLoadFinished(android.support.v4.content.Loader,java.lang.Object) -> a
    void onResume() -> p
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
    void onStop() -> d
    org.mariotaku.twidere.util.ServiceInterface getServiceInterface() -> B
    void onCreate(android.os.Bundle) -> a
    void onDestroy() -> r
    boolean onMenuItemClick(android.view.MenuItem) -> a
    org.mariotaku.twidere.util.StatusesAdapterInterface getListAdapter() -> A
    void onScroll(android.widget.AbsListView,int,int,int) -> onScroll
    void onStart() -> c
    void onScrollStateChanged(android.widget.AbsListView,int) -> onScrollStateChanged
    android.content.SharedPreferences getSharedPreferences() -> E
    boolean onItemLongClick(android.widget.AdapterView,android.view.View,int,long) -> onItemLongClick
    boolean isActivityFirstCreated() -> F
org.mariotaku.twidere.fragment.PullToRefreshListFragment -> org.mariotaku.twidere.b.au:
    com.handmark.pulltorefresh.library.PullToRefreshListView mPullToRefreshListView -> V
    android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle) -> a
    void onRefresh() -> b_
    void onRefreshComplete() -> K
    void setRefreshing(boolean) -> g
    void setShowIndicator(boolean) -> h
org.mariotaku.twidere.fragment.SearchTweetsFragment -> org.mariotaku.twidere.b.av:
    boolean isListLoadFinished() -> G
    android.support.v4.content.Loader newLoaderInstance(android.os.Bundle) -> c
    void onDataLoaded(android.support.v4.content.Loader,org.mariotaku.twidere.adapter.ParcelableStatusesAdapter) -> a
    void onResume() -> p
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
    void onStop() -> d
    org.mariotaku.twidere.util.ServiceInterface getServiceInterface() -> B
    void onCreate(android.os.Bundle) -> a
    void onDestroy() -> r
    boolean onMenuItemClick(android.view.MenuItem) -> a
    void onScroll(android.widget.AbsListView,int,int,int) -> onScroll
    void onStart() -> c
    void onScrollStateChanged(android.widget.AbsListView,int) -> onScrollStateChanged
    android.content.SharedPreferences getSharedPreferences() -> E
    boolean onItemLongClick(android.widget.AdapterView,android.view.View,int,long) -> onItemLongClick
    boolean isActivityFirstCreated() -> F
org.mariotaku.twidere.fragment.SearchUsersFragment -> org.mariotaku.twidere.b.aw:
    int mPage -> V
    android.support.v4.content.Loader newLoaderInstance() -> z
    void onActivityCreated(android.os.Bundle) -> d
    void onDestroyView() -> e
    void onLoadFinished(android.support.v4.content.Loader,java.util.List) -> a
    void onSaveInstanceState(android.os.Bundle) -> e
    void onCreate(android.os.Bundle) -> a
    void onLoaderReset(android.support.v4.content.Loader) -> a
    android.support.v4.content.Loader onCreateLoader(int,android.os.Bundle) -> a
    void onScrollStateChanged(android.widget.AbsListView,int) -> onScrollStateChanged
    void onResume() -> p
    void onScroll(android.widget.AbsListView,int,int,int) -> onScroll
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
org.mariotaku.twidere.fragment.UserBlocksFragment -> org.mariotaku.twidere.b.ax:
    android.support.v4.content.Loader newLoaderInstance() -> z
    void onCreate(android.os.Bundle) -> a
    void onLoaderReset(android.support.v4.content.Loader) -> a
    android.support.v4.content.Loader onCreateLoader(int,android.os.Bundle) -> a
    void onScrollStateChanged(android.widget.AbsListView,int) -> onScrollStateChanged
    void onResume() -> p
    void onLoadFinished(android.support.v4.content.Loader,java.util.List) -> a
    void onScroll(android.widget.AbsListView,int,int,int) -> onScroll
    void onActivityCreated(android.os.Bundle) -> d
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
org.mariotaku.twidere.fragment.UserFavoritesFragment -> org.mariotaku.twidere.b.ay:
    boolean isAllItemsLoaded -> V
    boolean isListLoadFinished() -> G
    android.support.v4.content.Loader newLoaderInstance(android.os.Bundle) -> c
    void onDataLoaded(android.support.v4.content.Loader,org.mariotaku.twidere.adapter.ParcelableStatusesAdapter) -> a
    void onResume() -> p
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
    void onStop() -> d
    org.mariotaku.twidere.util.ServiceInterface getServiceInterface() -> B
    void onCreate(android.os.Bundle) -> a
    void onDestroy() -> r
    boolean onMenuItemClick(android.view.MenuItem) -> a
    void onScroll(android.widget.AbsListView,int,int,int) -> onScroll
    void onStart() -> c
    void onScrollStateChanged(android.widget.AbsListView,int) -> onScrollStateChanged
    android.content.SharedPreferences getSharedPreferences() -> E
    boolean onItemLongClick(android.widget.AdapterView,android.view.View,int,long) -> onItemLongClick
    boolean isActivityFirstCreated() -> F
org.mariotaku.twidere.fragment.UserFollowersFragment -> org.mariotaku.twidere.b.az:
    android.support.v4.content.Loader newLoaderInstance() -> z
    void onCreate(android.os.Bundle) -> a
    void onLoaderReset(android.support.v4.content.Loader) -> a
    android.support.v4.content.Loader onCreateLoader(int,android.os.Bundle) -> a
    void onScrollStateChanged(android.widget.AbsListView,int) -> onScrollStateChanged
    void onResume() -> p
    void onLoadFinished(android.support.v4.content.Loader,java.util.List) -> a
    void onScroll(android.widget.AbsListView,int,int,int) -> onScroll
    void onActivityCreated(android.os.Bundle) -> d
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
org.mariotaku.twidere.fragment.UserFriendsFragment -> org.mariotaku.twidere.b.ba:
    android.support.v4.content.Loader newLoaderInstance() -> z
    void onCreate(android.os.Bundle) -> a
    void onLoaderReset(android.support.v4.content.Loader) -> a
    android.support.v4.content.Loader onCreateLoader(int,android.os.Bundle) -> a
    void onScrollStateChanged(android.widget.AbsListView,int) -> onScrollStateChanged
    void onResume() -> p
    void onLoadFinished(android.support.v4.content.Loader,java.util.List) -> a
    void onScroll(android.widget.AbsListView,int,int,int) -> onScroll
    void onActivityCreated(android.os.Bundle) -> d
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
org.mariotaku.twidere.fragment.UserProfileFragment -> org.mariotaku.twidere.b.bb:
    org.mariotaku.twidere.util.LazyImageLoader mProfileImageLoader -> V
    android.widget.ImageView mProfileImageView -> W
    org.mariotaku.twidere.fragment.UserProfileFragment$GetFriendshipTask mFollowInfoTask -> X
    android.view.View mFollowContainer -> Y
    android.view.View mMoreOptionsContainer -> Z
    android.widget.TextView mNameView -> aa
    android.widget.TextView mScreenNameView -> ab
    android.widget.TextView mDescriptionView -> ac
    android.widget.TextView mLocationView -> ad
    android.widget.TextView mURLView -> ae
    android.widget.TextView mCreatedAtView -> af
    android.widget.TextView mTweetCount -> ag
    android.widget.TextView mFollowersCount -> ah
    android.widget.TextView mFriendsCount -> ai
    android.view.View mNameContainer -> aj
    android.view.View mProfileImageContainer -> ak
    android.view.View mDescriptionContainer -> al
    android.view.View mLocationContainer -> am
    android.view.View mURLContainer -> an
    android.view.View mTweetsContainer -> ao
    android.view.View mFollowersContainer -> ap
    android.view.View mFriendsContainer -> aq
    android.widget.ProgressBar mFollowProgress -> ar
    android.widget.ProgressBar mMoreOptionsProgress -> as
    android.widget.ProgressBar mListProgress -> at
    android.widget.Button mFollowButton -> au
    android.widget.Button mMoreOptionsButton -> av
    android.widget.Button mRetryButton -> aw
    org.mariotaku.twidere.fragment.UserProfileFragment$UserProfileActionAdapter mAdapter -> ax
    android.widget.ListView mListView -> ay
    org.mariotaku.twidere.fragment.UserProfileFragment$UserInfoTask mUserInfoTask -> az
    android.view.View mHeaderView -> aA
    long mAccountId -> aB
    twitter4j.Relationship mFriendship -> aC
    org.mariotaku.twidere.fragment.UserProfileFragment$EditTextDialogFragment mDialogFragment -> aD
    android.net.Uri mImageUri -> aE
    twitter4j.User mUser -> aF
    android.content.BroadcastReceiver mStatusReceiver -> aG
    long mUserId -> aH
    java.lang.String mScreenName -> aI
    org.mariotaku.twidere.util.ServiceInterface mService -> aJ
    org.mariotaku.popupmenu.PopupMenu mPopupMenu -> aK
    boolean mFollowInfoDisplayed -> aL
    void changeUser(long,twitter4j.User) -> a
    void getUserInfo(long,long,java.lang.String) -> a
    void onActivityCreated(android.os.Bundle) -> d
    void onActivityResult(int,int,android.content.Intent) -> a
    void onClick(android.view.View) -> onClick
    android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle) -> a
    void onDestroyView() -> e
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
    boolean onItemLongClick(android.widget.AdapterView,android.view.View,int,long) -> onItemLongClick
    boolean onLongClick(android.view.View) -> onLongClick
    boolean onMenuItemClick(android.view.MenuItem) -> a
    void onStart() -> c
    void onStop() -> d
    void setListShown(boolean) -> a
    void pickImage() -> b
    void reloadUserInfo() -> z
    void showFollowInfo(boolean) -> g
    void takePhoto() -> A
    long access$0(org.mariotaku.twidere.fragment.UserProfileFragment) -> a
    void access$1(org.mariotaku.twidere.fragment.UserProfileFragment,boolean) -> a
    void access$2(org.mariotaku.twidere.fragment.UserProfileFragment) -> b
    twitter4j.User access$3(org.mariotaku.twidere.fragment.UserProfileFragment) -> c
    org.mariotaku.twidere.util.ServiceInterface access$4(org.mariotaku.twidere.fragment.UserProfileFragment) -> d
    void access$5(org.mariotaku.twidere.fragment.UserProfileFragment,twitter4j.Relationship) -> a
    android.view.View access$6(org.mariotaku.twidere.fragment.UserProfileFragment) -> e
    android.view.View access$7(org.mariotaku.twidere.fragment.UserProfileFragment) -> f
    android.widget.Button access$8(org.mariotaku.twidere.fragment.UserProfileFragment) -> g
    twitter4j.Relationship access$9(org.mariotaku.twidere.fragment.UserProfileFragment) -> h
    android.widget.Button access$10(org.mariotaku.twidere.fragment.UserProfileFragment) -> i
    void access$11(org.mariotaku.twidere.fragment.UserProfileFragment,boolean) -> b
    android.widget.ProgressBar access$12(org.mariotaku.twidere.fragment.UserProfileFragment) -> j
    android.widget.ProgressBar access$13(org.mariotaku.twidere.fragment.UserProfileFragment) -> k
    void access$14(org.mariotaku.twidere.fragment.UserProfileFragment,org.mariotaku.twidere.fragment.UserProfileFragment$GetFriendshipTask) -> a
    android.widget.Button access$15(org.mariotaku.twidere.fragment.UserProfileFragment) -> l
    android.widget.ProgressBar access$16(org.mariotaku.twidere.fragment.UserProfileFragment) -> m
    android.widget.ListView access$17(org.mariotaku.twidere.fragment.UserProfileFragment) -> n
org.mariotaku.twidere.fragment.UserProfileFragment$1 -> org.mariotaku.twidere.b.bc:
    org.mariotaku.twidere.fragment.UserProfileFragment this$0 -> a
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
org.mariotaku.twidere.fragment.UserProfileFragment$DirectMessagesAction -> org.mariotaku.twidere.b.bd:
    org.mariotaku.twidere.fragment.UserProfileFragment this$0 -> a
    java.lang.String getName() -> a
    void onClick() -> onClick
org.mariotaku.twidere.fragment.UserProfileFragment$EditTextDialogFragment -> org.mariotaku.twidere.b.be:
    android.widget.EditText mEditText -> W
    java.lang.String mText -> X
    int mType -> Y
    java.lang.String mTitle -> Z
    long mAccountId -> aa
    org.mariotaku.twidere.fragment.UserProfileFragment this$0 -> V
    void onClick(android.content.DialogInterface,int) -> onClick
    android.app.Dialog onCreateDialog(android.os.Bundle) -> c
org.mariotaku.twidere.fragment.UserProfileFragment$EditTextDialogFragment$1 -> org.mariotaku.twidere.b.bf:
    org.mariotaku.twidere.fragment.UserProfileFragment$EditTextDialogFragment this$1 -> a
org.mariotaku.twidere.fragment.UserProfileFragment$FavoritesAction -> org.mariotaku.twidere.b.bg:
    org.mariotaku.twidere.fragment.UserProfileFragment this$0 -> a
    java.lang.String getName() -> a
    java.lang.String getSummary() -> b
    void onClick() -> onClick
org.mariotaku.twidere.fragment.UserProfileFragment$GetFriendshipTask -> org.mariotaku.twidere.b.bh:
    boolean is_my_activated_account -> b
    org.mariotaku.twidere.fragment.UserProfileFragment this$0 -> a
    org.mariotaku.twidere.fragment.UserProfileFragment$Response doInBackground(java.lang.Void[]) -> a
    void onPostExecute(org.mariotaku.twidere.fragment.UserProfileFragment$Response) -> a
    void onPreExecute() -> onPreExecute
    org.mariotaku.twidere.fragment.UserProfileFragment$Response getFriendship() -> a
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
org.mariotaku.twidere.fragment.UserProfileFragment$Response -> org.mariotaku.twidere.b.bi:
    java.lang.Object value -> a
    twitter4j.TwitterException exception -> b
    org.mariotaku.twidere.fragment.UserProfileFragment this$0 -> c
org.mariotaku.twidere.fragment.UserProfileFragment$UserAction -> org.mariotaku.twidere.b.bj:
    org.mariotaku.twidere.fragment.UserProfileFragment this$0 -> b
    java.lang.String getName() -> a
    java.lang.String getSummary() -> b
    void onClick() -> onClick
    boolean onLongClick() -> c
    java.lang.String toString() -> toString
org.mariotaku.twidere.fragment.UserProfileFragment$UserBlocksAction -> org.mariotaku.twidere.b.bk:
    org.mariotaku.twidere.fragment.UserProfileFragment this$0 -> a
    java.lang.String getName() -> a
    void onClick() -> onClick
org.mariotaku.twidere.fragment.UserProfileFragment$UserInfoTask -> org.mariotaku.twidere.b.bl:
    twitter4j.Twitter twitter -> b
    long user_id -> c
    java.lang.String screen_name -> d
    org.mariotaku.twidere.fragment.UserProfileFragment this$0 -> a
    org.mariotaku.twidere.fragment.UserProfileFragment$Response doInBackground(java.lang.Void[]) -> a
    void onCancelled() -> onCancelled
    void onPostExecute(org.mariotaku.twidere.fragment.UserProfileFragment$Response) -> a
    void onPreExecute() -> onPreExecute
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
org.mariotaku.twidere.fragment.UserProfileFragment$UserProfileActionAdapter -> org.mariotaku.twidere.b.bm:
    org.mariotaku.twidere.fragment.UserProfileFragment this$0 -> a
    org.mariotaku.twidere.fragment.UserProfileFragment$UserAction findItem(long) -> a
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
org.mariotaku.twidere.fragment.UserTimelineFragment -> org.mariotaku.twidere.b.bn:
    boolean isAllItemsLoaded -> V
    boolean isListLoadFinished() -> G
    android.support.v4.content.Loader newLoaderInstance(android.os.Bundle) -> c
    void onDataLoaded(android.support.v4.content.Loader,org.mariotaku.twidere.adapter.ParcelableStatusesAdapter) -> a
    void onResume() -> p
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
    void onStop() -> d
    org.mariotaku.twidere.util.ServiceInterface getServiceInterface() -> B
    void onCreate(android.os.Bundle) -> a
    void onDestroy() -> r
    boolean onMenuItemClick(android.view.MenuItem) -> a
    void onScroll(android.widget.AbsListView,int,int,int) -> onScroll
    void onStart() -> c
    void onScrollStateChanged(android.widget.AbsListView,int) -> onScrollStateChanged
    android.content.SharedPreferences getSharedPreferences() -> E
    boolean onItemLongClick(android.widget.AdapterView,android.view.View,int,long) -> onItemLongClick
    boolean isActivityFirstCreated() -> F
org.mariotaku.twidere.fragment.ViewConversationFragment -> org.mariotaku.twidere.b.bo:
    org.mariotaku.twidere.adapter.ParcelableStatusesAdapter mAdapter -> V
    org.mariotaku.twidere.fragment.ViewConversationFragment$ShowConversationTask mShowConversationTask -> W
    org.mariotaku.twidere.fragment.ViewConversationFragment$StatusHandler mStatusHandler -> X
    android.widget.ListView mListView -> Y
    android.content.SharedPreferences mPreferences -> Z
    android.os.Handler mHandler -> aa
    java.lang.Runnable mTicker -> ab
    org.mariotaku.popupmenu.PopupMenu mPopupMenu -> ac
    boolean mBusy -> ad
    boolean mTickerStopped -> ae
    boolean mDisplayProfileImage -> af
    boolean mDisplayName -> ag
    org.mariotaku.twidere.model.ParcelableStatus mSelectedStatus -> ah
    float mTextSize -> ai
    org.mariotaku.twidere.util.ServiceInterface mServiceInterface -> aj
    android.support.v4.app.Fragment mDetailFragment -> ak
    void onActivityCreated(android.os.Bundle) -> d
    void onDestroyView() -> e
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
    boolean onItemLongClick(android.widget.AdapterView,android.view.View,int,long) -> onItemLongClick
    boolean onMenuItemClick(android.view.MenuItem) -> a
    void onResume() -> p
    void onScroll(android.widget.AbsListView,int,int,int) -> onScroll
    void onScrollStateChanged(android.widget.AbsListView,int) -> onScrollStateChanged
    void onStart() -> c
    void onStop() -> d
    void openStatus(org.mariotaku.twidere.model.ParcelableStatus) -> a
    boolean access$0(org.mariotaku.twidere.fragment.ViewConversationFragment) -> a
    android.widget.ListView access$1(org.mariotaku.twidere.fragment.ViewConversationFragment) -> b
    boolean access$2(org.mariotaku.twidere.fragment.ViewConversationFragment) -> c
    android.os.Handler access$3(org.mariotaku.twidere.fragment.ViewConversationFragment) -> d
    java.lang.Runnable access$4(org.mariotaku.twidere.fragment.ViewConversationFragment) -> e
org.mariotaku.twidere.fragment.ViewConversationFragment$1 -> org.mariotaku.twidere.b.bp:
    org.mariotaku.twidere.fragment.ViewConversationFragment this$0 -> a
    void run() -> run
org.mariotaku.twidere.fragment.ViewConversationFragment$ShowConversationTask -> org.mariotaku.twidere.b.bq:
    long mAccountId -> b
    long mStatusId -> c
    org.mariotaku.twidere.fragment.ViewConversationFragment$StatusHandler mHandler -> d
    org.mariotaku.twidere.fragment.ViewConversationFragment this$0 -> a
    twitter4j.TwitterException doInBackground(java.lang.Void[]) -> a
    void onPostExecute(twitter4j.TwitterException) -> a
    void onPreExecute() -> onPreExecute
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
org.mariotaku.twidere.fragment.ViewConversationFragment$StatusHandler -> org.mariotaku.twidere.b.br:
    org.mariotaku.twidere.adapter.ParcelableStatusesAdapter mAdapter -> a
    long mAccountId -> b
    void handleMessage(android.os.Message) -> handleMessage
org.mariotaku.twidere.fragment.ViewStatusFragment -> org.mariotaku.twidere.b.bs:
    long mAccountId -> a
    long mStatusId -> b
    org.mariotaku.twidere.fragment.ImagesPreviewFragment mImagesPreviewFragment -> c
    org.mariotaku.twidere.util.ServiceInterface mServiceInterface -> d
    android.content.SharedPreferences mPreferences -> e
    android.content.ContentResolver mResolver -> f
    android.widget.TextView mNameView -> g
    android.widget.TextView mScreenNameView -> h
    android.widget.TextView mTextView -> V
    android.widget.TextView mTimeAndSourceView -> W
    android.widget.TextView mInReplyToView -> X
    android.widget.TextView mLocationView -> Y
    android.widget.ImageView mProfileImageView -> Z
    android.widget.Button mFollowButton -> aa
    android.view.View mProfileView -> ab
    android.view.View mFollowIndicator -> ac
    android.view.View mImagesPreviewContainer -> ad
    org.mariotaku.menubar.MenuBar mMenuBar -> ae
    android.widget.ProgressBar mProgress -> af
    org.mariotaku.twidere.fragment.ViewStatusFragment$FollowInfoTask mFollowInfoTask -> ag
    org.mariotaku.twidere.fragment.ViewStatusFragment$GetStatusTask mGetStatusTask -> ah
    org.mariotaku.twidere.model.ParcelableStatus mStatus -> ai
    boolean mLoadMoreAutomatically -> aj
    android.content.BroadcastReceiver mStatusReceiver -> ak
    boolean mFollowInfoDisplayed -> al
    boolean mLocationInfoDisplayed -> am
    org.mariotaku.twidere.fragment.ViewStatusFragment$LocationInfoTask mLocationInfoTask -> an
    void displayStatus(org.mariotaku.twidere.model.ParcelableStatus) -> a
    void onActivityCreated(android.os.Bundle) -> d
    void onClick(android.view.View) -> onClick
    android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle) -> a
    void onDestroyView() -> e
    void onLinkClick(java.lang.String,int) -> b
    boolean onMenuItemClick(android.view.MenuItem) -> a
    void onStart() -> c
    void onStop() -> d
    void getStatus(boolean) -> f
    void showFollowInfo(boolean) -> g
    void showLocationInfo(boolean) -> h
    org.mariotaku.twidere.model.ParcelableStatus access$0(org.mariotaku.twidere.fragment.ViewStatusFragment) -> a
    void access$1(org.mariotaku.twidere.fragment.ViewStatusFragment,boolean) -> a
    long access$2(org.mariotaku.twidere.fragment.ViewStatusFragment) -> b
    void access$3(org.mariotaku.twidere.fragment.ViewStatusFragment,boolean) -> b
    android.view.View access$4(org.mariotaku.twidere.fragment.ViewStatusFragment) -> c
    android.widget.Button access$5(org.mariotaku.twidere.fragment.ViewStatusFragment) -> d
    void access$6(org.mariotaku.twidere.fragment.ViewStatusFragment,boolean) -> c
    android.widget.ProgressBar access$7(org.mariotaku.twidere.fragment.ViewStatusFragment) -> e
    void access$8(org.mariotaku.twidere.fragment.ViewStatusFragment,org.mariotaku.twidere.fragment.ViewStatusFragment$FollowInfoTask) -> a
    android.content.ContentResolver access$9(org.mariotaku.twidere.fragment.ViewStatusFragment) -> f
    long access$10(org.mariotaku.twidere.fragment.ViewStatusFragment) -> g
    android.widget.TextView access$11(org.mariotaku.twidere.fragment.ViewStatusFragment) -> h
    void access$12(org.mariotaku.twidere.fragment.ViewStatusFragment,boolean) -> d
org.mariotaku.twidere.fragment.ViewStatusFragment$1 -> org.mariotaku.twidere.b.bt:
    org.mariotaku.twidere.fragment.ViewStatusFragment this$0 -> a
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
org.mariotaku.twidere.fragment.ViewStatusFragment$FollowInfoTask -> org.mariotaku.twidere.b.bu:
    org.mariotaku.twidere.fragment.ViewStatusFragment this$0 -> a
    org.mariotaku.twidere.fragment.ViewStatusFragment$Response doInBackground(java.lang.Void[]) -> a
    void onPostExecute(org.mariotaku.twidere.fragment.ViewStatusFragment$Response) -> a
    void onPreExecute() -> onPreExecute
    org.mariotaku.twidere.fragment.ViewStatusFragment$Response isAllFollowing() -> a
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
org.mariotaku.twidere.fragment.ViewStatusFragment$GetStatusTask -> org.mariotaku.twidere.b.bv:
    boolean omit_intent_extra -> b
    org.mariotaku.twidere.fragment.ViewStatusFragment this$0 -> a
    org.mariotaku.twidere.fragment.ViewStatusFragment$Response doInBackground(java.lang.Void[]) -> a
    void onPostExecute(org.mariotaku.twidere.fragment.ViewStatusFragment$Response) -> a
    void onPreExecute() -> onPreExecute
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
org.mariotaku.twidere.fragment.ViewStatusFragment$LocationInfoTask -> org.mariotaku.twidere.b.bw:
    org.mariotaku.twidere.fragment.ViewStatusFragment this$0 -> a
    java.lang.String doInBackground(java.lang.Void[]) -> a
    void onPostExecute(java.lang.String) -> a
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
org.mariotaku.twidere.fragment.ViewStatusFragment$Response -> org.mariotaku.twidere.b.bx:
    java.lang.Object value -> a
    twitter4j.TwitterException exception -> b
    org.mariotaku.twidere.fragment.ViewStatusFragment this$0 -> c
org.mariotaku.twidere.fragment.WebMapFragment -> org.mariotaku.twidere.b.by:
    android.net.Uri mUri -> a
    double latitude -> b
    double longitude -> c
    void onActivityCreated(android.os.Bundle) -> d
    void getLocation() -> A
    void setupWebView() -> B
    android.net.Uri access$2(org.mariotaku.twidere.fragment.WebMapFragment) -> a
org.mariotaku.twidere.fragment.WebMapFragment$JavaScriptInterface -> org.mariotaku.twidere.b.bz:
    org.mariotaku.twidere.fragment.WebMapFragment this$0 -> a
org.mariotaku.twidere.fragment.WebMapFragment$MapWebViewClient -> org.mariotaku.twidere.b.ca:
    org.mariotaku.twidere.fragment.WebMapFragment this$0 -> a
    boolean shouldOverrideUrlLoading(android.webkit.WebView,java.lang.String) -> shouldOverrideUrlLoading
org.mariotaku.twidere.fragment.WebViewFragment -> org.mariotaku.twidere.b.cb:
    android.webkit.WebView mWebView -> a
    android.webkit.WebView getWebView() -> z
    void loadUrl(java.lang.String) -> a
    void onActivityCreated(android.os.Bundle) -> d
    android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle) -> a
    void setWebViewClient(android.webkit.WebViewClient) -> a
org.mariotaku.twidere.fragment.WebViewFragment$DefaultWebViewClient -> org.mariotaku.twidere.b.cc:
    android.support.v4.app.FragmentActivity mActivity -> a
    void onPageFinished(android.webkit.WebView,java.lang.String) -> onPageFinished
    void onPageStarted(android.webkit.WebView,java.lang.String,android.graphics.Bitmap) -> onPageStarted
    boolean shouldOverrideUrlLoading(android.webkit.WebView,java.lang.String) -> shouldOverrideUrlLoading
org.mariotaku.twidere.graphic.AlphaPatternDrawable -> org.mariotaku.twidere.c.a:
    int mRectangleSize -> a
    int numRectanglesHorizontal -> b
    int numRectanglesVertical -> c
    android.graphics.Bitmap mBitmap -> d
    void draw(android.graphics.Canvas) -> draw
    int getOpacity() -> getOpacity
    void setAlpha(int) -> setAlpha
    void setColorFilter(android.graphics.ColorFilter) -> setColorFilter
    void onBoundsChange(android.graphics.Rect) -> onBoundsChange
    void generatePatternBitmap() -> a
org.mariotaku.twidere.loader.IDsUsersLoader -> org.mariotaku.twidere.d.a:
    long mMaxId -> f
    long mAccountId -> g
    twitter4j.IDs mIDs -> h
    twitter4j.IDs getIDs() -> f
    long[] getIDsArray() -> v
    java.util.List getUsers() -> w
org.mariotaku.twidere.loader.ParcelableStatusesLoader -> org.mariotaku.twidere.d.b:
    twitter4j.Twitter mTwitter -> f
    long mAccountId -> g
    java.util.List mData -> h
    boolean deleteStatus(long) -> a
    long getAccountId() -> f
    java.util.List getData() -> v
    twitter4j.Twitter getTwitter() -> w
    java.util.List loadInBackground() -> x
    void onStartLoading() -> g
    java.lang.Object loadInBackground() -> d
org.mariotaku.twidere.loader.ParcelableUsersLoader -> org.mariotaku.twidere.d.c:
    twitter4j.Twitter mTwitter -> f
    java.util.List mUsersList -> g
    long mAccountId -> h
    twitter4j.Twitter getTwitter() -> x
    java.util.List getUsers() -> w
    java.util.List loadInBackground() -> y
    void onStartLoading() -> g
    boolean hasId(long) -> a
    java.lang.Object loadInBackground() -> d
org.mariotaku.twidere.loader.TweetSearchLoader -> org.mariotaku.twidere.d.d:
    java.lang.String mQuery -> g
    long mMaxId -> h
    java.util.Comparator TWITTER4J_TWEET_ID_COMPARATOR -> f
    java.util.List loadInBackground() -> x
org.mariotaku.twidere.loader.TweetSearchLoader$1 -> org.mariotaku.twidere.d.e:
    int compare(twitter4j.Tweet,twitter4j.Tweet) -> a
    int compare(java.lang.Object,java.lang.Object) -> compare
org.mariotaku.twidere.loader.Twitter4JStatusLoader -> org.mariotaku.twidere.d.f:
    long mMaxId -> g
    java.util.Comparator TWITTER4J_STATUS_ID_COMPARATOR -> f
    twitter4j.ResponseList getStatuses(twitter4j.Paging) -> a
    java.util.List loadInBackground() -> x
org.mariotaku.twidere.loader.Twitter4JStatusLoader$1 -> org.mariotaku.twidere.d.g:
    int compare(twitter4j.Status,twitter4j.Status) -> a
    int compare(java.lang.Object,java.lang.Object) -> compare
org.mariotaku.twidere.loader.UserBlocksLoader -> org.mariotaku.twidere.d.h:
    twitter4j.IDs getIDs() -> f
org.mariotaku.twidere.loader.UserFavoritesLoader -> org.mariotaku.twidere.d.i:
    long mUserId -> g
    java.lang.String mUserScreenName -> h
    int mTotalItemsCount -> i
    twitter4j.ResponseList getStatuses(twitter4j.Paging) -> a
    int getTotalItemsCount() -> y
org.mariotaku.twidere.loader.UserFollowersLoader -> org.mariotaku.twidere.d.j:
    long mUserId -> f
    java.lang.String mScreenName -> g
    twitter4j.IDs getIDs() -> f
org.mariotaku.twidere.loader.UserFriendsLoader -> org.mariotaku.twidere.d.k:
    long mUserId -> f
    java.lang.String mScreenName -> g
    twitter4j.IDs getIDs() -> f
org.mariotaku.twidere.loader.UserSearchLoader -> org.mariotaku.twidere.d.l:
    twitter4j.Twitter mTwitter -> f
    java.lang.String mQuery -> g
    int mPage -> h
    long mAccountId -> i
    java.util.List getUsers() -> w
org.mariotaku.twidere.loader.UserTimelineLoader -> org.mariotaku.twidere.d.m:
    long mUserId -> g
    java.lang.String mUserScreenName -> h
    int mTotalItemsCount -> i
    twitter4j.ResponseList getStatuses(twitter4j.Paging) -> a
    int getTotalItemsCount() -> y
org.mariotaku.twidere.model.DirectMessageCursorIndices -> org.mariotaku.twidere.model.a:
    int account_id -> a
    int message_id -> b
    int message_timestamp -> c
    int sender_name -> d
    int sender_screen_name -> e
    int text -> f
    int recipient_name -> g
    int recipient_screen_name -> h
    int is_gap -> i
    int sender_profile_image_url -> j
    int recipient_profile_image_url -> k
    int sender_id -> l
    int recipient_id -> m
org.mariotaku.twidere.model.DirectMessageViewHolder -> org.mariotaku.twidere.model.b:
    android.widget.ImageView profile_image -> a
    android.widget.TextView name -> b
    android.widget.TextView text -> c
    android.widget.TextView time -> d
    android.view.View content -> f
    android.view.View gap_indicator -> g
    boolean show_as_gap -> e
    float text_size -> h
    void setShowAsGap(boolean) -> a
    void setTextSize(float) -> a
org.mariotaku.twidere.model.ParcelableDirectMessage -> org.mariotaku.twidere.model.ParcelableDirectMessage:
    android.os.Parcelable$Creator CREATOR -> CREATOR
    java.util.Comparator MESSAGE_ID_COMPARATOR -> a
    long account_id -> b
    long message_id -> c
    long message_timestamp -> d
    long sender_id -> e
    long recipient_id -> f
    boolean is_gap -> g
    java.lang.String text -> h
    java.lang.String sender_name -> i
    java.lang.String recipient_name -> j
    java.lang.String sender_screen_name -> k
    java.lang.String recipient_screen_name -> l
    java.net.URL sender_profile_image_url -> m
    java.net.URL recipient_profile_image_url -> n
    int describeContents() -> describeContents
    java.lang.String toString() -> toString
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
org.mariotaku.twidere.model.ParcelableDirectMessage$1 -> org.mariotaku.twidere.model.c:
    org.mariotaku.twidere.model.ParcelableDirectMessage createFromParcel(android.os.Parcel) -> a
    org.mariotaku.twidere.model.ParcelableDirectMessage[] newArray(int) -> a
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
    java.lang.Object[] newArray(int) -> newArray
org.mariotaku.twidere.model.ParcelableDirectMessage$2 -> org.mariotaku.twidere.model.d:
    int compare(org.mariotaku.twidere.model.ParcelableDirectMessage,org.mariotaku.twidere.model.ParcelableDirectMessage) -> a
    int compare(java.lang.Object,java.lang.Object) -> compare
org.mariotaku.twidere.model.ParcelableStatus -> org.mariotaku.twidere.model.ParcelableStatus:
    android.os.Parcelable$Creator CREATOR -> CREATOR
    long retweet_id -> a
    long retweeted_by_id -> b
    long status_id -> c
    long account_id -> d
    long user_id -> e
    long status_timestamp -> f
    long retweet_count -> g
    long in_reply_to_status_id -> h
    long in_reply_to_user_id -> i
    boolean is_gap -> j
    boolean is_retweet -> k
    boolean is_favorite -> l
    boolean is_protected -> m
    boolean has_media -> n
    java.lang.String retweeted_by_name -> o
    java.lang.String retweeted_by_screen_name -> p
    java.lang.String text_html -> q
    java.lang.String text_plain -> r
    java.lang.String name -> s
    java.lang.String screen_name -> t
    java.lang.String in_reply_to_screen_name -> u
    java.lang.String source -> v
    twitter4j.GeoLocation location -> w
    android.text.Spanned text -> x
    java.net.URL profile_image_url -> y
    java.util.Comparator TIMESTAMP_COMPARATOR -> z
    java.util.Comparator STATUS_ID_COMPARATOR -> A
    int describeContents() -> describeContents
    java.lang.String toString() -> toString
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
    long getTime(java.util.Date) -> a
org.mariotaku.twidere.model.ParcelableStatus$1 -> org.mariotaku.twidere.model.e:
    org.mariotaku.twidere.model.ParcelableStatus createFromParcel(android.os.Parcel) -> a
    org.mariotaku.twidere.model.ParcelableStatus[] newArray(int) -> a
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
    java.lang.Object[] newArray(int) -> newArray
org.mariotaku.twidere.model.ParcelableStatus$2 -> org.mariotaku.twidere.model.f:
    int compare(org.mariotaku.twidere.model.ParcelableStatus,org.mariotaku.twidere.model.ParcelableStatus) -> a
    int compare(java.lang.Object,java.lang.Object) -> compare
org.mariotaku.twidere.model.ParcelableStatus$3 -> org.mariotaku.twidere.model.g:
    int compare(org.mariotaku.twidere.model.ParcelableStatus,org.mariotaku.twidere.model.ParcelableStatus) -> a
    int compare(java.lang.Object,java.lang.Object) -> compare
org.mariotaku.twidere.model.ParcelableUser -> org.mariotaku.twidere.model.ParcelableUser:
    android.os.Parcelable$Creator CREATOR -> CREATOR
    long account_id -> a
    long user_id -> b
    long created_at -> c
    int position -> d
    boolean is_protected -> e
    java.lang.String description -> f
    java.lang.String name -> g
    java.lang.String screen_name -> h
    java.lang.String location -> i
    java.net.URL profile_image_url -> j
    java.util.Comparator POSITION_COMPARATOR -> k
    int describeContents() -> describeContents
    java.lang.String toString() -> toString
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
    long getTime(java.util.Date) -> a
org.mariotaku.twidere.model.ParcelableUser$1 -> org.mariotaku.twidere.model.h:
    org.mariotaku.twidere.model.ParcelableUser createFromParcel(android.os.Parcel) -> a
    org.mariotaku.twidere.model.ParcelableUser[] newArray(int) -> a
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
    java.lang.Object[] newArray(int) -> newArray
org.mariotaku.twidere.model.ParcelableUser$2 -> org.mariotaku.twidere.model.i:
    int compare(org.mariotaku.twidere.model.ParcelableUser,org.mariotaku.twidere.model.ParcelableUser) -> a
    int compare(java.lang.Object,java.lang.Object) -> compare
org.mariotaku.twidere.model.StatusCursorIndices -> org.mariotaku.twidere.model.j:
    int account_id -> a
    int status_id -> b
    int status_timestamp -> c
    int name -> d
    int screen_name -> e
    int text -> f
    int text_plain -> g
    int profile_image_url -> h
    int is_retweet -> i
    int is_favorite -> j
    int is_gap -> k
    int location -> l
    int has_media -> m
    int is_protected -> n
    int in_reply_to_status_id -> o
    int in_reply_to_user_id -> p
    int in_reply_to_screen_name -> q
    int retweeted_by_name -> r
    int retweeted_by_screen_name -> s
    int retweet_id -> t
    int retweeted_by_id -> u
    int user_id -> v
    int source -> w
    int retweet_count -> x
org.mariotaku.twidere.model.StatusViewHolder -> org.mariotaku.twidere.model.k:
    android.widget.ImageView profile_image -> a
    android.widget.TextView name -> b
    android.widget.TextView text -> c
    android.widget.TextView time -> d
    android.widget.TextView reply_retweet_status -> e
    android.view.View content -> g
    android.view.View gap_indicator -> h
    boolean show_as_gap -> f
    boolean account_color_enabled -> i
    float text_size -> j
    void setAccountColor(int) -> a
    void setAccountColorEnabled(boolean) -> a
    void setShowAsGap(boolean) -> b
    void setTextSize(float) -> a
org.mariotaku.twidere.model.UserViewHolder -> org.mariotaku.twidere.model.l:
    android.widget.ImageView profile_image -> a
    android.widget.TextView name -> b
    android.widget.TextView description -> c
    android.view.View content -> e
    android.view.View gap_indicator -> f
    boolean show_as_gap -> d
    float text_size -> g
    void setShowAsGap(boolean) -> a
    void setTextSize(float) -> a
org.mariotaku.twidere.provider.RecentSearchProvider -> org.mariotaku.twidere.provider.RecentSearchProvider:
org.mariotaku.twidere.provider.TweetStore -> org.mariotaku.twidere.provider.a:
    android.net.Uri[] STATUSES_URIS -> a
org.mariotaku.twidere.provider.TweetStore$Accounts -> org.mariotaku.twidere.provider.b:
    android.net.Uri CONTENT_URI -> a
    java.lang.String[] COLUMNS -> b
    java.lang.String[] TYPES -> c
org.mariotaku.twidere.provider.TweetStore$CachedUsers -> org.mariotaku.twidere.provider.c:
    android.net.Uri CONTENT_URI -> a
    java.lang.String[] COLUMNS -> b
    java.lang.String[] TYPES -> c
org.mariotaku.twidere.provider.TweetStore$DirectMessages -> org.mariotaku.twidere.provider.d:
    android.net.Uri CONTENT_URI -> a
    java.lang.String[] COLUMNS -> b
    java.lang.String[] TYPES -> c
org.mariotaku.twidere.provider.TweetStore$DirectMessages$Inbox -> org.mariotaku.twidere.provider.e:
    android.net.Uri CONTENT_URI -> d
org.mariotaku.twidere.provider.TweetStore$DirectMessages$Outbox -> org.mariotaku.twidere.provider.f:
    android.net.Uri CONTENT_URI -> d
org.mariotaku.twidere.provider.TweetStore$Drafts -> org.mariotaku.twidere.provider.g:
    android.net.Uri CONTENT_URI -> a
    java.lang.String[] COLUMNS -> b
    java.lang.String[] TYPES -> c
org.mariotaku.twidere.provider.TweetStore$Filters -> org.mariotaku.twidere.provider.h:
    java.lang.String[] COLUMNS -> a
    java.lang.String[] TYPES -> b
org.mariotaku.twidere.provider.TweetStore$Filters$Keywords -> org.mariotaku.twidere.provider.i:
    android.net.Uri CONTENT_URI -> c
org.mariotaku.twidere.provider.TweetStore$Filters$Sources -> org.mariotaku.twidere.provider.j:
    android.net.Uri CONTENT_URI -> c
org.mariotaku.twidere.provider.TweetStore$Filters$Users -> org.mariotaku.twidere.provider.k:
    android.net.Uri CONTENT_URI -> c
org.mariotaku.twidere.provider.TweetStore$Mentions -> org.mariotaku.twidere.provider.l:
    android.net.Uri CONTENT_URI -> a
org.mariotaku.twidere.provider.TweetStore$Statuses -> org.mariotaku.twidere.provider.m:
    android.net.Uri CONTENT_URI -> b
    java.lang.String[] COLUMNS -> c
    java.lang.String[] TYPES -> d
org.mariotaku.twidere.provider.TweetStoreProvider -> org.mariotaku.twidere.provider.TweetStoreProvider:
    android.database.sqlite.SQLiteDatabase database -> a
    int delete(android.net.Uri,java.lang.String,java.lang.String[]) -> delete
    java.lang.String getType(android.net.Uri) -> getType
    android.net.Uri insert(android.net.Uri,android.content.ContentValues) -> insert
    boolean onCreate() -> onCreate
    android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String) -> query
    int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[]) -> update
    void onDatabaseUpdated(android.net.Uri,boolean) -> a
org.mariotaku.twidere.provider.TweetStoreProvider$DatabaseHelper -> org.mariotaku.twidere.provider.n:
    void onCreate(android.database.sqlite.SQLiteDatabase) -> onCreate
    void onDowngrade(android.database.sqlite.SQLiteDatabase,int,int) -> onDowngrade
    void onUpgrade(android.database.sqlite.SQLiteDatabase,int,int) -> onUpgrade
    java.lang.String createTable(java.lang.String,java.lang.String[],java.lang.String[],boolean) -> a
    void handleVersionChange(android.database.sqlite.SQLiteDatabase) -> a
org.mariotaku.twidere.service.TwidereService -> org.mariotaku.twidere.service.TwidereService:
    org.mariotaku.twidere.service.TwidereService$ServiceStub mBinder -> a
    org.mariotaku.twidere.util.AsyncTaskManager mAsyncTaskManager -> b
    int mGetHomeTimelineTaskId -> c
    int mGetMentionsTaskId -> d
    int mStoreStatusesTaskId -> e
    int mStoreMentionsTaskId -> f
    android.content.SharedPreferences mPreferences -> g
    int mGetReceivedDirectMessagesTaskId -> h
    int mGetSentDirectMessagesTaskId -> i
    int mStoreReceivedDirectMessagesTaskId -> j
    int mStoreSentDirectMessagesTaskId -> k
    android.content.BroadcastReceiver mStateReceiver -> l
    boolean mShouldShutdown -> m
    int cancelRetweet(long,long) -> a
    int createBlock(long,long) -> b
    int createFavorite(long,long) -> c
    int createFriendship(long,long) -> d
    int destroyBlock(long,long) -> e
    int destroyFavorite(long,long) -> f
    int destroyFriendship(long,long) -> g
    int destroyStatus(long,long) -> h
    int getHomeTimeline(long[],long[]) -> a
    int getMentions(long[],long[]) -> b
    int getReceivedDirectMessages(long,long) -> i
    int getSentDirectMessages(long,long) -> j
    boolean hasActivatedTask() -> a
    boolean isHomeTimelineRefreshing() -> b
    boolean isMentionsRefreshing() -> c
    boolean isReceivedDirectMessagesRefreshing() -> d
    boolean isSentDirectMessagesRefreshing() -> e
    android.os.IBinder onBind(android.content.Intent) -> onBind
    void onCreate() -> onCreate
    void onDestroy() -> onDestroy
    int reportSpam(long,long) -> k
    int retweetStatus(long,long) -> l
    void shutdownService() -> f
    int updateProfile(long,java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> a
    int updateProfileImage(long,android.net.Uri,boolean) -> a
    int updateStatus(long[],java.lang.String,android.location.Location,android.net.Uri,long,boolean) -> a
    void showErrorToast(java.lang.Exception,boolean) -> a
    org.mariotaku.twidere.util.AsyncTaskManager access$0(org.mariotaku.twidere.service.TwidereService) -> a
    boolean access$1(org.mariotaku.twidere.service.TwidereService) -> b
    void access$2(org.mariotaku.twidere.service.TwidereService,java.lang.Exception,boolean) -> a
    android.content.SharedPreferences access$3(org.mariotaku.twidere.service.TwidereService) -> c
    void access$4(org.mariotaku.twidere.service.TwidereService,int) -> a
    void access$5(org.mariotaku.twidere.service.TwidereService,int) -> b
    void access$6(org.mariotaku.twidere.service.TwidereService,int) -> c
    void access$7(org.mariotaku.twidere.service.TwidereService,int) -> d
    void access$8(org.mariotaku.twidere.service.TwidereService,int) -> e
    void access$9(org.mariotaku.twidere.service.TwidereService,int) -> f
    void access$10(org.mariotaku.twidere.service.TwidereService,int) -> g
    void access$11(org.mariotaku.twidere.service.TwidereService,int) -> h
org.mariotaku.twidere.service.TwidereService$1 -> org.mariotaku.twidere.service.a:
    org.mariotaku.twidere.service.TwidereService this$0 -> a
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
org.mariotaku.twidere.service.TwidereService$CancelRetweetTask -> org.mariotaku.twidere.service.b:
    long account_id -> b
    long status_id -> c
    long retweeted_id -> d
    org.mariotaku.twidere.service.TwidereService this$0 -> a
    org.mariotaku.twidere.service.TwidereService$SingleResponse doInBackground(java.lang.Void[]) -> a
    void onPostExecute(org.mariotaku.twidere.service.TwidereService$SingleResponse) -> a
    void onPreExecute() -> onPreExecute
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
org.mariotaku.twidere.service.TwidereService$CreateBlockTask -> org.mariotaku.twidere.service.c:
    long account_id -> b
    long user_id -> c
    org.mariotaku.twidere.service.TwidereService this$0 -> a
    org.mariotaku.twidere.service.TwidereService$SingleResponse doInBackground(java.lang.Void[]) -> a
    void onPostExecute(org.mariotaku.twidere.service.TwidereService$SingleResponse) -> a
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
org.mariotaku.twidere.service.TwidereService$CreateFavoriteTask -> org.mariotaku.twidere.service.d:
    long account_id -> b
    long status_id -> c
    org.mariotaku.twidere.service.TwidereService this$0 -> a
    org.mariotaku.twidere.service.TwidereService$SingleResponse doInBackground(java.lang.Void[]) -> a
    void onPostExecute(org.mariotaku.twidere.service.TwidereService$SingleResponse) -> a
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
org.mariotaku.twidere.service.TwidereService$CreateFriendshipTask -> org.mariotaku.twidere.service.e:
    long account_id -> b
    long user_id -> c
    org.mariotaku.twidere.service.TwidereService this$0 -> a
    org.mariotaku.twidere.service.TwidereService$SingleResponse doInBackground(java.lang.Void[]) -> a
    void onPostExecute(org.mariotaku.twidere.service.TwidereService$SingleResponse) -> a
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
org.mariotaku.twidere.service.TwidereService$DestroyBlockTask -> org.mariotaku.twidere.service.f:
    long account_id -> b
    long user_id -> c
    org.mariotaku.twidere.service.TwidereService this$0 -> a
    org.mariotaku.twidere.service.TwidereService$SingleResponse doInBackground(java.lang.Void[]) -> a
    void onPostExecute(org.mariotaku.twidere.service.TwidereService$SingleResponse) -> a
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
org.mariotaku.twidere.service.TwidereService$DestroyFavoriteTask -> org.mariotaku.twidere.service.g:
    long account_id -> b
    long status_id -> c
    org.mariotaku.twidere.service.TwidereService this$0 -> a
    org.mariotaku.twidere.service.TwidereService$SingleResponse doInBackground(java.lang.Void[]) -> a
    void onPostExecute(org.mariotaku.twidere.service.TwidereService$SingleResponse) -> a
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
org.mariotaku.twidere.service.TwidereService$DestroyFriendshipTask -> org.mariotaku.twidere.service.h:
    long account_id -> b
    long user_id -> c
    org.mariotaku.twidere.service.TwidereService this$0 -> a
    org.mariotaku.twidere.service.TwidereService$SingleResponse doInBackground(java.lang.Void[]) -> a
    void onPostExecute(org.mariotaku.twidere.service.TwidereService$SingleResponse) -> a
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
org.mariotaku.twidere.service.TwidereService$DestroyStatusTask -> org.mariotaku.twidere.service.i:
    long account_id -> b
    long status_id -> c
    org.mariotaku.twidere.service.TwidereService this$0 -> a
    org.mariotaku.twidere.service.TwidereService$SingleResponse doInBackground(java.lang.Void[]) -> a
    void onPostExecute(org.mariotaku.twidere.service.TwidereService$SingleResponse) -> a
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
org.mariotaku.twidere.service.TwidereService$GetDirectMessagesTask -> org.mariotaku.twidere.service.j:
    long account_id -> b
    long max_id -> c
    org.mariotaku.twidere.service.TwidereService this$0 -> a
    twitter4j.ResponseList getDirectMessages(twitter4j.Twitter,twitter4j.Paging) -> a
    org.mariotaku.twidere.service.TwidereService$ListResponse doInBackground(java.lang.Void[]) -> a
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
org.mariotaku.twidere.service.TwidereService$GetHomeTimelineTask -> org.mariotaku.twidere.service.k:
    org.mariotaku.twidere.service.TwidereService this$0 -> a
    twitter4j.ResponseList getStatuses(twitter4j.Twitter,twitter4j.Paging) -> a
    twitter4j.Twitter getTwitter(android.content.Context,long,boolean) -> a
    void onPostExecute(java.util.List) -> a
    void onPreExecute() -> onPreExecute
    void onPostExecute(java.lang.Object) -> onPostExecute
org.mariotaku.twidere.service.TwidereService$GetMentionsTask -> org.mariotaku.twidere.service.l:
    org.mariotaku.twidere.service.TwidereService this$0 -> a
    twitter4j.ResponseList getStatuses(twitter4j.Twitter,twitter4j.Paging) -> a
    twitter4j.Twitter getTwitter(android.content.Context,long,boolean) -> a
    void onPostExecute(java.util.List) -> a
    void onPreExecute() -> onPreExecute
    void onPostExecute(java.lang.Object) -> onPostExecute
org.mariotaku.twidere.service.TwidereService$GetReceivedDirectMessagesTask -> org.mariotaku.twidere.service.m:
    org.mariotaku.twidere.service.TwidereService this$0 -> b
    twitter4j.ResponseList getDirectMessages(twitter4j.Twitter,twitter4j.Paging) -> a
    void onPostExecute(org.mariotaku.twidere.service.TwidereService$ListResponse) -> a
    void onPreExecute() -> onPreExecute
    void onPostExecute(java.lang.Object) -> onPostExecute
org.mariotaku.twidere.service.TwidereService$GetSentDirectMessagesTask -> org.mariotaku.twidere.service.n:
    org.mariotaku.twidere.service.TwidereService this$0 -> b
    twitter4j.ResponseList getDirectMessages(twitter4j.Twitter,twitter4j.Paging) -> a
    void onPostExecute(org.mariotaku.twidere.service.TwidereService$ListResponse) -> a
    void onPreExecute() -> onPreExecute
    void onPostExecute(java.lang.Object) -> onPostExecute
org.mariotaku.twidere.service.TwidereService$GetStatusesTask -> org.mariotaku.twidere.service.o:
    long[] account_ids -> a
    long[] max_ids -> c
    org.mariotaku.twidere.service.TwidereService this$0 -> b
    twitter4j.ResponseList getStatuses(twitter4j.Twitter,twitter4j.Paging) -> a
    twitter4j.Twitter getTwitter(android.content.Context,long,boolean) -> a
    java.util.List doInBackground(java.lang.Void[]) -> a
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
org.mariotaku.twidere.service.TwidereService$ListResponse -> org.mariotaku.twidere.service.p:
    long account_id -> a
    long max_id -> b
    twitter4j.ResponseList list -> c
org.mariotaku.twidere.service.TwidereService$ReportSpamTask -> org.mariotaku.twidere.service.q:
    long account_id -> b
    long user_id -> c
    org.mariotaku.twidere.service.TwidereService this$0 -> a
    org.mariotaku.twidere.service.TwidereService$SingleResponse doInBackground(java.lang.Void[]) -> a
    void onPostExecute(org.mariotaku.twidere.service.TwidereService$SingleResponse) -> a
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
org.mariotaku.twidere.service.TwidereService$RetweetStatusTask -> org.mariotaku.twidere.service.r:
    long account_id -> b
    long status_id -> c
    org.mariotaku.twidere.service.TwidereService this$0 -> a
    org.mariotaku.twidere.service.TwidereService$SingleResponse doInBackground(java.lang.Void[]) -> a
    void onPostExecute(org.mariotaku.twidere.service.TwidereService$SingleResponse) -> a
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
org.mariotaku.twidere.service.TwidereService$ServiceStub -> org.mariotaku.twidere.service.s:
    java.lang.ref.WeakReference mService -> a
    int cancelRetweet(long,long) -> e
    int createBlock(long,long) -> j
    int createFavorite(long,long) -> f
    int createFriendship(long,long) -> h
    int destroyBlock(long,long) -> k
    int destroyFavorite(long,long) -> g
    int destroyFriendship(long,long) -> i
    int destroyStatus(long,long) -> c
    int getHomeTimeline(long[],long[]) -> a
    int getMentions(long[],long[]) -> b
    int getReceivedDirectMessages(long,long) -> a
    int getSentDirectMessages(long,long) -> b
    boolean hasActivatedTask() -> e
    boolean isHomeTimelineRefreshing() -> a
    boolean isMentionsRefreshing() -> b
    boolean isReceivedDirectMessagesRefreshing() -> c
    boolean isSentDirectMessagesRefreshing() -> d
    int reportSpam(long,long) -> l
    int retweetStatus(long,long) -> d
    void shutdownService() -> g
    boolean test() -> f
    int updateProfile(long,java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> a
    int updateProfileImage(long,android.net.Uri,boolean) -> a
    int updateStatus(long[],java.lang.String,android.location.Location,android.net.Uri,long,boolean) -> a
org.mariotaku.twidere.service.TwidereService$SingleResponse -> org.mariotaku.twidere.service.t:
    twitter4j.TwitterException exception -> a
    java.lang.Object data -> b
    long account_id -> c
org.mariotaku.twidere.service.TwidereService$StoreDirectMessagesTask -> org.mariotaku.twidere.service.u:
    org.mariotaku.twidere.service.TwidereService$ListResponse response -> b
    android.net.Uri uri -> c
    org.mariotaku.twidere.service.TwidereService this$0 -> a
    java.lang.Boolean doInBackground(java.lang.Void[]) -> a
    void onPostExecute(java.lang.Boolean) -> a
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
org.mariotaku.twidere.service.TwidereService$StoreHomeTimelineTask -> org.mariotaku.twidere.service.v:
    org.mariotaku.twidere.service.TwidereService this$0 -> a
    void onPostExecute(java.lang.Boolean) -> a
org.mariotaku.twidere.service.TwidereService$StoreMentionsTask -> org.mariotaku.twidere.service.w:
    org.mariotaku.twidere.service.TwidereService this$0 -> a
    void onPostExecute(java.lang.Boolean) -> a
org.mariotaku.twidere.service.TwidereService$StoreReceivedDirectMessagesTask -> org.mariotaku.twidere.service.x:
    org.mariotaku.twidere.service.TwidereService this$0 -> b
    void onPostExecute(java.lang.Boolean) -> a
org.mariotaku.twidere.service.TwidereService$StoreSentDirectMessagesTask -> org.mariotaku.twidere.service.y:
    org.mariotaku.twidere.service.TwidereService this$0 -> b
    void onPostExecute(java.lang.Boolean) -> a
org.mariotaku.twidere.service.TwidereService$StoreStatusesTask -> org.mariotaku.twidere.service.z:
    java.util.List responses -> a
    android.net.Uri uri -> c
    org.mariotaku.twidere.service.TwidereService this$0 -> b
    java.lang.Boolean doInBackground(java.lang.Void[]) -> a
    void onPostExecute(java.lang.Boolean) -> a
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
org.mariotaku.twidere.service.TwidereService$UpdateProfileImageTask -> org.mariotaku.twidere.service.aa:
    long account_id -> b
    android.net.Uri image_uri -> c
    boolean delete_image -> d
    org.mariotaku.twidere.service.TwidereService this$0 -> a
    org.mariotaku.twidere.service.TwidereService$SingleResponse doInBackground(java.lang.Void[]) -> a
    void onPostExecute(org.mariotaku.twidere.service.TwidereService$SingleResponse) -> a
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
org.mariotaku.twidere.service.TwidereService$UpdateProfileTask -> org.mariotaku.twidere.service.ab:
    long account_id -> b
    java.lang.String name -> c
    java.lang.String url -> d
    java.lang.String location -> e
    java.lang.String description -> f
    org.mariotaku.twidere.service.TwidereService this$0 -> a
    org.mariotaku.twidere.service.TwidereService$SingleResponse doInBackground(java.lang.Void[]) -> a
    void onPostExecute(org.mariotaku.twidere.service.TwidereService$SingleResponse) -> a
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
org.mariotaku.twidere.service.TwidereService$UpdateStatusTask -> org.mariotaku.twidere.service.ac:
    long[] account_ids -> b
    java.lang.String content -> c
    android.location.Location location -> d
    android.net.Uri image_uri -> e
    long in_reply_to -> f
    boolean delete_image -> g
    org.mariotaku.twidere.service.TwidereService this$0 -> a
    java.util.List doInBackground(java.lang.Void[]) -> a
    void onPostExecute(java.util.List) -> a
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
org.mariotaku.twidere.util.ArrayUtils -> org.mariotaku.twidere.util.a:
    java.lang.String buildString(long[],char,boolean) -> a
    boolean contains(long[],long) -> a
    boolean contains(java.lang.Object[],java.lang.Object) -> a
    boolean contentMatch(java.lang.Object[],java.lang.Object[]) -> a
    int indexOf(long[],long) -> b
org.mariotaku.twidere.util.AsyncTaskManager -> org.mariotaku.twidere.util.b:
    android.util.SparseArray mTasks -> a
    org.mariotaku.twidere.util.AsyncTaskManager sInstance -> b
    int add(org.mariotaku.twidere.util.ManagedAsyncTask,boolean,java.lang.Object[]) -> a
    boolean cancel(int) -> a
    boolean cancel(int,boolean) -> a
    boolean execute(int,java.lang.Object[]) -> a
    boolean hasActivatedTask() -> a
    boolean isExcuting(int) -> b
    void remove(int) -> c
    org.mariotaku.twidere.util.AsyncTaskManager getInstance() -> b
org.mariotaku.twidere.util.BaseAdapterInterface -> org.mariotaku.twidere.util.c:
    void notifyDataSetChanged() -> notifyDataSetChanged
    void setDisplayName(boolean) -> a
    void setDisplayProfileImage(boolean) -> b
    void setShowLastItemAsGap(boolean) -> c
    void setTextSize(float) -> a
org.mariotaku.twidere.util.ColorAnalyser -> org.mariotaku.twidere.util.d:
    int analyse(android.graphics.Bitmap) -> a
    int analyse(android.graphics.Bitmap,int,int) -> a
org.mariotaku.twidere.util.DatabaseUpgradeHelper -> org.mariotaku.twidere.util.e:
    void safeUpgrade(android.database.sqlite.SQLiteDatabase,java.lang.String,java.lang.String[],java.lang.String[],boolean) -> a
    java.lang.String createTable(java.lang.String,java.lang.String[],java.lang.String[],boolean) -> a
    java.lang.String[] getBatchTypeString(android.database.sqlite.SQLiteDatabase,java.lang.String,java.lang.String[]) -> a
    int getTypeInt(java.lang.String) -> a
    java.lang.String getTypeString(android.database.sqlite.SQLiteDatabase,java.lang.String,java.lang.String) -> a
    boolean isTypeCompatible(java.lang.String,java.lang.String,boolean) -> a
    boolean shouldUpgrade(java.lang.String[],java.lang.String[],java.lang.String[],java.lang.String[]) -> a
org.mariotaku.twidere.util.DirectMessagesAdapterInterface -> org.mariotaku.twidere.util.f:
    org.mariotaku.twidere.model.ParcelableDirectMessage findItem(long) -> a
org.mariotaku.twidere.util.FileUtils -> org.mariotaku.twidere.util.g:
    void copyFile(java.io.File,java.io.File) -> a
    void copyFileToDirectory(java.io.File,java.io.File) -> b
    void closeQuietly(java.io.Closeable) -> a
    void closeQuietly(java.io.InputStream) -> a
    void closeQuietly(java.io.OutputStream) -> a
    void doCopyFile(java.io.File,java.io.File,boolean) -> a
org.mariotaku.twidere.util.GetExternalCacheDirAccessor -> org.mariotaku.twidere.util.h:
    java.io.File getExternalCacheDir(android.content.Context) -> a
org.mariotaku.twidere.util.HtmlBuilder -> org.mariotaku.twidere.util.i:
    java.lang.String string -> a
    int string_length -> b
    boolean strict -> c
    java.util.List links -> d
    void addLink(java.lang.String,int,int) -> a
    java.lang.String build() -> a
    java.lang.String escapeHTMLString(java.lang.String) -> a
org.mariotaku.twidere.util.HtmlBuilder$LinkSpec -> org.mariotaku.twidere.util.j:
    java.util.Comparator COMPARATOR -> d
    java.lang.String link -> a
    int start -> b
    int end -> c
    java.lang.String toString() -> toString
    java.util.Comparator access$0() -> a
org.mariotaku.twidere.util.HtmlBuilder$LinkSpec$1 -> org.mariotaku.twidere.util.k:
    int compare(org.mariotaku.twidere.util.HtmlBuilder$LinkSpec,org.mariotaku.twidere.util.HtmlBuilder$LinkSpec) -> a
    int compare(java.lang.Object,java.lang.Object) -> compare
org.mariotaku.twidere.util.LazyImageLoader -> org.mariotaku.twidere.util.l:
    org.mariotaku.twidere.util.LazyImageLoader$MemoryCache mMemoryCache -> a
    android.content.Context mContext -> b
    org.mariotaku.twidere.util.LazyImageLoader$FileCache mFileCache -> c
    java.util.Map mImageViews -> d
    java.util.concurrent.ExecutorService mExecutorService -> e
    int mFallbackRes -> f
    int mRequiredWidth -> g
    int mRequiredHeight -> h
    void clearMemoryCache() -> a
    void displayImage(java.net.URL,android.widget.ImageView) -> a
    void copyStream(java.io.InputStream,java.io.OutputStream) -> a
    android.graphics.Bitmap decodeFile(java.io.File) -> a
    void queuePhoto(java.net.URL,android.widget.ImageView) -> b
    boolean imageViewReused(org.mariotaku.twidere.util.LazyImageLoader$ImageToLoad) -> a
    int access$0(org.mariotaku.twidere.util.LazyImageLoader) -> a
    org.mariotaku.twidere.util.LazyImageLoader$FileCache access$1(org.mariotaku.twidere.util.LazyImageLoader) -> b
    android.graphics.Bitmap access$2(org.mariotaku.twidere.util.LazyImageLoader,java.io.File) -> a
    android.content.Context access$3(org.mariotaku.twidere.util.LazyImageLoader) -> c
    void access$4(org.mariotaku.twidere.util.LazyImageLoader,java.io.InputStream,java.io.OutputStream) -> a
    org.mariotaku.twidere.util.LazyImageLoader$MemoryCache access$5(org.mariotaku.twidere.util.LazyImageLoader) -> d
org.mariotaku.twidere.util.LazyImageLoader$BitmapDisplayer -> org.mariotaku.twidere.util.m:
    android.graphics.Bitmap bitmap -> a
    org.mariotaku.twidere.util.LazyImageLoader$ImageToLoad imagetoload -> b
    org.mariotaku.twidere.util.LazyImageLoader this$0 -> c
    void run() -> run
org.mariotaku.twidere.util.LazyImageLoader$FileCache -> org.mariotaku.twidere.util.n:
    java.lang.String mCacheDirName -> a
    java.io.File mCacheDir -> b
    android.content.Context mContext -> c
    java.io.File getFile(java.net.URL) -> a
    void init() -> a
    java.lang.String getURLFilename(java.net.URL) -> b
org.mariotaku.twidere.util.LazyImageLoader$ImageLoader -> org.mariotaku.twidere.util.o:
    org.mariotaku.twidere.util.LazyImageLoader$ImageToLoad imagetoload -> b
    org.mariotaku.twidere.util.LazyImageLoader this$0 -> a
    android.graphics.Bitmap getBitmap(java.net.URL,android.widget.ImageView) -> a
    void run() -> run
org.mariotaku.twidere.util.LazyImageLoader$ImageToLoad -> org.mariotaku.twidere.util.p:
    java.net.URL source -> a
    android.widget.ImageView imageview -> b
org.mariotaku.twidere.util.LazyImageLoader$MemoryCache -> org.mariotaku.twidere.util.q:
    java.util.Map mSoftCache -> a
    java.util.Map mHardCache -> b
    void clear() -> a
    android.graphics.Bitmap get(java.net.URL) -> a
    void put(java.net.URL,android.graphics.Bitmap) -> a
    java.util.Map access$1(org.mariotaku.twidere.util.LazyImageLoader$MemoryCache) -> a
org.mariotaku.twidere.util.LazyImageLoader$MemoryCache$1 -> org.mariotaku.twidere.util.r:
    org.mariotaku.twidere.util.LazyImageLoader$MemoryCache this$1 -> a
    boolean removeEldestEntry(java.util.Map$Entry) -> removeEldestEntry
org.mariotaku.twidere.util.LinkSpec -> org.mariotaku.twidere.util.s:
    java.lang.String url -> a
    int start -> b
    int end -> c
org.mariotaku.twidere.util.ListUtils -> org.mariotaku.twidere.util.t:
    java.lang.String buildString(java.util.List,char,boolean) -> a
org.mariotaku.twidere.util.ManagedAsyncTask -> org.mariotaku.twidere.util.u:
    org.mariotaku.twidere.util.AsyncTaskManager manager -> a
    android.content.Context context -> b
    void onCancelled() -> onCancelled
    void onPostExecute(java.lang.Object) -> onPostExecute
    void onPreExecute() -> onPreExecute
org.mariotaku.twidere.util.MemCache -> org.mariotaku.twidere.util.v:
    org.mariotaku.twidere.util.MemCache sInstance -> a
    org.mariotaku.twidere.util.MemCache$TrendsCache daily_trends -> b
    org.mariotaku.twidere.util.MemCache$TrendsCache weekly_trends -> c
    void cacheDailyTrends(java.util.List) -> a
    void cacheWeeklyTrends(java.util.List) -> b
    java.util.List getCachedDailyTrends() -> a
    java.util.List getCachedWeeklyTrends() -> b
    org.mariotaku.twidere.util.MemCache getInstance() -> c
org.mariotaku.twidere.util.MemCache$TrendsCache -> org.mariotaku.twidere.util.w:
    java.util.List trends -> a
    long timestamp -> b
    org.mariotaku.twidere.util.MemCache this$0 -> c
org.mariotaku.twidere.util.OverridePendingTransitionAccessor -> org.mariotaku.twidere.util.x:
    void overridePendingTransition(android.app.Activity,int,int) -> a
org.mariotaku.twidere.util.Patterns -> org.mariotaku.twidere.util.y:
    java.util.regex.Pattern TOP_LEVEL_DOMAIN -> a
    java.util.regex.Pattern WEB_URL -> b
    java.util.regex.Pattern IP_ADDRESS -> c
    java.util.regex.Pattern DOMAIN_NAME -> d
    java.util.regex.Pattern EMAIL_ADDRESS -> e
    java.util.regex.Pattern PHONE -> f
org.mariotaku.twidere.util.ServiceInterface -> org.mariotaku.twidere.util.z:
    org.mariotaku.twidere.ITwidereService mService -> a
    android.content.ServiceConnection mConntecion -> b
    org.mariotaku.twidere.util.ServiceInterface sInstance -> c
    android.os.IBinder asBinder() -> asBinder
    int cancelRetweet(long,long) -> e
    int createBlock(long,long) -> j
    int createFavorite(long,long) -> f
    int createFriendship(long,long) -> h
    int destroyBlock(long,long) -> k
    int destroyFavorite(long,long) -> g
    int destroyFriendship(long,long) -> i
    int destroyStatus(long,long) -> c
    int getHomeTimeline(long[],long[]) -> a
    int getMentions(long[],long[]) -> b
    int getReceivedDirectMessages(long,long) -> a
    int getSentDirectMessages(long,long) -> b
    boolean hasActivatedTask() -> e
    boolean isHomeTimelineRefreshing() -> a
    boolean isMentionsRefreshing() -> b
    boolean isReceivedDirectMessagesRefreshing() -> c
    boolean isSentDirectMessagesRefreshing() -> d
    int reportSpam(long,long) -> l
    int retweetStatus(long,long) -> d
    void shutdownService() -> g
    boolean test() -> f
    int updateProfile(long,java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> a
    int updateProfileImage(long,android.net.Uri,boolean) -> a
    int updateStatus(long[],java.lang.String,android.location.Location,android.net.Uri,long,boolean) -> a
    org.mariotaku.twidere.util.ServiceInterface getInstance(android.content.Context) -> a
    void access$0(org.mariotaku.twidere.util.ServiceInterface,org.mariotaku.twidere.ITwidereService) -> a
org.mariotaku.twidere.util.ServiceInterface$1 -> org.mariotaku.twidere.util.aa:
    org.mariotaku.twidere.util.ServiceInterface this$0 -> a
    void onServiceConnected(android.content.ComponentName,android.os.IBinder) -> onServiceConnected
    void onServiceDisconnected(android.content.ComponentName) -> onServiceDisconnected
org.mariotaku.twidere.util.ServiceToken -> org.mariotaku.twidere.util.ab:
    android.content.ContextWrapper wrapped_context -> a
org.mariotaku.twidere.util.ServiceUtils -> org.mariotaku.twidere.util.ac:
    java.util.HashMap sConnectionMap -> a
    org.mariotaku.twidere.util.ServiceToken bindToService(android.content.Context,android.content.ServiceConnection) -> a
org.mariotaku.twidere.util.ServiceUtils$ServiceBinder -> org.mariotaku.twidere.util.ad:
    android.content.ServiceConnection mCallback -> a
    void onServiceConnected(android.content.ComponentName,android.os.IBinder) -> onServiceConnected
    void onServiceDisconnected(android.content.ComponentName) -> onServiceDisconnected
org.mariotaku.twidere.util.SetLayerTypeAccessor -> org.mariotaku.twidere.util.ae:
    void setLayerType(android.view.View,int,android.graphics.Paint) -> a
org.mariotaku.twidere.util.StatusesAdapterInterface -> org.mariotaku.twidere.util.af:
    org.mariotaku.twidere.model.ParcelableStatus findItem(long) -> a
org.mariotaku.twidere.util.TwidereLinkify -> org.mariotaku.twidere.util.TwidereLinkify:
    int[] ALL_LINK_TYPES -> a
    java.util.regex.Pattern PATTERN_IMAGES -> b
    java.util.regex.Pattern PATTERN_TWITTER_IMAGES -> c
    java.util.regex.Pattern PATTERN_SINA_WEIBO_IMAGES -> d
    java.util.regex.Pattern PATTERN_LOCKERZ_AND_PLIXI -> e
    java.util.regex.Pattern PATTERN_INSTAGRAM -> f
    java.util.regex.Pattern PATTERN_TWITPIC -> g
    android.widget.TextView view -> i
    org.mariotaku.twidere.util.TwidereLinkify$OnLinkClickListener mOnLinkClickListener -> j
    org.mariotaku.twidere.util.TwidereLinkify$MatchFilter sUrlMatchFilter -> h
    void addAllLinks() -> a
    void addLinks(int) -> a
    void setOnLinkClickListener(org.mariotaku.twidere.util.TwidereLinkify$OnLinkClickListener) -> a
    boolean addHashtagLinks(android.text.Spannable) -> a
    boolean addMentionLinks(android.text.Spannable) -> b
    void applyLink(java.lang.String,int,int,android.text.Spannable,int) -> a
    void addLinkMovementMethod(android.widget.TextView) -> a
    void gatherLinks(java.util.ArrayList,android.text.Spannable,java.util.regex.Pattern,java.lang.String[],org.mariotaku.twidere.util.TwidereLinkify$MatchFilter,org.mariotaku.twidere.util.TwidereLinkify$TransformFilter) -> a
    java.lang.String makeUrl(java.lang.String,java.lang.String[],java.util.regex.Matcher,org.mariotaku.twidere.util.TwidereLinkify$TransformFilter) -> a
org.mariotaku.twidere.util.TwidereLinkify$1 -> org.mariotaku.twidere.util.ag:
    boolean acceptMatch(java.lang.CharSequence,int,int) -> a
org.mariotaku.twidere.util.TwidereLinkify$LinkSpan -> org.mariotaku.twidere.util.TwidereLinkify$LinkSpan:
    int type -> a
    org.mariotaku.twidere.util.TwidereLinkify$OnLinkClickListener listener -> b
    void onClick(android.view.View) -> onClick
org.mariotaku.twidere.util.TwidereLinkify$MatchFilter -> org.mariotaku.twidere.util.ah:
    boolean acceptMatch(java.lang.CharSequence,int,int) -> a
org.mariotaku.twidere.util.TwidereLinkify$OnLinkClickListener -> org.mariotaku.twidere.util.ai:
    void onLinkClick(java.lang.String,int) -> b
org.mariotaku.twidere.util.TwidereLinkify$TransformFilter -> org.mariotaku.twidere.util.aj:
    java.lang.String transformUrl(java.util.regex.Matcher,java.lang.String) -> a
org.mariotaku.twidere.util.Utils -> org.mariotaku.twidere.util.ak:
    android.content.UriMatcher CONTENT_PROVIDER_URI_MATCHER -> a
    javax.net.ssl.HostnameVerifier ALLOW_ALL_HOSTNAME_VERIFIER -> b
    javax.net.ssl.TrustManager[] TRUST_ALL_CERTS -> c
    javax.net.ssl.SSLSocketFactory IGNORE_ERROR_SSL_FACTORY -> d
    java.util.HashMap sAccountColors -> e
    android.net.Uri[] STATUSES_URIS -> f
    android.net.Uri[] DIRECT_MESSAGES_URIS -> g
    java.lang.String buildActivatedStatsWhereClause(android.content.Context,java.lang.String) -> a
    java.lang.String buildFilterWhereClause(java.lang.String,java.lang.String) -> a
    android.net.Uri buildQueryUri(android.net.Uri,boolean) -> a
    void cleanDatabasesByItemLimit(android.content.Context) -> a
    void clearAccountColor() -> a
    org.mariotaku.twidere.model.ParcelableDirectMessage findDirectMessageInDatabases(android.content.Context,long,long) -> a
    org.mariotaku.twidere.model.ParcelableStatus findStatusInDatabases(android.content.Context,long,long) -> b
    java.lang.String formatGeoLocationToString(twitter4j.GeoLocation) -> a
    java.lang.String formatStatusText(twitter4j.Status) -> a
    java.lang.String formatToLongTimeString(android.content.Context,long) -> a
    java.lang.String formatToShortTimeString(android.content.Context,long) -> b
    java.lang.String formatTweetText(twitter4j.Tweet) -> a
    int getAccountColor(android.content.Context,long) -> c
    long getAccountId(android.content.Context,java.lang.String) -> b
    long[] getAccountIds(android.content.Context) -> b
    java.lang.String getAccountUsername(android.content.Context,long) -> d
    long[] getActivatedAccountIds(android.content.Context) -> c
    java.lang.String[] getActivatedAccountScreenNames(android.content.Context) -> d
    android.graphics.Bitmap getColorPreviewBitmap(android.content.Context,int) -> a
    long getDefaultAccountId(android.content.Context) -> e
    twitter4j.Twitter getDefaultTwitterInstance(android.content.Context,boolean) -> a
    twitter4j.Twitter getDefaultTwitterInstance(android.content.Context,boolean,boolean) -> a
    twitter4j.GeoLocation getGeoLocationFromString(java.lang.String) -> a
    java.lang.String getImagePathFromUri(android.content.Context,android.net.Uri) -> a
    java.util.List getImagesInStatus(java.lang.String) -> b
    org.mariotaku.twidere.fragment.ImagesPreviewFragment$ImageSpec getInstagramImage(java.lang.String) -> c
    long[] getLastSortIds(android.content.Context,android.net.Uri) -> b
    org.mariotaku.twidere.fragment.ImagesPreviewFragment$ImageSpec getLockerzAndPlixiImage(java.lang.String) -> d
    java.net.Proxy getProxy(android.content.Context) -> f
    java.lang.String getQuoteStatus(android.content.Context,java.lang.String,java.lang.String) -> a
    long getRetweetedByUserId(android.content.Context,long) -> e
    long getRetweetId(android.content.Context,long) -> f
    org.mariotaku.twidere.fragment.ImagesPreviewFragment$ImageSpec getSinaWeiboImage(java.lang.String) -> e
    int getTableId(android.net.Uri) -> a
    java.lang.String getTableNameForContentUri(android.net.Uri) -> b
    org.mariotaku.twidere.fragment.ImagesPreviewFragment$ImageSpec getTwitpicImage(java.lang.String) -> f
    org.mariotaku.twidere.fragment.ImagesPreviewFragment$ImageSpec getTwitterImage(java.lang.String) -> g
    twitter4j.Twitter getTwitterInstance(android.content.Context,long,boolean) -> a
    twitter4j.Twitter getTwitterInstance(android.content.Context,long,boolean,boolean) -> a
    int getTypeIcon(boolean,boolean,boolean) -> a
    boolean isMyAccount(android.content.Context,long) -> g
    boolean isMyActivatedAccount(android.content.Context,long) -> h
    boolean isMyActivatedUserName(android.content.Context,java.lang.String) -> c
    boolean isMyRetweet(android.content.Context,long,long) -> c
    boolean isNullOrEmpty(java.lang.CharSequence) -> a
    boolean isUserLoggedIn(android.content.Context,long) -> i
    android.content.ContentValues makeAccountContentValues(int,twitter4j.auth.AccessToken,twitter4j.User,java.lang.String,java.lang.String,java.lang.String,int) -> a
    android.content.ContentValues makeCachedUserContentValues(twitter4j.User) -> a
    android.content.ContentValues makeDirectMessageContentValues(twitter4j.DirectMessage,long) -> a
    android.content.ContentValues makeStatusContentValues(twitter4j.Status,long) -> a
    void notifyForUpdatedUri(android.content.Context,android.net.Uri) -> c
    void openConversation(android.app.Activity,long,long) -> a
    void openTweetSearch(android.app.Activity,long,java.lang.String) -> a
    void openUserBlocks(android.app.Activity,long) -> a
    void openUserFavorites(android.app.Activity,long,long,java.lang.String) -> a
    void openUserFollowers(android.app.Activity,long,long,java.lang.String) -> b
    void openUserFollowing(android.app.Activity,long,long,java.lang.String) -> c
    void openUserProfile(android.app.Activity,long,long,java.lang.String) -> d
    void openUserTimeline(android.app.Activity,long,long,java.lang.String) -> e
    int parseInt(java.lang.String) -> h
    long parseLong(java.lang.String) -> i
    java.net.URL parseURL(java.lang.String) -> j
    void restartActivity(android.app.Activity,boolean) -> a
    void setIgnoreSSLError(java.net.URLConnection) -> a
    void setMenuForStatus(android.content.Context,android.view.Menu,org.mariotaku.twidere.model.ParcelableStatus) -> a
    void showErrorToast(android.content.Context,java.lang.Exception,boolean) -> a
org.mariotaku.twidere.util.Utils$1 -> org.mariotaku.twidere.util.al:
    boolean verify(java.lang.String,javax.net.ssl.SSLSession) -> verify
org.mariotaku.twidere.util.Utils$2 -> org.mariotaku.twidere.util.am:
    void checkClientTrusted(java.security.cert.X509Certificate[],java.lang.String) -> checkClientTrusted
    void checkServerTrusted(java.security.cert.X509Certificate[],java.lang.String) -> checkServerTrusted
    java.security.cert.X509Certificate[] getAcceptedIssuers() -> getAcceptedIssuers
org.mariotaku.twidere.util.WebViewProxySettings -> org.mariotaku.twidere.util.an:
    void resetProxy(android.webkit.WebView) -> a
    boolean setProxy(android.webkit.WebView,java.lang.String,int) -> a
    java.lang.Object getDeclaredField(java.lang.Object,java.lang.String) -> a
    java.lang.Object getNetworkInstance(android.content.Context) -> a
    java.lang.Object getRequestQueue(android.content.Context) -> b
    java.lang.Object invokeMethod(java.lang.Object,java.lang.String,java.lang.Object[],java.lang.Class[]) -> a
    void setDeclaredField(java.lang.Object,java.lang.String,java.lang.Object) -> a
org.mariotaku.twidere.view.ColorPickerView -> org.mariotaku.twidere.view.a:
    float HUE_PANEL_WIDTH -> a
    float ALPHA_PANEL_HEIGHT -> b
    float PANEL_SPACING -> c
    float PALETTE_CIRCLE_TRACKER_RADIUS -> d
    float RECTANGLE_TRACKER_OFFSET -> e
    float mDensity -> f
    org.mariotaku.twidere.view.ColorPickerView$OnColorChangedListener mListener -> g
    android.graphics.Paint mSatValPaint -> h
    android.graphics.Paint mSatValTrackerPaint -> i
    android.graphics.Paint mHuePaint -> j
    android.graphics.Paint mHueTrackerPaint -> k
    android.graphics.Paint mAlphaPaint -> l
    android.graphics.Paint mAlphaTextPaint -> m
    android.graphics.Paint mBorderPaint -> n
    android.graphics.Shader mValShader -> o
    android.graphics.Shader mSatShader -> p
    android.graphics.Shader mHueShader -> q
    android.graphics.Shader mAlphaShader -> r
    int mAlpha -> s
    float mHue -> t
    float mSat -> u
    float mVal -> v
    java.lang.String mAlphaSliderText -> w
    int mSliderTrackerColor -> x
    int mBorderColor -> y
    boolean mShowAlphaPanel -> z
    int mLastTouchedPanel -> A
    float mDrawingOffset -> B
    android.graphics.RectF mDrawingRect -> C
    android.graphics.RectF mSatValRect -> D
    android.graphics.RectF mHueRect -> E
    android.graphics.RectF mAlphaRect -> F
    org.mariotaku.twidere.graphic.AlphaPatternDrawable mAlphaPattern -> G
    android.graphics.Point mStartTouchPoint -> H
    java.lang.String getAlphaSliderText() -> getAlphaSliderText
    int getBorderColor() -> getBorderColor
    int getColor() -> getColor
    float getDrawingOffset() -> getDrawingOffset
    int getSliderTrackerColor() -> getSliderTrackerColor
    boolean onTouchEvent(android.view.MotionEvent) -> onTouchEvent
    boolean onTrackballEvent(android.view.MotionEvent) -> onTrackballEvent
    void setAlphaSliderText(int) -> setAlphaSliderText
    void setAlphaSliderText(java.lang.String) -> setAlphaSliderText
    void setAlphaSliderVisible(boolean) -> setAlphaSliderVisible
    void setBorderColor(int) -> setBorderColor
    void setColor(int) -> setColor
    void setColor(int,boolean) -> a
    void setOnColorChangedListener(org.mariotaku.twidere.view.ColorPickerView$OnColorChangedListener) -> setOnColorChangedListener
    void setSliderTrackerColor(int) -> setSliderTrackerColor
    void onDraw(android.graphics.Canvas) -> onDraw
    void onMeasure(int,int) -> onMeasure
    void onSizeChanged(int,int,int,int) -> onSizeChanged
    android.graphics.Point alphaToPoint(int) -> a
    int[] buildHueColorArray() -> a
    float calculateRequiredOffset() -> b
    int chooseHeight(int,int) -> a
    int chooseWidth(int,int) -> b
    void drawAlphaPanel(android.graphics.Canvas) -> a
    void drawHuePanel(android.graphics.Canvas) -> b
    void drawSatValPanel(android.graphics.Canvas) -> c
    int getPrefferedHeight() -> getPrefferedHeight
    int getPrefferedWidth() -> getPrefferedWidth
    android.graphics.Point hueToPoint(float) -> a
    void init() -> c
    void initPaintTools() -> d
    boolean moveTrackersIfNeeded(android.view.MotionEvent) -> a
    int pointToAlpha(int) -> b
    float pointToHue(float) -> b
    float[] pointToSatVal(float,float) -> a
    android.graphics.Point satValToPoint(float,float) -> b
    void setUpAlphaRect() -> e
    void setUpHueRect() -> f
    void setUpSatValRect() -> g
org.mariotaku.twidere.view.ColorPickerView$OnColorChangedListener -> org.mariotaku.twidere.view.b:
    void onColorChanged(int) -> a
org.mariotaku.twidere.view.ExtendedViewPager -> org.mariotaku.twidere.view.ExtendedViewPager:
    boolean mPagingEnabled -> a
    boolean onInterceptTouchEvent(android.view.MotionEvent) -> onInterceptTouchEvent
    boolean onTouchEvent(android.view.MotionEvent) -> onTouchEvent
    void setPagingEnabled(boolean) -> setPagingEnabled
org.mariotaku.twidere.view.ImageViewer -> org.mariotaku.twidere.view.ImageViewer:
    android.graphics.Bitmap mBitmap -> a
    android.graphics.Paint mPaint -> b
    android.graphics.Paint mBackgroundPaint -> c
    int mDx -> d
    int mDy -> e
    float mZoomFactor -> f
    float mMinZoomFactor -> g
    boolean mMotionControl -> h
    int mSavedX -> i
    int mSavedY -> j
    float mStartPinchDistance2 -> k
    float mStartZoomFactor -> l
    boolean isWaitingForDoubleTap -> m
    android.os.Handler mHandler -> n
    boolean onTouchEvent(android.view.MotionEvent) -> onTouchEvent
    void recycle() -> a
    void setBitmap(android.graphics.Bitmap) -> setBitmap
    void onDraw(android.graphics.Canvas) -> onDraw
    float getMinZoom(android.graphics.Bitmap) -> a
    boolean onSingleTouchEvent(android.view.MotionEvent) -> a
    void shift(int,int) -> a
    android.os.Handler access$0(org.mariotaku.twidere.view.ImageViewer) -> a
    float access$1(org.mariotaku.twidere.view.ImageViewer) -> b
    float access$2(org.mariotaku.twidere.view.ImageViewer) -> c
    void access$3(org.mariotaku.twidere.view.ImageViewer,float) -> a
    void access$4(org.mariotaku.twidere.view.ImageViewer,boolean) -> a
    void access$5(org.mariotaku.twidere.view.ImageViewer,float) -> b
    void access$6(org.mariotaku.twidere.view.ImageViewer,boolean) -> b
    void access$7(org.mariotaku.twidere.view.ImageViewer,int) -> a
    void access$8(org.mariotaku.twidere.view.ImageViewer,int) -> b
    void access$9(org.mariotaku.twidere.view.ImageViewer,float) -> c
    boolean access$10(org.mariotaku.twidere.view.ImageViewer) -> d
    int access$11(org.mariotaku.twidere.view.ImageViewer) -> e
    int access$12(org.mariotaku.twidere.view.ImageViewer) -> f
    void access$13(org.mariotaku.twidere.view.ImageViewer,int,int) -> a
    float access$14(org.mariotaku.twidere.view.ImageViewer) -> g
    float access$15(org.mariotaku.twidere.view.ImageViewer) -> h
org.mariotaku.twidere.view.ImageViewer$1 -> org.mariotaku.twidere.view.c:
    org.mariotaku.twidere.view.ImageViewer this$0 -> a
    void handleMessage(android.os.Message) -> handleMessage
org.mariotaku.twidere.view.ImageViewer$GetPointerCountAccessor -> org.mariotaku.twidere.view.d:
    int getPointerCount(android.view.MotionEvent) -> a
org.mariotaku.twidere.view.ImageViewer$OnMultiTouchEventCompat -> org.mariotaku.twidere.view.e:
    boolean onMultiTouchEvent(org.mariotaku.twidere.view.ImageViewer,android.view.MotionEvent) -> b
    boolean access$0(org.mariotaku.twidere.view.ImageViewer,android.view.MotionEvent) -> a
org.mariotaku.twidere.view.RoundCorneredImageView -> org.mariotaku.twidere.view.RoundCorneredImageView:
    android.graphics.Path mPath -> a
    void onDraw(android.graphics.Canvas) -> onDraw
    void onSizeChanged(int,int,int,int) -> onSizeChanged
    void createPath() -> a
    void init() -> b
org.mariotaku.twidere.view.StatusComposeEditText -> org.mariotaku.twidere.view.StatusComposeEditText:
    org.mariotaku.twidere.adapter.UserAutoCompleteAdapter mAdapter -> a
    void onAttachedToWindow() -> onAttachedToWindow
    void onDetachedFromWindow() -> onDetachedFromWindow
org.mariotaku.twidere.view.StatusComposeEditText$ScreenNameTokenizer -> org.mariotaku.twidere.view.f:
    int findTokenEnd(java.lang.CharSequence,int) -> findTokenEnd
    int findTokenStart(java.lang.CharSequence,int) -> findTokenStart
    java.lang.CharSequence terminateToken(java.lang.CharSequence) -> terminateToken
org.mariotaku.twidere.view.Switch -> org.mariotaku.twidere.view.Switch:
    android.graphics.drawable.Drawable mThumbDrawable -> a
    android.graphics.drawable.Drawable mTrackDrawable -> b
    int mThumbTextPadding -> c
    int mSwitchMinWidth -> d
    int mSwitchPadding -> e
    java.lang.CharSequence mTextOn -> f
    java.lang.CharSequence mTextOff -> g
    int mTouchMode -> h
    int mTouchSlop -> i
    float mTouchX -> j
    float mTouchY -> k
    android.view.VelocityTracker mVelocityTracker -> l
    int mMinFlingVelocity -> m
    float mThumbPosition -> n
    int mSwitchWidth -> o
    int mSwitchHeight -> p
    int mThumbWidth -> q
    int mSwitchLeft -> r
    int mSwitchTop -> s
    int mSwitchRight -> t
    int mSwitchBottom -> u
    android.text.TextPaint mTextPaint -> v
    android.content.res.ColorStateList mTextColors -> w
    android.text.Layout mOnLayout -> x
    android.text.Layout mOffLayout -> y
    android.graphics.Rect mTempRect -> z
    int[] CHECKED_STATE_SET -> A
    int getCompoundPaddingRight() -> getCompoundPaddingRight
    java.lang.CharSequence getTextOff() -> getTextOff
    java.lang.CharSequence getTextOn() -> getTextOn
    void onMeasure(int,int) -> onMeasure
    boolean onTouchEvent(android.view.MotionEvent) -> onTouchEvent
    void setChecked(boolean) -> setChecked
    void setSwitchTextAppearance(android.content.Context,int) -> a
    void setSwitchTypeface(android.graphics.Typeface) -> setSwitchTypeface
    void setTextOff(java.lang.CharSequence) -> setTextOff
    void setTextOn(java.lang.CharSequence) -> setTextOn
    void drawableStateChanged() -> drawableStateChanged
    int[] onCreateDrawableState(int) -> onCreateDrawableState
    void onDraw(android.graphics.Canvas) -> onDraw
    void onLayout(boolean,int,int,int,int) -> onLayout
    boolean verifyDrawable(android.graphics.drawable.Drawable) -> verifyDrawable
    void animateThumbToCheckedState(boolean) -> a
    void cancelSuperTouch(android.view.MotionEvent) -> a
    boolean getTargetCheckedState() -> getTargetCheckedState
    int getThumbScrollRange() -> getThumbScrollRange
    boolean hitThumb(float,float) -> a
    android.text.Layout makeLayout(java.lang.CharSequence) -> a
    void stopDrag(android.view.MotionEvent) -> b
org.mariotaku.twidere.view.TabPageIndicator -> org.mariotaku.twidere.view.TabPageIndicator:
    java.lang.Runnable mTabSelector -> b
    int mCurrentItem -> c
    org.mariotaku.twidere.view.TabPageIndicator$TitleProvider mAdapter -> d
    android.view.View$OnClickListener mTabClickListener -> e
    android.widget.LinearLayout mTabLayout -> f
    org.mariotaku.twidere.view.ExtendedViewPager mViewPager -> g
    android.support.v4.view.ViewPager$OnPageChangeListener mListener -> h
    android.view.LayoutInflater mInflater -> i
    int mMaxTabWidth -> a
    int mSelectedTabIndex -> j
    boolean mPagingEnabled -> k
    void notifyDataSetChanged() -> a
    void onAttachedToWindow() -> onAttachedToWindow
    void onDetachedFromWindow() -> onDetachedFromWindow
    void onMeasure(int,int) -> onMeasure
    void onPageScrolled(int,float,int) -> a
    void onPageScrollStateChanged(int) -> b
    void onPageSelected(int) -> a
    void setCurrentItem(int) -> setCurrentItem
    void setOnPageChangeListener(android.support.v4.view.ViewPager$OnPageChangeListener) -> setOnPageChangeListener
    void setPagingEnabled(boolean) -> setPagingEnabled
    void setViewPager(org.mariotaku.twidere.view.ExtendedViewPager) -> setViewPager
    void addTab(int,int) -> a
    void addTab(java.lang.String,int) -> a
    void addTab(java.lang.String,int,int) -> a
    void animateToTab(int) -> c
    boolean access$0(org.mariotaku.twidere.view.TabPageIndicator) -> a
    int access$1(org.mariotaku.twidere.view.TabPageIndicator) -> b
    org.mariotaku.twidere.view.TabPageIndicator$TitleProvider access$2(org.mariotaku.twidere.view.TabPageIndicator) -> c
    void access$3(org.mariotaku.twidere.view.TabPageIndicator,int) -> a
    org.mariotaku.twidere.view.ExtendedViewPager access$4(org.mariotaku.twidere.view.TabPageIndicator) -> d
    void access$5(org.mariotaku.twidere.view.TabPageIndicator,java.lang.Runnable) -> a
org.mariotaku.twidere.view.TabPageIndicator$1 -> org.mariotaku.twidere.view.g:
    org.mariotaku.twidere.view.TabPageIndicator this$0 -> a
    void onClick(android.view.View) -> onClick
org.mariotaku.twidere.view.TabPageIndicator$2 -> org.mariotaku.twidere.view.h:
    org.mariotaku.twidere.view.TabPageIndicator this$0 -> a
    android.view.View val$tabView -> b
    void run() -> run
org.mariotaku.twidere.view.TabPageIndicator$TabView -> org.mariotaku.twidere.view.TabPageIndicator$TabView:
    org.mariotaku.twidere.view.TabPageIndicator mParent -> a
    int mIndex -> b
    int getIndex() -> getIndex
    void init(org.mariotaku.twidere.view.TabPageIndicator,int,int) -> a
    void init(org.mariotaku.twidere.view.TabPageIndicator,java.lang.String,int) -> a
    void init(org.mariotaku.twidere.view.TabPageIndicator,java.lang.String,int,int) -> a
    void onMeasure(int,int) -> onMeasure
org.mariotaku.twidere.view.TabPageIndicator$TitleProvider -> org.mariotaku.twidere.view.i:
    java.lang.Integer getIcon(int) -> b
    java.lang.String getTitle(int) -> c
    void onPageReselected(int) -> d
    void onPageSelected(int) -> e
twitter4j.AccountTotals -> b.a:
twitter4j.Annotation -> b.b:
    java.lang.String type -> a
    java.util.Map attributes -> b
    int compareTo(twitter4j.Annotation) -> a
    boolean equals(java.lang.Object) -> equals
    java.util.Map getAttributes() -> a
    java.lang.String getType() -> b
    int hashCode() -> hashCode
    void setAttributes(java.util.Map) -> a
    void setType(java.lang.String) -> a
    java.lang.Integer size() -> c
    java.lang.String toString() -> toString
    java.util.SortedSet sortedNames() -> e
    org.json.JSONObject asJSONObject() -> d
    int compareTo(java.lang.Object) -> compareTo
twitter4j.Annotations -> b.c:
    java.util.List annotations -> a
    void addAnnotation(twitter4j.Annotation) -> a
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    boolean isEmpty() -> a
    void setAnnotations(java.util.List) -> a
    java.lang.Integer size() -> b
    java.lang.String toString() -> toString
    java.util.List getSortedAnnotations() -> d
    java.lang.String asParameterValue() -> c
twitter4j.DirectMessage -> b.d:
    java.util.Date getCreatedAt() -> a
    long getId() -> b
    twitter4j.User getRecipient() -> c
    twitter4j.User getSender() -> d
    java.lang.String getText() -> e
twitter4j.EntitySupport -> b.e:
    twitter4j.MediaEntity[] getMediaEntities() -> a
    twitter4j.URLEntity[] getURLEntities() -> b
twitter4j.ExceptionDiagnosis -> b.f:
    int stackLineHash -> a
    int lineNumberHash -> b
    java.lang.String hexString -> c
    java.lang.Throwable th -> d
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    java.lang.String toHexString(int) -> a
    java.lang.String asHexString() -> a
    java.lang.String getLineNumberHashAsHex() -> b
    java.lang.String getStackLineHashAsHex() -> c
twitter4j.GeoLocation -> b.g:
    double latitude -> a
    double longitude -> b
    boolean equals(java.lang.Object) -> equals
    double getLatitude() -> a
    double getLongitude() -> b
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
twitter4j.HashtagEntity -> b.h:
twitter4j.IDs -> b.i:
    long[] getIDs() -> a
twitter4j.Location -> b.j:
twitter4j.MediaEntity -> b.k:
    java.net.URL getMediaURL() -> a
twitter4j.MediaEntity$Size -> b.l:
    java.lang.Integer THUMB -> a
    java.lang.Integer SMALL -> b
    java.lang.Integer MEDIUM -> c
    java.lang.Integer LARGE -> d
twitter4j.Paging -> b.m:
    int page -> c
    int count -> d
    long sinceId -> e
    long maxId -> f
    char[] S -> a
    char[] SMCP -> b
    twitter4j.internal.http.HttpParameter[] NULL_PARAMETER_ARRAY -> g
    java.util.List NULL_PARAMETER_LIST -> h
    boolean equals(java.lang.Object) -> equals
    int getCount() -> a
    long getMaxId() -> b
    int getPage() -> c
    long getSinceId() -> d
    int hashCode() -> hashCode
    void setCount(int) -> a
    void setMaxId(long) -> a
    java.lang.String toString() -> toString
    void addPostParameter(char[],char,java.util.List,java.lang.String,long) -> a
    twitter4j.internal.http.HttpParameter[] asPostParameterArray() -> e
    java.util.List asPostParameterList(char[],java.lang.String) -> a
twitter4j.Place -> b.n:
    java.lang.String getId() -> a
twitter4j.Query -> b.o:
    java.lang.String query -> a
    java.lang.String lang -> b
    java.lang.String locale -> c
    long maxId -> d
    int rpp -> e
    int page -> f
    java.lang.String since -> g
    long sinceId -> h
    java.lang.String geocode -> i
    java.lang.String until -> j
    java.lang.String resultType -> k
    twitter4j.internal.http.HttpParameter WITH_TWITTER_USER_ID -> l
    boolean equals(java.lang.Object) -> equals
    int getPage() -> a
    int getRpp() -> b
    long getSinceId() -> c
    int hashCode() -> hashCode
    void setMaxId(long) -> a
    void setRpp(int) -> a
    java.lang.String toString() -> toString
    void appendParameter(java.lang.String,long,java.util.List) -> a
    void appendParameter(java.lang.String,java.lang.String,java.util.List) -> a
    twitter4j.internal.http.HttpParameter[] asHttpParameterArray(twitter4j.internal.http.HttpParameter) -> a
twitter4j.QueryResult -> b.p:
    double getCompletedIn() -> a
    long getMaxId() -> b
    int getPage() -> c
    java.lang.String getQuery() -> d
    java.lang.String getRefreshUrl() -> e
    int getResultsPerPage() -> f
    long getSinceId() -> g
    java.util.List getTweets() -> h
    java.lang.String getWarning() -> i
twitter4j.RateLimitStatus -> b.q:
    int getSecondsUntilReset() -> a
twitter4j.RateLimitStatusEvent -> b.r:
    twitter4j.RateLimitStatus rateLimitStatus -> a
    boolean isAccountRateLimitStatus -> b
twitter4j.RateLimitStatusListener -> b.s:
    void onRateLimitReached(twitter4j.RateLimitStatusEvent) -> a
    void onRateLimitStatus(twitter4j.RateLimitStatusEvent) -> b
twitter4j.RelatedResults -> b.t:
twitter4j.Relationship -> b.u:
    long getSourceUserId() -> a
    java.lang.String getSourceUserScreenName() -> b
    long getTargetUserId() -> c
    java.lang.String getTargetUserScreenName() -> d
    boolean isSourceBlockingTarget() -> e
    boolean isSourceFollowingTarget() -> f
twitter4j.ResponseList -> b.v:
twitter4j.SavedSearch -> b.w:
    int getId() -> a
twitter4j.Status -> b.x:
    java.util.Date getCreatedAt() -> c
    twitter4j.GeoLocation getGeoLocation() -> d
    long getId() -> e
    java.lang.String getInReplyToScreenName() -> f
    long getInReplyToStatusId() -> g
    long getInReplyToUserId() -> h
    long getRetweetCount() -> i
    twitter4j.Status getRetweetedStatus() -> j
    java.lang.String getSource() -> k
    java.lang.String getText() -> l
    twitter4j.User getUser() -> m
    boolean isFavorited() -> n
    boolean isRetweet() -> o
twitter4j.StatusDeletionNotice -> b.y:
    long getStatusId() -> a
twitter4j.StatusDeletionNoticeImpl -> b.z:
    long statusId -> a
    long userId -> b
    int compareTo(twitter4j.StatusDeletionNotice) -> a
    boolean equals(java.lang.Object) -> equals
    long getStatusId() -> a
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    int compareTo(java.lang.Object) -> compareTo
twitter4j.StatusUpdate -> b.aa:
    java.lang.String status -> a
    long inReplyToStatusId -> b
    twitter4j.GeoLocation location -> c
    java.lang.String placeId -> d
    boolean displayCoordinates -> e
    twitter4j.Annotations annotations -> f
    boolean possiblySensitive -> g
    java.lang.String mediaName -> h
    java.io.InputStream mediaBody -> i
    java.io.File mediaFile -> j
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    void setInReplyToStatusId(long) -> a
    void setLocation(twitter4j.GeoLocation) -> a
    void setMedia(java.io.File) -> a
    java.lang.String toString() -> toString
    void appendParameter(java.lang.String,double,java.util.List) -> a
    void appendParameter(java.lang.String,long,java.util.List) -> a
    void appendParameter(java.lang.String,java.lang.String,java.util.List) -> a
    twitter4j.internal.http.HttpParameter[] asHttpParameterArray(twitter4j.internal.http.HttpParameter) -> a
    boolean isWithMedia() -> a
twitter4j.Trend -> b.ab:
    java.lang.String getName() -> a
    java.lang.String getQuery() -> b
    java.lang.String getUrl() -> c
twitter4j.Trends -> b.ac:
    java.util.Date getAsOf() -> a
    java.util.Date getTrendAt() -> b
    twitter4j.Trend[] getTrends() -> c
twitter4j.Tweet -> b.ad:
    java.util.Date getCreatedAt() -> c
    java.lang.String getFromUser() -> d
    long getFromUserId() -> e
    twitter4j.GeoLocation getGeoLocation() -> f
    long getId() -> g
    java.lang.String getProfileImageUrl() -> h
    java.lang.String getSource() -> i
    java.lang.String getText() -> j
    java.lang.String getToUser() -> k
    long getToUserId() -> l
twitter4j.Twitter -> b.ae:
twitter4j.TwitterAPIMonitor -> b.af:
    java.util.regex.Pattern pattern -> a
    twitter4j.TwitterAPIMonitor SINGLETON -> b
    twitter4j.management.APIStatistics STATISTICS -> c
    void methodCalled(java.lang.String,long,boolean) -> a
    twitter4j.TwitterAPIMonitor getInstance() -> a
twitter4j.TwitterBase -> b.ag:
    twitter4j.conf.Configuration getConfiguration() -> a
twitter4j.TwitterBaseImpl -> b.ah:
    twitter4j.conf.Configuration conf -> a
    java.lang.String screenName -> b
    long id -> c
    twitter4j.internal.http.HttpClientWrapper http -> d
    java.util.List rateLimitStatusListeners -> g
    twitter4j.internal.json.z_T4JInternalFactory factory -> e
    twitter4j.auth.Authorization auth -> f
    boolean equals(java.lang.Object) -> equals
    twitter4j.conf.Configuration getConfiguration() -> a
    twitter4j.auth.AccessToken getOAuthAccessToken(twitter4j.auth.RequestToken,java.lang.String) -> a
    twitter4j.auth.AccessToken getOAuthAccessToken(java.lang.String,java.lang.String) -> a
    twitter4j.auth.RequestToken getOAuthRequestToken(java.lang.String) -> a
    int hashCode() -> hashCode
    void httpResponseReceived(twitter4j.internal.http.HttpResponseEvent) -> a
    java.lang.String toString() -> toString
    void ensureAuthorizationEnabled() -> b
    twitter4j.User fillInIDAndScreenName() -> c
    void setFactory() -> d
    twitter4j.auth.OAuthSupport getOAuth() -> e
    void init() -> f
twitter4j.TwitterException -> b.ai:
    int statusCode -> b
    twitter4j.ExceptionDiagnosis exceptionDiagnosis -> c
    twitter4j.internal.http.HttpResponse response -> d
    java.lang.String errorMessage -> e
    java.lang.String requestPath -> f
    java.lang.String[] FILTER -> g
    boolean nested -> a
    boolean equals(java.lang.Object) -> equals
    java.lang.String getExceptionCode() -> a
    twitter4j.RateLimitStatus getFeatureSpecificRateLimitStatus() -> b
    java.lang.String getMessage() -> getMessage
    twitter4j.RateLimitStatus getRateLimitStatus() -> c
    int getRetryAfter() -> d
    int getStatusCode() -> e
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    void decode(java.lang.String) -> a
    twitter4j.ExceptionDiagnosis getExceptionDiagnosis() -> g
    void setNested() -> f
    java.lang.String getCause(int) -> a
twitter4j.TwitterFactory -> b.aj:
    twitter4j.auth.Authorization DEFAULT_AUTHORIZATION -> a
    twitter4j.Twitter SINGLETON -> b
    twitter4j.conf.Configuration conf -> c
    twitter4j.Twitter getInstance() -> a
    twitter4j.Twitter getInstance(twitter4j.auth.AccessToken) -> a
    twitter4j.Twitter getInstance(twitter4j.auth.Authorization) -> a
twitter4j.TwitterImpl -> b.ak:
    twitter4j.internal.http.HttpParameter INCLUDE_ENTITIES -> g
    twitter4j.internal.http.HttpParameter INCLUDE_RTS -> h
    twitter4j.internal.http.HttpParameter INCLUDE_MY_RETWEET -> i
    twitter4j.User createBlock(long) -> a
    twitter4j.Status createFavorite(long) -> b
    twitter4j.User createFriendship(long) -> c
    twitter4j.User destroyBlock(long) -> d
    twitter4j.Status destroyFavorite(long) -> e
    twitter4j.User destroyFriendship(long) -> f
    twitter4j.Status destroyStatus(long) -> g
    boolean equals(java.lang.Object) -> equals
    twitter4j.IDs getBlockingUsersIDs() -> e
    twitter4j.ResponseList getDailyTrends() -> f
    twitter4j.ResponseList getDirectMessages(twitter4j.Paging) -> a
    twitter4j.ResponseList getFavorites(java.lang.String,twitter4j.Paging) -> a
    twitter4j.IDs getFollowersIDs(long,long) -> a
    twitter4j.IDs getFollowersIDs(java.lang.String,long) -> a
    twitter4j.IDs getFriendsIDs(long,long) -> b
    twitter4j.IDs getFriendsIDs(java.lang.String,long) -> b
    twitter4j.ResponseList getHomeTimeline(twitter4j.Paging) -> b
    twitter4j.ResponseList getMentions(twitter4j.Paging) -> c
    twitter4j.ResponseList getSentDirectMessages(twitter4j.Paging) -> d
    twitter4j.ResponseList getUserTimeline(long,twitter4j.Paging) -> a
    twitter4j.ResponseList getUserTimeline(java.lang.String,twitter4j.Paging) -> b
    twitter4j.ResponseList getWeeklyTrends() -> g
    int hashCode() -> hashCode
    twitter4j.ResponseList lookupUsers(long[]) -> a
    twitter4j.User reportSpam(long) -> h
    twitter4j.Status retweetStatus(long) -> i
    twitter4j.QueryResult search(twitter4j.Query) -> a
    twitter4j.ResponseList searchUsers(java.lang.String,int) -> a
    twitter4j.Relationship showFriendship(long,long) -> c
    twitter4j.Status showStatus(long) -> j
    twitter4j.User showUser(long) -> k
    twitter4j.User showUser(java.lang.String) -> b
    boolean test() -> h
    java.lang.String toString() -> toString
    twitter4j.User updateProfile(java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> a
    twitter4j.User updateProfileImage(java.io.File) -> a
    twitter4j.Status updateStatus(twitter4j.StatusUpdate) -> a
    twitter4j.User verifyCredentials() -> i
    void addParameterToList(java.util.List,java.lang.String,java.lang.String) -> a
    void checkFileValidity(java.io.File) -> b
    twitter4j.internal.http.HttpResponse get(java.lang.String) -> c
    twitter4j.internal.http.HttpResponse get(java.lang.String,twitter4j.internal.http.HttpParameter[]) -> a
    boolean isOk(twitter4j.internal.http.HttpResponse) -> a
    twitter4j.internal.http.HttpParameter[] mergeParameters(twitter4j.internal.http.HttpParameter[],twitter4j.internal.http.HttpParameter) -> a
    twitter4j.internal.http.HttpParameter[] mergeParameters(twitter4j.internal.http.HttpParameter[],twitter4j.internal.http.HttpParameter[]) -> a
    twitter4j.internal.http.HttpResponse post(java.lang.String) -> d
    twitter4j.internal.http.HttpResponse post(java.lang.String,twitter4j.internal.http.HttpParameter[]) -> b
twitter4j.TwitterResponse -> b.al:
twitter4j.URLEntity -> b.am:
    int getEnd() -> b
    java.net.URL getExpandedURL() -> c
    int getStart() -> d
twitter4j.User -> b.an:
    java.util.Date getCreatedAt() -> a
    java.lang.String getDescription() -> b
    int getFavouritesCount() -> c
    int getFollowersCount() -> d
    int getFriendsCount() -> e
    long getId() -> f
    java.lang.String getLocation() -> g
    java.lang.String getName() -> h
    java.net.URL getProfileImageURL() -> i
    java.lang.String getScreenName() -> j
    int getStatusesCount() -> k
    java.net.URL getURL() -> l
    boolean isProtected() -> m
twitter4j.UserList -> b.ao:
    int getId() -> a
twitter4j.UserMentionEntity -> b.ap:
twitter4j.Version -> b.aq:
    java.lang.String getVersion() -> a
twitter4j.api.AccountMethods -> b.a.a:
    twitter4j.User updateProfile(java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> a
    twitter4j.User updateProfileImage(java.io.File) -> a
    twitter4j.User verifyCredentials() -> i
twitter4j.api.BlockMethods -> b.a.b:
    twitter4j.User createBlock(long) -> a
    twitter4j.User destroyBlock(long) -> d
    twitter4j.IDs getBlockingUsersIDs() -> e
twitter4j.api.DirectMessageMethods -> b.a.c:
    twitter4j.ResponseList getDirectMessages(twitter4j.Paging) -> a
    twitter4j.ResponseList getSentDirectMessages(twitter4j.Paging) -> d
twitter4j.api.FavoriteMethods -> b.a.d:
    twitter4j.Status createFavorite(long) -> b
    twitter4j.Status destroyFavorite(long) -> e
    twitter4j.ResponseList getFavorites(java.lang.String,twitter4j.Paging) -> a
twitter4j.api.FriendsFollowersMethods -> b.a.e:
    twitter4j.IDs getFollowersIDs(long,long) -> a
    twitter4j.IDs getFollowersIDs(java.lang.String,long) -> a
    twitter4j.IDs getFriendsIDs(long,long) -> b
    twitter4j.IDs getFriendsIDs(java.lang.String,long) -> b
twitter4j.api.FriendshipMethods -> b.a.f:
    twitter4j.User createFriendship(long) -> c
    twitter4j.User destroyFriendship(long) -> f
    twitter4j.Relationship showFriendship(long,long) -> c
twitter4j.api.HelpMethods -> b.a.g:
    boolean test() -> h
twitter4j.api.SearchMethods -> b.a.h:
    twitter4j.QueryResult search(twitter4j.Query) -> a
twitter4j.api.SpamReportingMethods -> b.a.i:
    twitter4j.User reportSpam(long) -> h
twitter4j.api.StatusMethods -> b.a.j:
    twitter4j.Status destroyStatus(long) -> g
    twitter4j.Status retweetStatus(long) -> i
    twitter4j.Status showStatus(long) -> j
    twitter4j.Status updateStatus(twitter4j.StatusUpdate) -> a
twitter4j.api.TimelineMethods -> b.a.k:
    twitter4j.ResponseList getHomeTimeline(twitter4j.Paging) -> b
    twitter4j.ResponseList getMentions(twitter4j.Paging) -> c
    twitter4j.ResponseList getUserTimeline(long,twitter4j.Paging) -> a
    twitter4j.ResponseList getUserTimeline(java.lang.String,twitter4j.Paging) -> b
twitter4j.api.TrendsMethods -> b.a.l:
    twitter4j.ResponseList getDailyTrends() -> f
    twitter4j.ResponseList getWeeklyTrends() -> g
twitter4j.api.UserMethods -> b.a.m:
    twitter4j.ResponseList lookupUsers(long[]) -> a
    twitter4j.ResponseList searchUsers(java.lang.String,int) -> a
    twitter4j.User showUser(long) -> k
    twitter4j.User showUser(java.lang.String) -> b
twitter4j.auth.AccessToken -> b.b.a:
    java.lang.String screenName -> b
    long userId -> c
    boolean equals(java.lang.Object) -> equals
    long getUserId() -> a
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    java.lang.String getParameter(java.lang.String) -> a
    java.lang.String getTokenSecret() -> b
    java.lang.String getToken() -> c
twitter4j.auth.Authorization -> b.b.b:
    java.lang.String getAuthorizationHeader(twitter4j.internal.http.HttpRequest) -> a
    boolean isEnabled() -> a
twitter4j.auth.AuthorizationFactory -> b.b.c:
    twitter4j.auth.Authorization getInstance(twitter4j.conf.Configuration) -> a
twitter4j.auth.BasicAuthorization -> b.b.d:
    java.lang.String userId -> a
    java.lang.String password -> b
    java.lang.String basic -> c
    boolean equals(java.lang.Object) -> equals
    java.lang.String getAuthorizationHeader(twitter4j.internal.http.HttpRequest) -> a
    int hashCode() -> hashCode
    boolean isEnabled() -> a
    java.lang.String toString() -> toString
    java.lang.String encodeBasicAuthenticationString() -> b
twitter4j.auth.NullAuthorization -> b.b.e:
    twitter4j.auth.NullAuthorization SINGLETON -> a
    boolean equals(java.lang.Object) -> equals
    java.lang.String getAuthorizationHeader(twitter4j.internal.http.HttpRequest) -> a
    boolean isEnabled() -> a
    java.lang.String toString() -> toString
    twitter4j.auth.NullAuthorization getInstance() -> b
twitter4j.auth.OAuthAuthorization -> b.b.f:
    twitter4j.conf.Configuration conf -> a
    twitter4j.internal.http.HttpClientWrapper http -> b
    twitter4j.internal.http.HttpParameter OAUTH_SIGNATURE_METHOD -> c
    twitter4j.internal.logging.Logger logger -> d
    java.lang.String consumerKey -> e
    java.lang.String consumerSecret -> f
    java.lang.String realm -> g
    twitter4j.auth.OAuthToken oauthToken -> h
    java.util.Random RAND -> i
    boolean equals(java.lang.Object) -> equals
    java.lang.String getAuthorizationHeader(twitter4j.internal.http.HttpRequest) -> a
    twitter4j.auth.AccessToken getOAuthAccessToken(twitter4j.auth.RequestToken,java.lang.String) -> a
    twitter4j.auth.AccessToken getOAuthAccessToken(java.lang.String) -> b
    twitter4j.auth.AccessToken getOAuthAccessToken(java.lang.String,java.lang.String) -> a
    twitter4j.auth.RequestToken getOAuthRequestToken(java.lang.String) -> a
    twitter4j.auth.RequestToken getOAuthRequestToken(java.lang.String,java.lang.String) -> b
    int hashCode() -> hashCode
    boolean isEnabled() -> a
    void setOAuthAccessToken(twitter4j.auth.AccessToken) -> a
    void setOAuthConsumer(java.lang.String,java.lang.String) -> c
    java.lang.String toString() -> toString
    void ensureTokenIsAvailable() -> b
    void parseGetParameters(java.lang.String,java.util.List) -> a
    java.lang.String generateAuthorizationHeader(java.lang.String,java.lang.String,twitter4j.internal.http.HttpParameter[],twitter4j.auth.OAuthToken) -> a
    java.lang.String generateAuthorizationHeader(java.lang.String,java.lang.String,twitter4j.internal.http.HttpParameter[],java.lang.String,java.lang.String,twitter4j.auth.OAuthToken) -> a
    java.lang.String generateSignature(java.lang.String,twitter4j.auth.OAuthToken) -> a
    java.lang.String constructRequestURL(java.lang.String) -> c
    java.lang.String encodeParameters(java.util.List) -> a
    java.lang.String encodeParameters(java.util.List,java.lang.String,boolean) -> a
    java.lang.String normalizeRequestParameters(java.util.List) -> b
    java.util.List toParamList(twitter4j.internal.http.HttpParameter[]) -> a
twitter4j.auth.OAuthSupport -> b.b.g:
    twitter4j.auth.AccessToken getOAuthAccessToken(twitter4j.auth.RequestToken,java.lang.String) -> a
    twitter4j.auth.AccessToken getOAuthAccessToken(java.lang.String,java.lang.String) -> a
    twitter4j.auth.RequestToken getOAuthRequestToken(java.lang.String) -> a
twitter4j.auth.OAuthToken -> b.b.h:
    java.lang.String token -> b
    java.lang.String tokenSecret -> c
    javax.crypto.spec.SecretKeySpec secretKeySpec -> d
    java.lang.String[] responseStr -> a
    boolean equals(java.lang.Object) -> equals
    java.lang.String getParameter(java.lang.String) -> a
    java.lang.String getToken() -> c
    java.lang.String getTokenSecret() -> b
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    javax.crypto.spec.SecretKeySpec getSecretKeySpec() -> d
    void setSecretKeySpec(javax.crypto.spec.SecretKeySpec) -> a
twitter4j.auth.RequestToken -> b.b.i:
    twitter4j.conf.Configuration conf -> b
    twitter4j.auth.OAuthSupport oauth -> c
    java.lang.String getAuthorizationURL() -> a
    java.lang.String toString() -> toString
    java.lang.String getParameter(java.lang.String) -> a
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String getTokenSecret() -> b
    java.lang.String getToken() -> c
twitter4j.auth.TwipOModeAuthorization -> b.b.j:
    twitter4j.auth.TwipOModeAuthorization SINGLETON -> a
    boolean equals(java.lang.Object) -> equals
    java.lang.String getAuthorizationHeader(twitter4j.internal.http.HttpRequest) -> a
    boolean isEnabled() -> a
    java.lang.String toString() -> toString
twitter4j.conf.Configuration -> b.c.a:
    java.lang.String getOAuthAccessToken() -> a
    java.lang.String getOAuthAccessTokenSecret() -> b
    java.lang.String getOAuthAccessTokenURL() -> c
    java.lang.String getOAuthAuthorizationURL() -> d
    java.lang.String getOAuthRequestTokenURL() -> e
    java.lang.String getSigningOAuthAccessTokenURL() -> f
    java.lang.String getSigningOAuthRequestTokenURL() -> g
    java.lang.String getOAuthConsumerKey() -> h
    java.lang.String getOAuthConsumerSecret() -> i
    java.lang.String getPassword() -> j
    java.lang.String getRestBaseURL() -> k
    java.lang.String getSearchBaseURL() -> l
    java.lang.String getUploadBaseURL() -> m
    java.lang.String getUser() -> n
    boolean isIncludeEntitiesEnabled() -> o
    boolean isIncludeRTsEnabled() -> p
    boolean isJSONStoreEnabled() -> q
twitter4j.conf.ConfigurationBase -> b.c.b:
    boolean debug -> b
    java.lang.String userAgent -> c
    java.lang.String user -> d
    java.lang.String password -> e
    boolean useSSL -> f
    boolean ignoreSSLError -> g
    boolean prettyDebug -> h
    boolean gzipEnabled -> i
    java.lang.String httpProxyHost -> j
    java.lang.String httpProxyUser -> k
    java.lang.String httpProxyPassword -> l
    int httpProxyPort -> m
    int httpConnectionTimeout -> n
    int httpReadTimeout -> o
    int httpStreamingReadTimeout -> p
    int httpRetryCount -> q
    int httpRetryIntervalSeconds -> r
    int maxTotalConnections -> s
    int defaultMaxPerRoute -> t
    java.lang.String oAuthConsumerKey -> u
    java.lang.String oAuthConsumerSecret -> v
    java.lang.String oAuthAccessToken -> w
    java.lang.String oAuthAccessTokenSecret -> x
    java.lang.String oAuthRequestTokenURL -> y
    java.lang.String oAuthAuthorizationURL -> z
    java.lang.String oAuthAccessTokenURL -> A
    java.lang.String oAuthAuthenticationURL -> B
    java.lang.String signingOAuthRequestTokenURL -> C
    java.lang.String signingOAuthAuthorizationURL -> D
    java.lang.String signingOAuthAccessTokenURL -> E
    java.lang.String signingOAuthAuthenticationURL -> F
    java.lang.String oAuthBaseURL -> G
    java.lang.String signingOAuthBaseURL -> H
    java.lang.String signingRestBaseURL -> I
    java.lang.String restBaseURL -> J
    java.lang.String searchBaseURL -> K
    java.lang.String streamBaseURL -> L
    java.lang.String userStreamBaseURL -> M
    java.lang.String siteStreamBaseURL -> N
    java.lang.String uploadBaseURL -> O
    java.lang.String dispatcherImpl -> P
    int asyncNumThreads -> Q
    boolean includeRTsEnabled -> R
    boolean includeEntitiesEnabled -> S
    boolean jsonStoreEnabled -> T
    boolean userStreamRepliesAllEnabled -> U
    java.lang.String mediaProvider -> V
    java.lang.String mediaProviderAPIKey -> W
    java.util.Properties mediaProviderParameters -> X
    java.lang.String clientVersion -> Y
    java.lang.String clientURL -> Z
    java.lang.String clientName -> aa
    java.util.Map requestHeaders -> a
    java.util.List instances -> ab
    boolean equals(java.lang.Object) -> equals
    java.lang.String getClientURL() -> r
    java.lang.String getClientName() -> s
    java.lang.String getClientVersion() -> t
    int getHttpConnectionTimeout() -> u
    java.lang.String getHttpProxyHost() -> v
    java.lang.String getHttpProxyPassword() -> w
    int getHttpProxyPort() -> x
    java.lang.String getHttpProxyUser() -> y
    int getHttpReadTimeout() -> z
    int getHttpRetryCount() -> A
    int getHttpRetryIntervalSeconds() -> B
    boolean isSSLErrorIgnored() -> C
    java.lang.String getOAuthAccessToken() -> a
    java.lang.String getOAuthAccessTokenSecret() -> b
    java.lang.String getOAuthAccessTokenURL() -> c
    java.lang.String getOAuthAuthorizationURL() -> d
    java.lang.String getOAuthConsumerKey() -> h
    java.lang.String getOAuthConsumerSecret() -> i
    java.lang.String getOAuthRequestTokenURL() -> e
    java.lang.String getPassword() -> j
    java.util.Map getRequestHeaders() -> D
    java.lang.String getRestBaseURL() -> k
    java.lang.String getSearchBaseURL() -> l
    java.lang.String getUploadBaseURL() -> m
    java.lang.String getUser() -> n
    java.lang.String getUserAgent() -> E
    int hashCode() -> hashCode
    boolean isIncludeEntitiesEnabled() -> o
    boolean isIncludeRTsEnabled() -> p
    boolean isJSONStoreEnabled() -> q
    boolean isPrettyDebugEnabled() -> F
    java.lang.String toString() -> toString
    void cacheInstance() -> G
    void setAsyncNumThreads(int) -> a
    void setClientURL(java.lang.String) -> a
    void setClientName(java.lang.String) -> b
    void setClientVersion(java.lang.String) -> c
    void setDebug(boolean) -> a
    void setDispatcherImpl(java.lang.String) -> d
    void setGZIPEnabled(boolean) -> b
    void setHttpConnectionTimeout(int) -> b
    void setHttpDefaultMaxPerRoute(int) -> c
    void setHttpMaxTotalConnections(int) -> d
    void setHttpProxyHost(java.lang.String) -> e
    void setHttpProxyPassword(java.lang.String) -> f
    void setHttpProxyPort(int) -> e
    void setHttpProxyUser(java.lang.String) -> g
    void setHttpReadTimeout(int) -> f
    void setHttpRetryCount(int) -> g
    void setHttpRetryIntervalSeconds(int) -> h
    void setHttpStreamingReadTimeout(int) -> i
    void setIgnoreSSLError(boolean) -> c
    void setIncludeEntitiesEnbled(boolean) -> d
    void setIncludeRTsEnbled(boolean) -> e
    void setJSONStoreEnabled(boolean) -> f
    void setMediaProvider(java.lang.String) -> h
    void setMediaProviderAPIKey(java.lang.String) -> i
    void setMediaProviderParameters(java.util.Properties) -> a
    void setOAuthAccessToken(java.lang.String) -> j
    void setOAuthAccessTokenSecret(java.lang.String) -> k
    void setOAuthAccessTokenURL(java.lang.String) -> l
    void setOAuthAuthenticationURL(java.lang.String) -> m
    void setOAuthAuthorizationURL(java.lang.String) -> n
    void setOAuthRequestTokenURL(java.lang.String) -> o
    void setOAuthBaseURL(java.lang.String) -> p
    void setOAuthConsumerKey(java.lang.String) -> q
    void setOAuthConsumerSecret(java.lang.String) -> r
    void setPassword(java.lang.String) -> s
    void setPrettyDebugEnabled(boolean) -> g
    void setRestBaseURL(java.lang.String) -> t
    void setSearchBaseURL(java.lang.String) -> u
    void setSigningOAuthBaseURL(java.lang.String) -> v
    void setSigningRestBaseURL(java.lang.String) -> w
    void setSiteStreamBaseURL(java.lang.String) -> x
    void setStreamBaseURL(java.lang.String) -> y
    void setUploadBaseURL(java.lang.String) -> z
    void setUser(java.lang.String) -> A
    void setUserAgent(java.lang.String) -> B
    void setUserStreamBaseURL(java.lang.String) -> C
    void setUserStreamRepliesAllEnabled(boolean) -> h
    void setUseSSL(boolean) -> i
    void fixRestBaseURL() -> H
    void fixUploadBaseURL() -> I
    java.lang.String fixURLSlash(java.lang.String) -> D
    void initRequestHeaders() -> J
    void cacheInstance(twitter4j.conf.ConfigurationBase) -> a
    boolean isNullOrEmpty(java.lang.String) -> E
    java.lang.String fixURL(boolean,java.lang.String) -> a
    java.lang.String getSigningOAuthAccessTokenURL() -> f
    java.lang.String getSigningOAuthRequestTokenURL() -> g
twitter4j.conf.ConfigurationBuilder -> b.c.c:
    twitter4j.conf.ConfigurationBase configuration -> a
    twitter4j.conf.Configuration build() -> a
    twitter4j.conf.ConfigurationBuilder setGZIPEnabled(boolean) -> a
    twitter4j.conf.ConfigurationBuilder setHttpProxyHost(java.lang.String) -> a
    twitter4j.conf.ConfigurationBuilder setHttpProxyPort(int) -> a
    twitter4j.conf.ConfigurationBuilder setIgnoreSSLError(boolean) -> b
    twitter4j.conf.ConfigurationBuilder setIncludeEntitiesEnabled(boolean) -> c
    twitter4j.conf.ConfigurationBuilder setIncludeRTsEnabled(boolean) -> d
    twitter4j.conf.ConfigurationBuilder setOAuthBaseURL(java.lang.String) -> b
    twitter4j.conf.ConfigurationBuilder setOAuthConsumerKey(java.lang.String) -> c
    twitter4j.conf.ConfigurationBuilder setOAuthConsumerSecret(java.lang.String) -> d
    twitter4j.conf.ConfigurationBuilder setRestBaseURL(java.lang.String) -> e
    twitter4j.conf.ConfigurationBuilder setSearchBaseURL(java.lang.String) -> f
    twitter4j.conf.ConfigurationBuilder setSigningOAuthBaseURL(java.lang.String) -> g
    twitter4j.conf.ConfigurationBuilder setSigningRestBaseURL(java.lang.String) -> h
    twitter4j.conf.ConfigurationBuilder setUploadBaseURL(java.lang.String) -> i
    void checkNotBuilt() -> b
twitter4j.conf.ConfigurationContext -> b.c.d:
    twitter4j.conf.ConfigurationFactory factory -> a
    twitter4j.conf.Configuration getInstance() -> a
twitter4j.conf.ConfigurationFactory -> b.c.e:
    twitter4j.conf.Configuration getInstance() -> a
twitter4j.conf.PropertyConfiguration -> b.c.f:
    boolean getBoolean(java.util.Properties,java.lang.String,java.lang.String) -> a
    int getIntProperty(java.util.Properties,java.lang.String,java.lang.String) -> b
    java.lang.String getString(java.util.Properties,java.lang.String,java.lang.String) -> c
    boolean loadProperties(java.util.Properties,java.io.InputStream) -> a
    boolean loadProperties(java.util.Properties,java.lang.String) -> a
    void normalize(java.util.Properties) -> b
    boolean notNull(java.util.Properties,java.lang.String,java.lang.String) -> d
    void setFieldsWithPrefix(java.util.Properties,java.lang.String) -> b
    void setFieldsWithTreePath(java.util.Properties,java.lang.String) -> c
    boolean equals(java.lang.Object) -> equals
    java.lang.String getOAuthAccessToken() -> a
    java.lang.String getOAuthAuthorizationURL() -> d
    java.util.Map getRequestHeaders() -> D
    int hashCode() -> hashCode
    boolean isJSONStoreEnabled() -> q
    boolean isPrettyDebugEnabled() -> F
    java.lang.String getSearchBaseURL() -> l
    java.lang.String getSigningOAuthRequestTokenURL() -> g
    java.lang.String getOAuthRequestTokenURL() -> e
    boolean isIncludeEntitiesEnabled() -> o
    java.lang.String getOAuthAccessTokenSecret() -> b
    boolean isIncludeRTsEnabled() -> p
    java.lang.String getRestBaseURL() -> k
    java.lang.String getSigningOAuthAccessTokenURL() -> f
    java.lang.String getOAuthAccessTokenURL() -> c
    java.lang.String toString() -> toString
    java.lang.String getUploadBaseURL() -> m
twitter4j.internal.http.BASE64Encoder -> b.d.a.a:
    char last2byte -> a
    char last4byte -> b
    char last6byte -> c
    char lead6byte -> d
    char lead4byte -> e
    char lead2byte -> f
    char[] encodeTable -> g
    java.lang.String encode(byte[]) -> a
twitter4j.internal.http.HTMLEntity -> b.d.a.b:
    java.util.Map entityEscapeMap -> a
    java.util.Map escapeEntityMap -> b
    java.lang.String unescape(java.lang.String) -> a
    void unescape(java.lang.StringBuffer) -> a
twitter4j.internal.http.HttpClient -> b.d.a.c:
    twitter4j.internal.http.HttpResponse request(twitter4j.internal.http.HttpRequest) -> a
twitter4j.internal.http.HttpClientBase -> b.d.a.d:
    twitter4j.internal.logging.Logger logger -> b
    twitter4j.internal.http.HttpClientConfiguration CONF -> a
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    void write(java.io.DataOutputStream,java.lang.String) -> a
    boolean isProxyConfigured() -> a
twitter4j.internal.http.HttpClientConfiguration -> b.d.a.e:
    int getHttpConnectionTimeout() -> u
    java.lang.String getHttpProxyHost() -> v
    java.lang.String getHttpProxyPassword() -> w
    int getHttpProxyPort() -> x
    java.lang.String getHttpProxyUser() -> y
    int getHttpReadTimeout() -> z
    int getHttpRetryCount() -> A
    int getHttpRetryIntervalSeconds() -> B
    boolean isSSLErrorIgnored() -> C
    boolean isPrettyDebugEnabled() -> F
twitter4j.internal.http.HttpClientFactory -> b.d.a.f:
    twitter4j.internal.http.HttpClient getInstance(twitter4j.internal.http.HttpClientConfiguration) -> a
twitter4j.internal.http.HttpClientImpl -> b.d.a.g:
    twitter4j.internal.logging.Logger logger -> b
    javax.net.ssl.TrustManager[] TRUST_ALL_CERTS -> c
    javax.net.ssl.SSLSocketFactory IGNORE_ERROR_SSL_FACTORY -> d
    javax.net.ssl.HostnameVerifier ALLOW_ALL_HOSTNAME_VERIFIER -> e
    java.util.Map instanceMap -> f
    twitter4j.internal.http.HttpResponse request(twitter4j.internal.http.HttpRequest) -> a
    java.net.HttpURLConnection getConnection(java.lang.String) -> a
    void setHeaders(twitter4j.internal.http.HttpRequest,java.net.HttpURLConnection) -> a
twitter4j.internal.http.HttpClientImpl$1 -> b.d.a.h:
    void checkClientTrusted(java.security.cert.X509Certificate[],java.lang.String) -> checkClientTrusted
    void checkServerTrusted(java.security.cert.X509Certificate[],java.lang.String) -> checkServerTrusted
    java.security.cert.X509Certificate[] getAcceptedIssuers() -> getAcceptedIssuers
twitter4j.internal.http.HttpClientImpl$2 -> b.d.a.i:
    boolean verify(java.lang.String,javax.net.ssl.SSLSession) -> verify
twitter4j.internal.http.HttpClientImpl$3 -> b.d.a.j:
    twitter4j.internal.http.HttpClientImpl this$0 -> a
    java.net.PasswordAuthentication getPasswordAuthentication() -> getPasswordAuthentication
twitter4j.internal.http.HttpClientWrapper -> b.d.a.k:
    twitter4j.internal.http.HttpClientWrapperConfiguration wrapperConf -> a
    twitter4j.internal.http.HttpClient http -> b
    java.util.Map requestHeaders -> c
    twitter4j.internal.http.HttpResponseListener httpResponseListener -> d
    boolean equals(java.lang.Object) -> equals
    twitter4j.internal.http.HttpResponse get(java.lang.String,twitter4j.auth.Authorization) -> a
    twitter4j.internal.http.HttpResponse get(java.lang.String,twitter4j.internal.http.HttpParameter[],twitter4j.auth.Authorization) -> a
    int hashCode() -> hashCode
    twitter4j.internal.http.HttpResponse post(java.lang.String,twitter4j.auth.Authorization) -> b
    twitter4j.internal.http.HttpResponse post(java.lang.String,twitter4j.internal.http.HttpParameter[],twitter4j.auth.Authorization) -> b
    void setHttpResponseListener(twitter4j.internal.http.HttpResponseListener) -> a
    java.lang.String toString() -> toString
    twitter4j.internal.http.HttpResponse request(twitter4j.internal.http.HttpRequest) -> a
twitter4j.internal.http.HttpClientWrapperConfiguration -> b.d.a.l:
    java.util.Map getRequestHeaders() -> D
twitter4j.internal.http.HttpParameter -> b.d.a.m:
    java.lang.String name -> a
    java.lang.String value -> b
    java.io.File file -> c
    java.io.InputStream fileBody -> d
    int compareTo(twitter4j.internal.http.HttpParameter) -> a
    boolean equals(java.lang.Object) -> equals
    java.lang.String getContentType() -> a
    java.io.File getFile() -> b
    java.io.InputStream getFileBody() -> c
    java.lang.String getName() -> d
    java.lang.String getValue() -> e
    boolean hasFileBody() -> f
    int hashCode() -> hashCode
    boolean isFile() -> g
    java.lang.String toString() -> toString
    boolean containsFile(twitter4j.internal.http.HttpParameter[]) -> a
    java.lang.String encode(java.lang.String) -> a
    java.lang.String encodeParameters(twitter4j.internal.http.HttpParameter[]) -> b
    int compareTo(java.lang.Object) -> compareTo
twitter4j.internal.http.HttpRequest -> b.d.a.n:
    twitter4j.internal.http.RequestMethod method -> a
    java.lang.String url -> b
    twitter4j.internal.http.HttpParameter[] parameters -> c
    twitter4j.auth.Authorization authorization -> d
    java.util.Map requestHeaders -> e
    twitter4j.internal.http.HttpParameter[] NULL_PARAMETERS -> f
    boolean equals(java.lang.Object) -> equals
    twitter4j.auth.Authorization getAuthorization() -> a
    twitter4j.internal.http.RequestMethod getMethod() -> b
    twitter4j.internal.http.HttpParameter[] getParameters() -> c
    java.util.Map getRequestHeaders() -> d
    java.lang.String getURL() -> e
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
twitter4j.internal.http.HttpResponse -> b.d.a.o:
    twitter4j.internal.logging.Logger logger -> e
    twitter4j.internal.http.HttpClientConfiguration CONF -> a
    int statusCode -> b
    java.lang.String responseAsString -> c
    java.io.InputStream is -> d
    boolean streamConsumed -> f
    org.json.JSONObject json -> g
    org.json.JSONArray jsonArray -> h
    org.json.JSONArray asJSONArray() -> a
    org.json.JSONObject asJSONObject() -> b
    java.io.InputStream asStream() -> c
    java.lang.String asString() -> d
    void disconnect() -> e
    java.lang.String getResponseHeader(java.lang.String) -> a
    int getStatusCode() -> f
    java.lang.String toString() -> toString
    void disconnectForcibly() -> g
twitter4j.internal.http.HttpResponseEvent -> b.d.a.p:
    twitter4j.internal.http.HttpRequest request -> a
    twitter4j.internal.http.HttpResponse response -> b
    twitter4j.TwitterException twitterException -> c
    boolean equals(java.lang.Object) -> equals
    twitter4j.internal.http.HttpResponse getResponse() -> a
    twitter4j.TwitterException getTwitterException() -> b
    int hashCode() -> hashCode
    boolean isAuthenticated() -> c
    java.lang.String toString() -> toString
twitter4j.internal.http.HttpResponseImpl -> b.d.a.q:
    java.net.HttpURLConnection con -> e
    void disconnect() -> e
    java.lang.String getResponseHeader(java.lang.String) -> a
twitter4j.internal.http.HttpResponseListener -> b.d.a.r:
    void httpResponseReceived(twitter4j.internal.http.HttpResponseEvent) -> a
twitter4j.internal.http.RequestMethod -> b.d.a.s:
    java.lang.String name -> f
    java.util.Map instances -> g
    twitter4j.internal.http.RequestMethod GET -> a
    twitter4j.internal.http.RequestMethod POST -> b
    twitter4j.internal.http.RequestMethod DELETE -> c
    twitter4j.internal.http.RequestMethod HEAD -> d
    twitter4j.internal.http.RequestMethod PUT -> e
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String name() -> a
    java.lang.String toString() -> toString
twitter4j.internal.json.AccountTotalsJSONImpl -> b.d.b.a:
    int updates -> a
    int followers -> b
    int favorites -> c
    int friends -> d
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
twitter4j.internal.json.CategoryJSONImpl -> b.d.b.b:
    java.lang.String name -> a
    java.lang.String slug -> b
    int size -> c
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
twitter4j.internal.json.DataObjectFactoryUtil -> b.d.b.c:
    void clearThreadLocalMap() -> a
    java.lang.Object registerJSONObject(java.lang.Object,java.lang.Object) -> a
twitter4j.internal.json.DirectMessageJSONImpl -> b.d.b.d:
    long id -> a
    java.lang.String text -> b
    long senderId -> c
    long recipientId -> d
    java.util.Date createdAt -> e
    java.lang.String senderScreenName -> f
    java.lang.String recipientScreenName -> g
    twitter4j.User sender -> h
    twitter4j.User recipient -> i
    boolean equals(java.lang.Object) -> equals
    java.util.Date getCreatedAt() -> a
    long getId() -> b
    twitter4j.User getRecipient() -> c
    twitter4j.User getSender() -> d
    java.lang.String getText() -> e
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    void init(org.json.JSONObject) -> a
    twitter4j.ResponseList createDirectMessageList(twitter4j.internal.http.HttpResponse,twitter4j.conf.Configuration) -> a
twitter4j.internal.json.HashtagEntityJSONImpl -> b.d.b.e:
    int start -> a
    int end -> b
    java.lang.String text -> c
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    void init(org.json.JSONObject) -> a
twitter4j.internal.json.IDsJSONImpl -> b.d.b.f:
    long[] ids -> a
    long previousCursor -> b
    long nextCursor -> c
    boolean equals(java.lang.Object) -> equals
    long[] getIDs() -> a
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    void init(java.lang.String) -> a
twitter4j.internal.json.LocationJSONImpl -> b.d.b.g:
    int woeid -> a
    java.lang.String countryName -> b
    java.lang.String countryCode -> c
    java.lang.String placeName -> d
    int placeCode -> e
    java.lang.String name -> f
    java.lang.String url -> g
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    twitter4j.ResponseList createLocationList(org.json.JSONArray,boolean) -> a
twitter4j.internal.json.MediaEntityJSONImpl -> b.d.b.h:
    long id -> a
    int start -> b
    int end -> c
    java.net.URL url -> d
    java.net.URL mediaURL -> e
    java.net.URL mediaURLHttps -> f
    java.net.URL expandedURL -> g
    java.lang.String displayURL -> h
    java.util.Map sizes -> i
    boolean equals(java.lang.Object) -> equals
    int getEnd() -> b
    java.net.URL getExpandedURL() -> c
    java.net.URL getMediaURL() -> a
    int getStart() -> d
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
twitter4j.internal.json.MediaEntityJSONImpl$Size -> b.d.b.i:
    int width -> e
    int height -> f
    int resize -> g
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
twitter4j.internal.json.PlaceJSONImpl -> b.d.b.j:
    java.lang.String name -> a
    java.lang.String streetAddress -> b
    java.lang.String countryCode -> c
    java.lang.String id -> d
    java.lang.String country -> e
    java.lang.String placeType -> f
    java.lang.String url -> g
    java.lang.String fullName -> h
    java.lang.String boundingBoxType -> i
    twitter4j.GeoLocation[][] boundingBoxCoordinates -> j
    java.lang.String geometryType -> k
    twitter4j.GeoLocation[][] geometryCoordinates -> l
    twitter4j.Place[] containedWithIn -> m
    int compareTo(twitter4j.Place) -> a
    boolean equals(java.lang.Object) -> equals
    java.lang.String getId() -> a
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    void init(org.json.JSONObject) -> a
    int compareTo(java.lang.Object) -> compareTo
twitter4j.internal.json.QueryResultJSONImpl -> b.d.b.k:
    long sinceId -> a
    long maxId -> b
    java.lang.String refreshUrl -> c
    int resultsPerPage -> d
    java.lang.String warning -> e
    double completedIn -> f
    int page -> g
    java.lang.String query -> h
    java.util.List tweets -> i
    boolean equals(java.lang.Object) -> equals
    double getCompletedIn() -> a
    long getMaxId() -> b
    int getPage() -> c
    java.lang.String getQuery() -> d
    java.lang.String getRefreshUrl() -> e
    int getResultsPerPage() -> f
    long getSinceId() -> g
    java.util.List getTweets() -> h
    java.lang.String getWarning() -> i
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
twitter4j.internal.json.RateLimitStatusJSONImpl -> b.d.b.l:
    int remainingHits -> a
    int hourlyLimit -> b
    int resetTimeInSeconds -> c
    int secondsUntilReset -> d
    java.util.Date resetTime -> e
    boolean equals(java.lang.Object) -> equals
    int getSecondsUntilReset() -> a
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    twitter4j.RateLimitStatus createFeatureSpecificRateLimitStatusFromResponseHeader(twitter4j.internal.http.HttpResponse) -> a
    twitter4j.RateLimitStatus createFromResponseHeader(twitter4j.internal.http.HttpResponse) -> b
twitter4j.internal.json.RelatedResultsJSONImpl -> b.d.b.m:
    java.util.Map tweetsMap -> a
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
twitter4j.internal.json.RelationshipJSONImpl -> b.d.b.n:
    long targetUserId -> a
    java.lang.String targetUserScreenName -> b
    boolean sourceBlockingTarget -> c
    boolean sourceNotificationsEnabled -> d
    boolean sourceFollowingTarget -> e
    boolean sourceFollowedByTarget -> f
    long sourceUserId -> g
    java.lang.String sourceUserScreenName -> h
    boolean equals(java.lang.Object) -> equals
    long getSourceUserId() -> a
    java.lang.String getSourceUserScreenName() -> b
    long getTargetUserId() -> c
    java.lang.String getTargetUserScreenName() -> d
    int hashCode() -> hashCode
    boolean isSourceBlockingTarget() -> e
    boolean isSourceFollowingTarget() -> f
    java.lang.String toString() -> toString
twitter4j.internal.json.ResponseListImpl -> b.d.b.o:
    twitter4j.RateLimitStatus rateLimitStatus -> a
    twitter4j.RateLimitStatus featureSpecificRateLimitStatus -> b
    int accessLevel -> c
    void init(twitter4j.internal.http.HttpResponse) -> a
twitter4j.internal.json.SavedSearchJSONImpl -> b.d.b.p:
    java.util.Date createdAt -> a
    java.lang.String query -> b
    int position -> c
    java.lang.String name -> d
    int id -> e
    int compareTo(twitter4j.SavedSearch) -> a
    boolean equals(java.lang.Object) -> equals
    int getId() -> a
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    int compareTo(java.lang.Object) -> compareTo
twitter4j.internal.json.StatusJSONImpl -> b.d.b.q:
    twitter4j.internal.logging.Logger logger -> a
    java.util.Date createdAt -> b
    long id -> c
    java.lang.String text -> d
    java.lang.String source -> e
    boolean isTruncated -> f
    long inReplyToStatusId -> g
    long inReplyToUserId -> h
    boolean isFavorited -> i
    java.lang.String inReplyToScreenName -> j
    twitter4j.GeoLocation geoLocation -> k
    twitter4j.Place place -> l
    long retweetCount -> m
    boolean wasRetweetedByMe -> n
    java.lang.String[] contributors -> o
    long[] contributorsIDs -> p
    twitter4j.Annotations annotations -> q
    twitter4j.Status retweetedStatus -> r
    twitter4j.UserMentionEntity[] userMentionEntities -> s
    twitter4j.URLEntity[] urlEntities -> t
    twitter4j.HashtagEntity[] hashtagEntities -> u
    twitter4j.MediaEntity[] mediaEntities -> v
    twitter4j.Status myRetweetedStatus -> w
    twitter4j.User user -> x
    int compareTo(twitter4j.Status) -> a
    boolean equals(java.lang.Object) -> equals
    java.util.Date getCreatedAt() -> c
    twitter4j.GeoLocation getGeoLocation() -> d
    long getId() -> e
    java.lang.String getInReplyToScreenName() -> f
    long getInReplyToStatusId() -> g
    long getInReplyToUserId() -> h
    twitter4j.MediaEntity[] getMediaEntities() -> a
    long getRetweetCount() -> i
    twitter4j.Status getRetweetedStatus() -> j
    java.lang.String getSource() -> k
    java.lang.String getText() -> l
    twitter4j.URLEntity[] getURLEntities() -> b
    twitter4j.User getUser() -> m
    int hashCode() -> hashCode
    boolean isFavorited() -> n
    boolean isRetweet() -> o
    java.lang.String toString() -> toString
    void init(org.json.JSONObject) -> a
    twitter4j.ResponseList createStatusList(twitter4j.internal.http.HttpResponse,twitter4j.conf.Configuration) -> a
    int compareTo(java.lang.Object) -> compareTo
twitter4j.internal.json.TrendJSONImpl -> b.d.b.r:
    java.lang.String name -> a
    java.lang.String url -> b
    java.lang.String query -> c
    boolean equals(java.lang.Object) -> equals
    java.lang.String getName() -> a
    java.lang.String getQuery() -> b
    java.lang.String getUrl() -> c
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
twitter4j.internal.json.TrendsJSONImpl -> b.d.b.s:
    java.util.Date asOf -> a
    java.util.Date trendAt -> b
    twitter4j.Trend[] trends -> c
    twitter4j.Location location -> d
    int compareTo(twitter4j.Trends) -> a
    boolean equals(java.lang.Object) -> equals
    java.util.Date getAsOf() -> a
    java.util.Date getTrendAt() -> b
    twitter4j.Trend[] getTrends() -> c
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    twitter4j.Location extractLocation(org.json.JSONObject,boolean) -> a
    twitter4j.Trend[] jsonArrayToTrendArray(org.json.JSONArray,boolean) -> a
    twitter4j.ResponseList createTrendsList(twitter4j.internal.http.HttpResponse,boolean) -> a
    int compareTo(java.lang.Object) -> compareTo
twitter4j.internal.json.TweetJSONImpl -> b.d.b.t:
    java.lang.String text -> a
    long toUserId -> b
    java.lang.String toUser -> c
    java.lang.String fromUser -> d
    long id -> e
    long fromUserId -> f
    java.lang.String isoLanguageCode -> g
    java.lang.String source -> h
    java.lang.String profileImageUrl -> i
    java.util.Date createdAt -> j
    java.lang.String location -> k
    twitter4j.Place place -> l
    twitter4j.GeoLocation geoLocation -> m
    twitter4j.Annotations annotations -> n
    twitter4j.UserMentionEntity[] userMentionEntities -> o
    twitter4j.URLEntity[] urlEntities -> p
    twitter4j.HashtagEntity[] hashtagEntities -> q
    twitter4j.MediaEntity[] mediaEntities -> r
    int compareTo(twitter4j.Tweet) -> a
    boolean equals(java.lang.Object) -> equals
    java.util.Date getCreatedAt() -> c
    java.lang.String getFromUser() -> d
    long getFromUserId() -> e
    twitter4j.GeoLocation getGeoLocation() -> f
    long getId() -> g
    twitter4j.MediaEntity[] getMediaEntities() -> a
    java.lang.String getProfileImageUrl() -> h
    java.lang.String getSource() -> i
    java.lang.String getText() -> j
    java.lang.String getToUser() -> k
    long getToUserId() -> l
    twitter4j.URLEntity[] getURLEntities() -> b
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    int compareTo(java.lang.Object) -> compareTo
twitter4j.internal.json.TwitterResponseImpl -> b.d.b.u:
    twitter4j.RateLimitStatus rateLimitStatus -> a
    int accessLevel -> b
twitter4j.internal.json.URLEntityJSONImpl -> b.d.b.v:
    int start -> a
    int end -> b
    java.net.URL url -> c
    java.net.URL expandedURL -> d
    java.lang.String displayURL -> e
    boolean equals(java.lang.Object) -> equals
    int getEnd() -> b
    java.net.URL getExpandedURL() -> c
    int getStart() -> d
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    void init(org.json.JSONObject) -> a
twitter4j.internal.json.UserJSONImpl -> b.d.b.w:
    long id -> a
    java.lang.String name -> b
    java.lang.String screenName -> c
    java.lang.String location -> d
    java.lang.String description -> e
    boolean isContributorsEnabled -> f
    java.lang.String profileImageUrl -> g
    java.lang.String profileImageUrlHttps -> h
    java.lang.String url -> i
    boolean isProtected -> j
    int followersCount -> k
    twitter4j.Status status -> l
    java.lang.String profileBackgroundColor -> m
    java.lang.String profileTextColor -> n
    java.lang.String profileLinkColor -> o
    java.lang.String profileSidebarFillColor -> p
    java.lang.String profileSidebarBorderColor -> q
    boolean profileUseBackgroundImage -> r
    boolean showAllInlineMedia -> s
    int friendsCount -> t
    java.util.Date createdAt -> u
    int favouritesCount -> v
    int utcOffset -> w
    java.lang.String timeZone -> x
    java.lang.String profileBackgroundImageUrl -> y
    java.lang.String profileBackgroundImageUrlHttps -> z
    boolean profileBackgroundTiled -> A
    java.lang.String lang -> B
    int statusesCount -> C
    boolean isGeoEnabled -> D
    boolean isVerified -> E
    boolean translator -> F
    int listedCount -> G
    boolean isFollowRequestSent -> H
    int compareTo(twitter4j.User) -> a
    boolean equals(java.lang.Object) -> equals
    java.util.Date getCreatedAt() -> a
    java.lang.String getDescription() -> b
    int getFavouritesCount() -> c
    int getFollowersCount() -> d
    int getFriendsCount() -> e
    long getId() -> f
    java.lang.String getLocation() -> g
    java.lang.String getName() -> h
    java.net.URL getProfileImageURL() -> i
    java.lang.String getScreenName() -> j
    int getStatusesCount() -> k
    java.net.URL getURL() -> l
    int hashCode() -> hashCode
    boolean isProtected() -> m
    java.lang.String toString() -> toString
    void init(org.json.JSONObject) -> a
    twitter4j.ResponseList createUserList(twitter4j.internal.http.HttpResponse,twitter4j.conf.Configuration) -> a
    twitter4j.ResponseList createUserList(org.json.JSONArray,twitter4j.internal.http.HttpResponse,twitter4j.conf.Configuration) -> a
    int compareTo(java.lang.Object) -> compareTo
twitter4j.internal.json.UserListJSONImpl -> b.d.b.x:
    int id -> a
    java.lang.String name -> b
    java.lang.String fullName -> c
    java.lang.String slug -> d
    java.lang.String description -> e
    int subscriberCount -> f
    int memberCount -> g
    java.lang.String uri -> h
    boolean mode -> i
    twitter4j.User user -> j
    boolean following -> k
    int compareTo(twitter4j.UserList) -> a
    boolean equals(java.lang.Object) -> equals
    int getId() -> a
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    int compareTo(java.lang.Object) -> compareTo
twitter4j.internal.json.UserMentionEntityJSONImpl -> b.d.b.y:
    int start -> a
    int end -> b
    java.lang.String name -> c
    java.lang.String screenName -> d
    long id -> e
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    void init(org.json.JSONObject) -> a
twitter4j.internal.json.z_T4JInternalFactory -> b.d.b.z:
    twitter4j.ResponseList createDirectMessageList(twitter4j.internal.http.HttpResponse) -> a
    twitter4j.IDs createIDs(twitter4j.internal.http.HttpResponse) -> b
    twitter4j.QueryResult createQueryResult(twitter4j.internal.http.HttpResponse,twitter4j.Query) -> a
    twitter4j.Relationship createRelationship(twitter4j.internal.http.HttpResponse) -> c
    twitter4j.Status createStatus(twitter4j.internal.http.HttpResponse) -> d
    twitter4j.ResponseList createStatusList(twitter4j.internal.http.HttpResponse) -> e
    twitter4j.ResponseList createTrendsList(twitter4j.internal.http.HttpResponse) -> f
    twitter4j.User createUser(twitter4j.internal.http.HttpResponse) -> g
    twitter4j.ResponseList createUserList(twitter4j.internal.http.HttpResponse) -> h
twitter4j.internal.json.z_T4JInternalJSONImplFactory -> b.d.b.aa:
    twitter4j.conf.Configuration conf -> a
    twitter4j.ResponseList createDirectMessageList(twitter4j.internal.http.HttpResponse) -> a
    twitter4j.IDs createIDs(twitter4j.internal.http.HttpResponse) -> b
    twitter4j.QueryResult createQueryResult(twitter4j.internal.http.HttpResponse,twitter4j.Query) -> a
    twitter4j.Relationship createRelationship(twitter4j.internal.http.HttpResponse) -> c
    twitter4j.Status createStatus(twitter4j.internal.http.HttpResponse) -> d
    twitter4j.ResponseList createStatusList(twitter4j.internal.http.HttpResponse) -> e
    twitter4j.ResponseList createTrendsList(twitter4j.internal.http.HttpResponse) -> f
    twitter4j.User createUser(twitter4j.internal.http.HttpResponse) -> g
    twitter4j.ResponseList createUserList(twitter4j.internal.http.HttpResponse) -> h
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    twitter4j.RateLimitStatus createFeatureSpecificRateLimitStatusFromResponseHeader(twitter4j.internal.http.HttpResponse) -> i
    twitter4j.RateLimitStatus createRateLimitStatusFromResponseHeader(twitter4j.internal.http.HttpResponse) -> j
    twitter4j.GeoLocation[][] coordinatesAsGeoLocationArray(org.json.JSONArray) -> a
    twitter4j.GeoLocation createGeoLocation(org.json.JSONObject) -> a
twitter4j.internal.logging.AndroidLogger -> b.d.c.a:
    void debug(java.lang.String) -> a
    void debug(java.lang.String,java.lang.String) -> a
    void error(java.lang.String,java.lang.Throwable) -> a
    boolean isDebugEnabled() -> a
    boolean isErrorEnabled() -> b
    boolean isWarnEnabled() -> c
    void warn(java.lang.String) -> b
twitter4j.internal.logging.AndroidLoggerFactory -> b.d.c.b:
    twitter4j.internal.logging.Logger getLogger() -> a
twitter4j.internal.logging.Logger -> b.d.c.c:
    twitter4j.internal.logging.LoggerFactory LOGGER_FACTORY -> a
    void debug(java.lang.String) -> a
    void debug(java.lang.String,java.lang.String) -> a
    void error(java.lang.String,java.lang.Throwable) -> a
    boolean isDebugEnabled() -> a
    void warn(java.lang.String) -> b
    twitter4j.internal.logging.Logger getLogger() -> d
twitter4j.internal.logging.LoggerFactory -> b.d.c.d:
    twitter4j.internal.logging.Logger getLogger() -> a
twitter4j.internal.util.z_T4JInternalParseUtil -> b.d.d.a:
    java.lang.ThreadLocal formatMap -> a
    boolean getBoolean(java.lang.String,org.json.JSONObject) -> a
    java.util.Date getDate(java.lang.String,org.json.JSONObject) -> b
    java.util.Date getDate(java.lang.String,org.json.JSONObject,java.lang.String) -> a
    java.util.Date getDate(java.lang.String,java.lang.String) -> a
    double getDouble(java.lang.String,org.json.JSONObject) -> c
    int getInt(java.lang.String) -> a
    int getInt(java.lang.String,org.json.JSONObject) -> d
    long getLong(java.lang.String) -> b
    long getLong(java.lang.String,org.json.JSONObject) -> e
    java.lang.String getRawString(java.lang.String,org.json.JSONObject) -> f
    java.lang.String getUnescapedString(java.lang.String,org.json.JSONObject) -> g
    java.lang.String getURLDecodedString(java.lang.String,org.json.JSONObject) -> h
    java.util.Date parseTrendsDate(java.lang.String) -> c
    int toAccessLevel(twitter4j.internal.http.HttpResponse) -> a
twitter4j.internal.util.z_T4JInternalParseUtil$1 -> b.d.d.b:
    java.util.Map initialValue() -> a
    java.lang.Object initialValue() -> initialValue
twitter4j.internal.util.z_T4JInternalStringUtil -> b.d.d.c:
    java.lang.String join(long[]) -> a
    java.lang.String maskString(java.lang.String) -> a
    java.lang.String[] split(java.lang.String,java.lang.String) -> a
twitter4j.json.DataObjectFactory -> b.e.a:
    java.lang.reflect.Constructor statusConstructor -> a
    java.lang.reflect.Constructor userConstructor -> b
    java.lang.reflect.Constructor tweetConstructor -> c
    java.lang.reflect.Constructor relationshipConstructor -> d
    java.lang.reflect.Constructor placeConstructor -> e
    java.lang.reflect.Constructor savedSearchConstructor -> f
    java.lang.reflect.Constructor trendConstructor -> g
    java.lang.reflect.Constructor trendsConstructor -> h
    java.lang.reflect.Constructor IDsConstructor -> i
    java.lang.reflect.Constructor rateLimitStatusConstructor -> j
    java.lang.reflect.Constructor categoryConstructor -> k
    java.lang.reflect.Constructor directMessageConstructor -> l
    java.lang.reflect.Constructor locationConstructor -> m
    java.lang.reflect.Constructor userListConstructor -> n
    java.lang.reflect.Constructor relatedResultsConstructor -> o
    java.lang.reflect.Constructor statusDeletionNoticeConstructor -> p
    java.lang.reflect.Constructor accountTotalsConstructor -> q
    java.lang.ThreadLocal rawJsonMap -> r
    void clearThreadLocalMap() -> a
    java.lang.Object registerJSONObject(java.lang.Object,java.lang.Object) -> a
twitter4j.json.DataObjectFactory$1 -> b.e.b:
    java.util.Map initialValue() -> a
    java.lang.Object initialValue() -> initialValue
twitter4j.management.APIStatistics -> b.f.a:
    twitter4j.management.InvocationStatisticsCalculator API_STATS_CALCULATOR -> a
    java.util.Map METHOD_STATS_MAP -> b
    int HISTORY_SIZE -> c
    void methodCalled(java.lang.String,long,boolean) -> a
    twitter4j.management.InvocationStatisticsCalculator getMethodStatistics(java.lang.String) -> a
twitter4j.management.InvocationStatisticsCalculator -> b.f.b:
    java.lang.String name -> a
    long[] times -> b
    int index -> c
    long callCount -> d
    long errorCount -> e
    long totalTime -> f
    long getAverageTime() -> a
    long getCallCount() -> b
    long getErrorCount() -> c
    long getTotalTime() -> d
    void increment(long,boolean) -> a
    java.lang.String toString() -> toString
